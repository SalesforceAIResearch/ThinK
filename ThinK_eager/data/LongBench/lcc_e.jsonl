{"input": "", "context": "/**\n * \n */\npackage com.gint.app.bisis4.client.editor.inventar;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FocusTraversalPolicy;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.FocusAdapter;\nimport java.awt.event.FocusEvent;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.ListSelectionListener;\nimport net.miginfocom.swing.MigLayout;\nimport com.gint.app.bisis4.client.BisisApp;\nimport com.gint.app.bisis4.client.editor.Messages;\nimport com.gint.app.bisis4.format.HoldingsDataCoders;\nimport com.gint.app.bisis4.format.UValidatorException;\nimport com.gint.app.bisis4.records.Primerak;\n/**\n * @author Bojana\n *\n */\npublic class RaspodelaFrame extends JInternalFrame {\n\t\n\tprivate JTable raspodelaTable;\t\n\tprivate JScrollPane raspodelaScrollPane;\n\t\n\tprivate JPanel raspodelaButtonsPanel;\t\n\tprivate JButton sacuvajButton;\n\tprivate JButton odustaniButton;\n\t\n\tprivate JTextField brojPrimTxtFld;\n\tprivate JTextField preostaloTxtFld;\n\tprivate CodedValuePanel odeljenjePanel;\n\tprivate CodedValuePanel invKnjPanel;\n\tprivate CodedValuePanel podlokacijaPanel;\n\t\n\tprivate JSpinner raspodelaSpinner;\n\tprivate JButton dodajButton;\n\t\n\tprivate InventarPanel inventarPanel;\t\n\tprivate RaspodelaTableModel raspodelaTableModel;\n\t\n  private boolean monograph = false;\n\t\n\t\n\tpublic RaspodelaFrame(InventarPanel mp) {\n    super(\"Raspodela primeraka\", true, true, false, false);\n    this.monograph = mp instanceof MonographInventarPanel;\n    if(!monograph) setTitle(\"Raspodela godina\");\n\t\t\n\t\tthis.inventarPanel = mp;\n\t\tthis.setSize(new Dimension(800,400));\n\t\tcreate();\t\t\n\t}\n\t\n\tprivate void create(){\t\t\n\t\traspodelaTable = new JTable();\n\t\tbrojPrimTxtFld = new JTextField();\n\t\tpreostaloTxtFld = new JTextField();\n\t\tdodajButton = new JButton(new ImageIcon(RaspodelaFrame.class\n\t\t\t\t.getResource(\"/com/gint/app/bisis4/client/images/Check16.png\")));\n\t\tpreostaloTxtFld.setEditable(false);\n\t\tpreostaloTxtFld.setFocusable(false);    \n\t\todeljenjePanel = new CodedValuePanel(HoldingsDataCoders.ODELJENJE_CODER,null);\n\t\todeljenjePanel.setDefaultOdeljenje();\n\t\tinvKnjPanel = new CodedValuePanel(HoldingsDataCoders.INVENTARNAKNJIGA_CODER,null);\n\t\tpodlokacijaPanel = new CodedValuePanel(HoldingsDataCoders.PODLOKACIJA_CODER, null);\n\t\traspodelaSpinner = new JSpinner();\t\t\n\t\traspodelaSpinner.setValue(new Integer(1));\n\t\tSpinnerNumberModel spinnerModel = new SpinnerNumberModel(0,0,1000,1);\n\t\traspodelaSpinner.setModel(spinnerModel);\n\t\traspodelaSpinner.setPreferredSize(new Dimension(40,20));\n\t\t\n\t\t//raspodelaSpinner.set\n\t\t\n\t\t\n\t\traspodelaTableModel = new RaspodelaTableModel(this);\n\t\traspodelaTable.setModel(raspodelaTableModel);\t\t\n\t\traspodelaTable.doLayout();\n\t\traspodelaScrollPane = new JScrollPane(raspodelaTable);\n\t\t\n\t\traspodelaButtonsPanel = new JPanel();\n\t\tsacuvajButton = new JButton(\"Raspodeli\");\n\t\tsacuvajButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/ok.gif\")));\n\t\tsacuvajButton.setEnabled(false);\n\t\todustaniButton = new JButton(\"Odustani\");\n\t\todustaniButton.setIcon(new ImageIcon(getClass().getResource(\n        \"/com/gint/app/bisis4/client/images/remove.gif\")));\n\t\traspodelaButtonsPanel.setLayout(new GridBagLayout());\n\t\tGridBagConstraints cB = new GridBagConstraints();\n\t\tcB.gridx = 0;\n\t\tcB.gridy = 0;\n\t\tcB.weightx = 0.1;\n\t\traspodelaButtonsPanel.add(sacuvajButton,cB);\n\t\tinitialize();\n\t\t\n\t\tMigLayout layout = new MigLayout(\"\",\"[][]20[]\",\"[][]30[]0[]10[]0[]10[][]\");\n\t\tsetLayout(layout);\n\t\t\n\t\tadd(new JLabel(\"Broj knjiga za raspodelu:\"),\"align right\");\t\t\n\t\tadd(brojPrimTxtFld,\"wrap, width :30: \");\t\t\n\t\tadd(new JLabel(\"Preostalo:\"),\"align right\");\t\t\n\t\tadd(preostaloTxtFld,\"wrap, width :30:\");\n\t\n\t\tadd(new JLabel(\"Odeljenje:\"),\"cell 0 2 2 1\");\n\t\tadd(odeljenjePanel,\"cell 0 3 2 1\");\n\t\tadd(new JLabel(\"Inventarna knjiga:\"),\"cell 0 4 2 1\");\n\t\tadd(invKnjPanel,   \"cell 0 5 2 1\");\n\t\tadd(new JLabel(\"Podlokacija:\"),\"cell 0 6 2 1\");\n\t\tadd(podlokacijaPanel,   \"cell 0 7 2 1\");\n\t\t\n\t\tJPanel brPrim = new JPanel();\n\t\tbrPrim.setLayout(new MigLayout());\n\t\tbrPrim.add(new JLabel(\"Broj primeraka:\"));\n\t\tbrPrim.add(raspodelaSpinner,\"growy\");\n\t\tbrPrim.add(dodajButton);\t\t\n\t\tadd(brPrim,\"cell 0 8 2 1\");\t\t\n\t\tadd(raspodelaScrollPane,\"cell 2 0 1 7, grow\");\t\t\n\t\tJPanel buttonsPanel = new JPanel();\t\t\n\t\tbuttonsPanel.add(sacuvajButton);\n\t\tbuttonsPanel.add(odustaniButton);\n\t\tadd(buttonsPanel,\"cell 2 9 1 1, align right\");\n    \n    RaspodelaFocusTraversalPolicy policy = new RaspodelaFocusTraversalPolicy();\n    setFocusTraversalPolicy(policy);\n\t\t\n\t\t\n\t\t\n\t\t//actions\n\t\tbrojPrimTxtFld.addFocusListener(new FocusAdapter(){\n\t\t\tpublic void focusLost(FocusEvent e) {\n\t\t\t\thandleSetPreostalo();\n\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\tdodajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleAddPrimerak();\t\t\t\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tListSelectionModel lSelModel = raspodelaTable.getSelectionModel();\n\t\tlSelModel.addListSelectionListener(new ListSelectionListener(){\n\t\t\tpublic void valueChanged(ListSelectionEvent e) {\t\t\t\t\n\t\t\t\t\thandleLoadPrimerak();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t\t\n\t\t\n\t\traspodelaTable.addKeyListener(new KeyAdapter(){\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t\thandleKeys(e);\n\t\t\t}\t\t\t\n\t\t});\t\t\n\t\t\n\t\tsacuvajButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleRaspodeli();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\t\n\t\t\n\t\todustaniButton.addActionListener(new ActionListener(){\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\thandleClose();\t\t\t\t\n\t\t\t}\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void initialize(){\n\t\tbrojPrimTxtFld.setText(\"0\");\n\t}\n\t\n\tprivate void handleAddPrimerak() {\t\n\t\tPrimerak primerak = ((MonographInventarPanel)inventarPanel).getPrimerakFromForm();\n\t\ttry {\n\t\t\tif (odeljenjePanel.getCode().equals(\"\") || odeljenjePanel.getCode().equals(\"\")) \n\t\t\t\tthrow new RaspodelaException(\"Nisu uneti svi podaci za raspodelu!\");\n\t\t\tprimerak.setOdeljenje(odeljenjePanel.getCode());\n", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "length": 451, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "5a3807e791e54f080c852b4a4ffaa104dc61429725efd608"}
{"input": "", "context": "#region License\n// Copyright (c) 2013, ClearCanvas Inc.\n// All rights reserved.\n// http://www.clearcanvas.ca\n//\n// This file is part of the ClearCanvas RIS/PACS open source project.\n//\n// The ClearCanvas RIS/PACS open source project is free software: you can\n// redistribute it and/or modify it under the terms of the GNU General Public\n// License as published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// The ClearCanvas RIS/PACS open source project is distributed in the hope that it\n// will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along with\n// the ClearCanvas RIS/PACS open source project.  If not, see\n// <http://www.gnu.org/licenses/>.\n#endregion\n// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.\nnamespace ClearCanvas.ImageServer.Model.EntityBrokers\n{\n    using System;\n    using System.Xml;\n    using ClearCanvas.Enterprise.Core;\n    using ClearCanvas.ImageServer.Enterprise;\n    public partial class WorkQueueSelectCriteria : EntitySelectCriteria\n    {\n        public WorkQueueSelectCriteria()\n        : base(\"WorkQueue\")\n        {}\n        public WorkQueueSelectCriteria(WorkQueueSelectCriteria other)\n        : base(other)\n        {}\n        public override object Clone()\n        {\n            return new WorkQueueSelectCriteria(this);\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ServerPartitionGUID\")]\n        public ISearchCondition<ServerEntityKey> ServerPartitionKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ServerPartitionKey\"))\n              {\n                 SubCriteria[\"ServerPartitionKey\"] = new SearchCondition<ServerEntityKey>(\"ServerPartitionKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ServerPartitionKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyStorageGUID\")]\n        public ISearchCondition<ServerEntityKey> StudyStorageKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"StudyStorageKey\"))\n              {\n                 SubCriteria[\"StudyStorageKey\"] = new SearchCondition<ServerEntityKey>(\"StudyStorageKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"StudyStorageKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueTypeEnum\")]\n        public ISearchCondition<WorkQueueTypeEnum> WorkQueueTypeEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueTypeEnum\"))\n              {\n                 SubCriteria[\"WorkQueueTypeEnum\"] = new SearchCondition<WorkQueueTypeEnum>(\"WorkQueueTypeEnum\");\n              }\n              return (ISearchCondition<WorkQueueTypeEnum>)SubCriteria[\"WorkQueueTypeEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueStatusEnum\")]\n        public ISearchCondition<WorkQueueStatusEnum> WorkQueueStatusEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueueStatusEnum\"))\n              {\n                 SubCriteria[\"WorkQueueStatusEnum\"] = new SearchCondition<WorkQueueStatusEnum>(\"WorkQueueStatusEnum\");\n              }\n              return (ISearchCondition<WorkQueueStatusEnum>)SubCriteria[\"WorkQueueStatusEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueuePriorityEnum\")]\n        public ISearchCondition<WorkQueuePriorityEnum> WorkQueuePriorityEnum\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"WorkQueuePriorityEnum\"))\n              {\n                 SubCriteria[\"WorkQueuePriorityEnum\"] = new SearchCondition<WorkQueuePriorityEnum>(\"WorkQueuePriorityEnum\");\n              }\n              return (ISearchCondition<WorkQueuePriorityEnum>)SubCriteria[\"WorkQueuePriorityEnum\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureCount\")]\n        public ISearchCondition<Int32> FailureCount\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureCount\"))\n              {\n                 SubCriteria[\"FailureCount\"] = new SearchCondition<Int32>(\"FailureCount\");\n              }\n              return (ISearchCondition<Int32>)SubCriteria[\"FailureCount\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ScheduledTime\")]\n        public ISearchCondition<DateTime> ScheduledTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ScheduledTime\"))\n              {\n                 SubCriteria[\"ScheduledTime\"] = new SearchCondition<DateTime>(\"ScheduledTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"ScheduledTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"InsertTime\")]\n        public ISearchCondition<DateTime> InsertTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"InsertTime\"))\n              {\n                 SubCriteria[\"InsertTime\"] = new SearchCondition<DateTime>(\"InsertTime\");\n              }\n              return (ISearchCondition<DateTime>)SubCriteria[\"InsertTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"LastUpdatedTime\")]\n        public ISearchCondition<DateTime?> LastUpdatedTime\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"LastUpdatedTime\"))\n              {\n                 SubCriteria[\"LastUpdatedTime\"] = new SearchCondition<DateTime?>(\"LastUpdatedTime\");\n              }\n              return (ISearchCondition<DateTime?>)SubCriteria[\"LastUpdatedTime\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"FailureDescription\")]\n        public ISearchCondition<String> FailureDescription\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"FailureDescription\"))\n              {\n                 SubCriteria[\"FailureDescription\"] = new SearchCondition<String>(\"FailureDescription\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"FailureDescription\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"Data\")]\n        public ISearchCondition<XmlDocument> Data\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"Data\"))\n              {\n                 SubCriteria[\"Data\"] = new SearchCondition<XmlDocument>(\"Data\");\n              }\n              return (ISearchCondition<XmlDocument>)SubCriteria[\"Data\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ExternalRequestQueueGUID\")]\n        public ISearchCondition<ServerEntityKey> ExternalRequestQueueKey\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ExternalRequestQueueKey\"))\n              {\n                 SubCriteria[\"ExternalRequestQueueKey\"] = new SearchCondition<ServerEntityKey>(\"ExternalRequestQueueKey\");\n              }\n              return (ISearchCondition<ServerEntityKey>)SubCriteria[\"ExternalRequestQueueKey\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"ProcessorID\")]\n        public ISearchCondition<String> ProcessorID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"ProcessorID\"))\n              {\n                 SubCriteria[\"ProcessorID\"] = new SearchCondition<String>(\"ProcessorID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"ProcessorID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"GroupID\")]\n        public ISearchCondition<String> GroupID\n        {\n            get\n            {\n              if (!SubCriteria.ContainsKey(\"GroupID\"))\n              {\n", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "length": 475, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "d1cdb285b1f1b73f8d637fde4adf331aa839bb2e31eb8599"}
{"input": "", "context": "/*\n * Handlers.cs - Implementation of the \"I18N.Common.Handlers\" class.\n *\n * Copyright (c) 2002  Southern Storm Software, Pty Ltd\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nnamespace I18N.Common\n{\nusing System;\nusing System.Collections.Generic;\n// This class provides an internal list of handlers, for runtime\n// engines that do not implement the altered \"GetFile\" semantics.\n// The list must be kept up to date manually.\npublic sealed class Handlers\n{\n    public static readonly String[] List = {\n        \"I18N.CJK.CP932\",\n        \"I18N.CJK.CP936\",\n        \"I18N.CJK.CP949\",\n        \"I18N.CJK.CP950\",\n        \"I18N.CJK.CP50220\",\n        \"I18N.CJK.CP50221\",\n        \"I18N.CJK.CP50222\",\n        \"I18N.CJK.CP51932\",\n        \"I18N.CJK.CP51949\",\n        \"I18N.CJK.CP54936\",\n        \"I18N.CJK.ENCbig5\",\n        \"I18N.CJK.ENCgb2312\",\n        \"I18N.CJK.ENCshift_jis\",\n        \"I18N.CJK.ENCiso_2022_jp\",\n        \"I18N.CJK.ENCeuc_jp\",\n        \"I18N.CJK.ENCeuc_kr\",\n        \"I18N.CJK.ENCuhc\",\n        \"I18N.CJK.ENCgb18030\",\n        \"I18N.MidEast.CP1254\",\n        \"I18N.MidEast.ENCwindows_1254\",\n        \"I18N.MidEast.CP1255\",\n        \"I18N.MidEast.ENCwindows_1255\",\n        \"I18N.MidEast.CP1256\",\n        \"I18N.MidEast.ENCwindows_1256\",\n        \"I18N.MidEast.CP28596\",\n        \"I18N.MidEast.ENCiso_8859_6\",\n        \"I18N.MidEast.CP28598\",\n        \"I18N.MidEast.ENCiso_8859_8\",\n        \"I18N.MidEast.CP28599\",\n        \"I18N.MidEast.ENCiso_8859_9\",\n        \"I18N.MidEast.CP38598\",\n        \"I18N.MidEast.ENCwindows_38598\",\n        \"I18N.Other.CP1251\",\n        \"I18N.Other.ENCwindows_1251\",\n        \"I18N.Other.CP1257\",\n        \"I18N.Other.ENCwindows_1257\",\n        \"I18N.Other.CP1258\",\n        \"I18N.Other.ENCwindows_1258\",\n        \"I18N.Other.CP20866\",\n        \"I18N.Other.ENCkoi8_r\",\n        \"I18N.Other.CP21866\",\n        \"I18N.Other.ENCkoi8_u\",\n        \"I18N.Other.CP28594\",\n        \"I18N.Other.ENCiso_8859_4\",\n        \"I18N.Other.CP28595\",\n        \"I18N.Other.ENCiso_8859_5\",\n        \"I18N.Other.ISCIIEncoding\",\n        \"I18N.Other.CP57002\",\n        \"I18N.Other.CP57003\",\n        \"I18N.Other.CP57004\",\n        \"I18N.Other.CP57005\",\n        \"I18N.Other.CP57006\",\n        \"I18N.Other.CP57007\",\n        \"I18N.Other.CP57008\",\n        \"I18N.Other.CP57009\",\n        \"I18N.Other.CP57010\",\n        \"I18N.Other.CP57011\",\n        \"I18N.Other.ENCx_iscii_de\",\n        \"I18N.Other.ENCx_iscii_be\",\n        \"I18N.Other.ENCx_iscii_ta\",\n        \"I18N.Other.ENCx_iscii_te\",\n        \"I18N.Other.ENCx_iscii_as\",\n        \"I18N.Other.ENCx_iscii_or\",\n        \"I18N.Other.ENCx_iscii_ka\",\n        \"I18N.Other.ENCx_iscii_ma\",\n        \"I18N.Other.ENCx_iscii_gu\",\n        \"I18N.Other.ENCx_iscii_pa\",\n        \"I18N.Other.CP874\",\n        \"I18N.Other.ENCwindows_874\",\n        \"I18N.Rare.CP1026\",\n        \"I18N.Rare.ENCibm1026\",\n        \"I18N.Rare.CP1047\",\n        \"I18N.Rare.ENCibm1047\",\n        \"I18N.Rare.CP1140\",\n        \"I18N.Rare.ENCibm01140\",\n        \"I18N.Rare.CP1141\",\n        \"I18N.Rare.ENCibm01141\",\n        \"I18N.Rare.CP1142\",\n        \"I18N.Rare.ENCibm01142\",\n        \"I18N.Rare.CP1143\",\n        \"I18N.Rare.ENCibm01143\",\n        \"I18N.Rare.CP1144\",\n        \"I18N.Rare.ENCibm1144\",\n        \"I18N.Rare.CP1145\",\n        \"I18N.Rare.ENCibm1145\",\n        \"I18N.Rare.CP1146\",\n        \"I18N.Rare.ENCibm1146\",\n        \"I18N.Rare.CP1147\",\n        \"I18N.Rare.ENCibm1147\",\n        \"I18N.Rare.CP1148\",\n        \"I18N.Rare.ENCibm1148\",\n        \"I18N.Rare.CP1149\",\n        \"I18N.Rare.ENCibm1149\",\n        \"I18N.Rare.CP20273\",\n        \"I18N.Rare.ENCibm273\",\n        \"I18N.Rare.CP20277\",\n        \"I18N.Rare.ENCibm277\",\n        \"I18N.Rare.CP20278\",\n        \"I18N.Rare.ENCibm278\",\n        \"I18N.Rare.CP20280\",\n        \"I18N.Rare.ENCibm280\",\n        \"I18N.Rare.CP20284\",\n        \"I18N.Rare.ENCibm284\",\n        \"I18N.Rare.CP20285\",\n        \"I18N.Rare.ENCibm285\",\n        \"I18N.Rare.CP20290\",\n        \"I18N.Rare.ENCibm290\",\n        \"I18N.Rare.CP20297\",\n        \"I18N.Rare.ENCibm297\",\n        \"I18N.Rare.CP20420\",\n        \"I18N.Rare.ENCibm420\",\n        \"I18N.Rare.CP20424\",\n        \"I18N.Rare.ENCibm424\",\n        \"I18N.Rare.CP20871\",\n        \"I18N.Rare.ENCibm871\",\n        \"I18N.Rare.CP21025\",\n        \"I18N.Rare.ENCibm1025\",\n        \"I18N.Rare.CP37\",\n        \"I18N.Rare.ENCibm037\",\n        \"I18N.Rare.CP500\",\n        \"I18N.Rare.ENCibm500\",\n        \"I18N.Rare.CP708\",\n        \"I18N.Rare.ENCasmo_708\",\n        \"I18N.Rare.CP852\",\n        \"I18N.Rare.ENCibm852\",\n        \"I18N.Rare.CP855\",\n        \"I18N.Rare.ENCibm855\",\n        \"I18N.Rare.CP857\",\n        \"I18N.Rare.ENCibm857\",\n        \"I18N.Rare.CP858\",\n        \"I18N.Rare.ENCibm00858\",\n        \"I18N.Rare.CP862\",\n        \"I18N.Rare.ENCibm862\",\n        \"I18N.Rare.CP864\",\n        \"I18N.Rare.ENCibm864\",\n        \"I18N.Rare.CP866\",\n        \"I18N.Rare.ENCibm866\",\n        \"I18N.Rare.CP869\",\n        \"I18N.Rare.ENCibm869\",\n        \"I18N.Rare.CP870\",\n        \"I18N.Rare.ENCibm870\",\n        \"I18N.Rare.CP875\",\n        \"I18N.Rare.ENCibm875\",\n        \"I18N.West.CP10000\",\n        \"I18N.West.ENCmacintosh\",\n        \"I18N.West.CP10079\",\n        \"I18N.West.ENCx_mac_icelandic\",\n        \"I18N.West.CP1250\",\n        \"I18N.West.ENCwindows_1250\",\n        \"I18N.West.CP1252\",\n        \"I18N.West.ENCwindows_1252\",\n        \"I18N.West.CP1253\",\n        \"I18N.West.ENCwindows_1253\",\n        \"I18N.West.CP28592\",\n        \"I18N.West.ENCiso_8859_2\",\n        \"I18N.West.CP28593\",\n        \"I18N.West.ENCiso_8859_3\",\n        \"I18N.West.CP28597\",\n        \"I18N.West.ENCiso_8859_7\",\n        \"I18N.West.CP28605\",\n        \"I18N.West.ENCiso_8859_15\",\n        \"I18N.West.CP437\",\n        \"I18N.West.ENCibm437\",\n        \"I18N.West.CP850\",\n        \"I18N.West.ENCibm850\",\n        \"I18N.West.CP860\",\n        \"I18N.West.ENCibm860\",\n        \"I18N.West.CP861\",\n        \"I18N.West.ENCibm861\",\n        \"I18N.West.CP863\",\n        \"I18N.West.ENCibm863\",\n        \"I18N.West.CP865\",\n        \"I18N.West.ENCibm865\"\n    };\n\t\n\tstatic Dictionary<string, string> aliases;\n\tpublic static string GetAlias (string name)\n\t{\n\t\tif (aliases == null)\n\t\t\tBuildHash ();\n\t\tstring v;\n\t\taliases.TryGetValue (name, out v);\n\t\treturn v;\n\t}\n\tstatic void BuildHash ()\n\t{\n\t\taliases = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase);\n\t\taliases.Add (\"arabic\", \"iso_8859_6\");\n\t\taliases.Add (\"csISOLatinArabic\", \"iso_8859_6\");\n\t\taliases.Add (\"ECMA_114\", \"iso_8859_6\");\n\t\taliases.Add (\"ISO_8859_6:1987\", \"iso_8859_6\");\n\t\taliases.Add (\"iso_ir_127\", \"iso_8859_6\");\n\t\taliases.Add (\"cp1256\" ,\"windows_1256\");\n\t\taliases.Add (\"csISOLatin4\", \"iso_8859_4\");\n\t\taliases.Add (\"ISO_8859_4:1988\", \"iso_8859_4\");\n\t\taliases.Add (\"iso_ir_110\", \"iso_8859_4\");\n\t\taliases.Add (\"l4\", \"iso_8859_4\");\n\t\taliases.Add (\"latin4\", \"iso_8859_4\");\n\t\taliases.Add (\"cp852\" ,\"ibm852\");\n\t\taliases.Add (\"csISOLatin2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_8859_2:1987\", \"iso_8859_2\");\n\t\taliases.Add (\"iso8859_2\", \"iso_8859_2\");\n\t\taliases.Add (\"iso_ir_101\", \"iso_8859_2\");\n\t\taliases.Add (\"l2\", \"iso_8859_2\");\n\t\taliases.Add (\"latin2\", \"iso_8859_2\");\n\t\taliases.Add (\"x-cp1250\", \"windows_1250\");\n\t\taliases.Add (\"chinese\", \"gb2312\");\n\t\taliases.Add (\"CN-GB\", \"gb2312\");\n\t\taliases.Add (\"csGB2312\", \"gb2312\");\n\t\taliases.Add (\"csGB231280\", \"gb2312\");\n\t\taliases.Add (\"csISO58GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB_2312_80\", \"gb2312\");\n\t\taliases.Add (\"GB231280\", \"gb2312\");\n\t\taliases.Add (\"GB2312_80\", \"gb2312\");\n", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "length": 545, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "2332b1a0569df7051e4f8442139c2dbbdf7b27bf1ef7cd16"}
{"input": "", "context": "\"\"\"Tools for parsing a regular expression into a Pattern.\"\"\"\nimport collections\nimport string\nimport charsource\nimport pattern as p\n# Characters that represent themselves in a regular expression.\n# TODO(jasonpr): Handle $ and ^ specially at edges of regex.\n_CHAR_LITERALS = string.ascii_letters + string.digits + '!\"#$%&\\',-/:;<=>@^_`~]} \\t\\n\\r'\n# Characters that represent themselves inside a square-bracket expression.\n_GROUP_CHARS = string.ascii_letters + string.digits + '!\"#$%&\\'()*+,-./:;<=>?@[^_`{|}~'\n# Characters that represent themselves when escaped with a backslash.\n_IDENTIY_ESCAPES = r'.[\\()*+?{|'\n# Characters that represent a character class when escaped with a backslash.\n_CHARACTER_CLASSES = {\n    'd': string.digits,\n    'w': string.ascii_letters + string.digits + '_',\n    'h': string.hexdigits,\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    's': string.whitespace,\n    }\n_BRACKET_CHARACTER_CLASSES = {\n    'alnum': set(string.ascii_letters + string.digits),\n    'alpha': set(string.ascii_letters),\n    'digit': set(string.digits),\n    'lower': set(string.ascii_lowercase),\n    'print': set(string.printable),\n    'punct': set(string.punctuation),\n    # TODO(jasonpr): Make an informed decision, rather than blindly\n    # inheritting this definition from Python.\n    'space': set(string.whitespace),\n    'upper': set(string.ascii_uppercase),\n    'xdigit': set(string.hexdigits),\n    }\ndef parse_regex(regex_string):\n    \"\"\"Convert a regular expression string into a Pattern.\"\"\"\n    return _parse_regex(charsource.GetPutSource(regex_string))\n# The following _parse_* methods form a recursive descent parser\n# that respect the order of operations in a regular expression.\ndef _parse_regex(source):\n    \"\"\"Parse any regex into a Pattern.\"\"\"\n    return _parse_alternation(source)\ndef _parse_alternation(source):\n    \"\"\"Parse an alternation expression, like 'ab|cd|ef'.\"\"\"\n    parts = []\n    # Act as though the last character was a '|', so we get the\n    # initial element of the alternation.\n    last_char = '|'\n    while last_char == '|':\n        parts.append(_parse_concatenation(source))\n        last_char = source.get()\n    # Put back the non-alternation character.\n    source.put(last_char)\n    return p.Or(*parts)\ndef _parse_concatenation(source):\n    \"\"\"Parse a concatenation expression, like 'abc' or 'a(b|c)d*'.\"\"\"\n    parts = []\n    duplication = _parse_duplication(source)\n    # If we're expecting a concatenation, there MUST be at least\n    # one (first) element!\n    assert duplication\n    while duplication:\n        parts.append(duplication)\n        duplication = _parse_duplication(source)\n    return p.Sequence(*parts)\ndef _parse_duplication(source):\n    \"\"\"Parse a duplication expression, like 'a*' or '(a|b){3,5}'.\"\"\"\n    duplicated = _parse_parenthesization(source)\n    if not duplicated:\n        return None\n    duplicator = source.get()\n    if duplicator == '?':\n        return p.Maybe(duplicated)\n    elif duplicator == '*':\n        return p.Star(duplicated)\n    elif duplicator == '+':\n        return p.Plus(duplicated)\n    elif duplicator == '{':\n        min_repeats = _parse_positive_int(source)\n        range_continuation = source.get()\n        # We will ultimately expect a closing curly brace, but\n        # we might see a comma and a max repeats value, first.\n        if range_continuation == ',':\n            max_repeats = _parse_positive_int(source)\n            range_continuation = source.get()\n        else:\n            max_repeats = min_repeats\n        if range_continuation != '}':\n            raise ValueError('Expected \"}\", but got \"%s\".' %\n                             range_continuation)\n        return p.Repeat(duplicated, min_repeats, max_repeats)\n    else:\n        source.put(duplicator)\n        return duplicated\ndef _parse_parenthesization(source):\n    \"\"\"Parse a parenthesization pattern, like '(a|b)' or '[ab]' or 'a'.\n    Note that '[ab]' is a parenthesization, since it is equivalent\n    to '([ab])'.  Similarly, 'a' is equivalent to '(a)'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '(':\n        enclosed_regex = _parse_regex(source)\n        close_paren = source.get()\n        assert close_paren == ')'\n        return enclosed_regex\n    # Otherwise, this must just be a group.  (Groups have just as\n    # tight of binding as a parenthesization.)\n    source.put(first_char)\n    return _parse_group(source)\ndef _parse_group(source):\n    \"\"\"Parse a group pattern, like '[abc]' or 'a'.\n    Note that 'a' is a group, since 'a' is equivalent to '[a]'.\n    \"\"\"\n    first_char = source.get()\n    if first_char == '[':\n        second_char = source.get()\n        if second_char == '^':\n            negating = True\n        else:\n            source.put(second_char)\n            negating = False\n        group_chars = _parse_group_chars(source)\n        result = p.Selection(group_chars, negating)\n        close_brace = source.get()\n        assert close_brace == ']'\n        return result\n    # Otherwise, it's a single normal character.\n    source.put(first_char)\n    return _parse_atom(source)\ndef _parse_group_chars(source):\n    \"\"\"Parse the characters from a group specification.\n    This is just a string of characters allowable in a group specification.\n    For example, a valid parse is 'aA1.?', since '[aA1.?]' is a valid group.\n    \"\"\"\n    chars = set()\n    while True:\n        range_chars = _parse_group_range(source)\n        if range_chars:\n            for char in range_chars:\n                chars.add(char)\n            continue\n        char_class = _parse_char_class(source)\n        if char_class:\n            chars |= char_class\n            continue\n        char = source.get()\n        if not char:\n            raise ValueError('Unexpected end of stream.')\n        if char not in _GROUP_CHARS:\n            source.put(char)\n            break\n        chars.add(char)\n    return ''.join(chars)\ndef _parse_atom(source):\n    \"\"\"Parse a single regex atom.\n    An atom is a period ('.'), a character literal, or an escape sequence.\n    \"\"\"\n    char = source.get()\n    if not char:\n        # For good measure, put the EOF back on!\n        # This doesn't really do anything, since the source will\n        # generate EOFs forever.\n        source.put(char)\n        return None\n    elif char == '.':\n        return p.Anything()\n    elif char in _CHAR_LITERALS:\n        return p.String(char)\n    elif char == '\\\\':\n        escaped = source.get()\n        if escaped in _IDENTIY_ESCAPES:\n            return p.String(escaped)\n        elif escaped in _CHARACTER_CLASSES:\n            return p.Selection(_CHARACTER_CLASSES[escaped])\n        else:\n            raise ValueError('Unexpected escape sequence, \\\\%s.', escaped)\n    else:\n        source.put(char)\n        return None\ndef _parse_positive_int(source):\n    \"\"\"Parse a positive integer.\n    That is, parse a sequence of one or more digits.\n    \"\"\"\n    digits = []\n    next_char = source.get()\n    assert next_char and next_char in string.digits\n    while next_char and next_char in string.digits:\n        digits.append(next_char)\n        next_char = source.get()\n    source.put(next_char)\n    return int(''.join(digits))\ndef _parse_group_range(source):\n    \"\"\"Parse a three-character group range expression.\n    Return the set of characters represented by the range.\n    For example, parsing the expression 'c-e' from the source returns\n    set(['c', 'd', 'e']).\n    \"\"\"\n    start = source.get()\n    if start not in _GROUP_CHARS:\n        source.put(start)\n        return None\n    middle = source.get()\n    if middle != '-':\n        source.put(middle)\n        source.put(start)\n        return None\n    end = source.get()\n    if end not in _GROUP_CHARS:\n        source.put(end)\n        source.put(middle)\n        source.put(start)\n        return None\n    range_chars = set()\n    for ascii_value in range(ord(start), ord(end) + 1):\n        range_chars.add(chr(ascii_value))\n    return range_chars\ndef _parse_char_class(source):\n    for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems():\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "length": 850, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "da4a2050450c0e6dbb46728a24c2681051dcf60db99aed6b"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Nov  8 14:27:22 2016\n@author: Viktor\n\"\"\"\nimport numpy as np\nfrom sklearn.datasets import fetch_mldata\nfrom matplotlib import pyplot as plt\nfrom skimage.io import imread\nfrom skimage.io import imshow\nfrom skimage.morphology import opening, closing\nfrom scipy import ndimage\nfrom sklearn.neighbors import KNeighborsClassifier\n#ucitavanje MNIST dataseta\nmnist = fetch_mldata('MNIST original')\nprint(mnist.data.shape)\nprint(mnist.target.shape)\nprint(np.unique(mnist.target))\nimg = 255-mnist.data[12345]\nimg = img.reshape(28,28)\nplt.imshow(-img, cmap='Greys')\n#iscitavanje dataseta i smestanje u matricu radi lakseg pristupa\nnumbers = [0]*10\nnumbers[0] = mnist['data'][np.where(mnist['target'] == 0.)[0]]\nnumbers[1] = mnist['data'][np.where(mnist['target'] == 1.)[0]]\nnumbers[2] = mnist['data'][np.where(mnist['target'] == 2.)[0]]\nnumbers[3] = mnist['data'][np.where(mnist['target'] == 3.)[0]]\nnumbers[4] = mnist['data'][np.where(mnist['target'] == 4.)[0]]\nnumbers[5] = mnist['data'][np.where(mnist['target'] == 5.)[0]]\nnumbers[6] = mnist['data'][np.where(mnist['target'] == 6.)[0]]\nnumbers[7] = mnist['data'][np.where(mnist['target'] == 7.)[0]]\nnumbers[8] = mnist['data'][np.where(mnist['target'] == 8.)[0]]\nnumbers[9] = mnist['data'][np.where(mnist['target'] == 9.)[0]]\ntest = numbers[0][123]\nres = numbers[0][123] == numbers[0][124]\npercent_hit = np.count_nonzero(res) / 784.0\nrepresentative_number = [0]*10\nfor j in range(0,10):\n    representative_number[j] = np.zeros(np.shape(numbers[j][0]), dtype='float')\n    for i in range(0,len(numbers[j])):\n        representative_number[j] = representative_number[j] + numbers[j][i]\n    representative_number[j] = (representative_number[j])/len(numbers[j])\ndef processing(path):\n    img = imread(path)\n    gray = rgb2gray(img)\n    binary = 1 - (gray > 0.5)\n    binary = closing(binary)\n    binary = opening(binary)\n    labeled, nr_objects = ndimage.label(binary)\n    return nr_objects\ndef poklapanje(niz1, niz2):\n    mera_poklapanja = 0.0\n    for i in range(0,len(niz1)):\n        if(niz1[i]==niz2[i]):\n            mera_poklapanja = mera_poklapanja + 1\n            \n    return mera_poklapanja/len(niz1)\n    \ndef ucitavanje(path):\n    image_path = []\n    with open(path) as f:\n        data = f.read()\n        lines = data.split('\\n')\n        for i, line in enumerate(lines):\n            if(i>1):\n                cols = line.split('\\t')\n                if(cols[0]!=''):\n                    image_path.append(cols[0])\n                \n        f.close()\n        \n    return image_path\ndef upis(path,image_path,result):\n    with open(path,'w') as f:\n        f.write('RA 1/2013 Viktor Sanca\\n')\n        f.write('file\\tsum\\n')\n        for i in range(0,len(image_path)):\n            f.write(image_path[i]+'\\t'+str(result[i])+'\\n')\n        \n        f.close()\n    \ndef get_img(image_path):\n    img = imread(image_path)\n    gray = rgb2gray(img)\n    #gray = closing(gray)\n    #gray = opening(gray)\n    #binary = (gray < 0.5)\n    return gray\ndef binarize(img):\n    return img>1\n    \ndef rgb2gray(img_rgb):\n    img_gray = np.ndarray((img_rgb.shape[0], img_rgb.shape[1]))\n    img_gray = 0.8*img_rgb[:, :, 0] + 0.2*img_rgb[:, :, 1] + 1*img_rgb[:, :, 2]\n    img_gray = img_gray.astype('uint8')\n    return img_gray\ndef mark_indices(image):\n    starting_indices = []\n    img = image.reshape(640*480)\n    for i in range(0,(640)*(480-28)):\n        if(img[i]<10 and img[i+27]<10 and img[i+27*(640)]<10 and img[i+27*(640)+27]<10):\n            starting_indices.append(i)\n            \n    return starting_indices\ndef get_image_from_indice(image,start_indice):\n    image28_28 = np.empty((28*28),dtype='uint8')\n    img = image.reshape(640*480)\n    \n    for i in range(0,28):\n        for j in range(0,28):\n            image28_28[28*i+j]=img[start_indice+i*(640)+j]\n    return image28_28\n    \ndef find_number(image28_28):\n    mmx = [0]*10\n    for i in range(0,10):\n        for j in range(0,len(numbers[i])):\n            res = binarize(image28_28) == binarize(numbers[i][j])\n            if(np.count_nonzero(res)>mmx[i]):\n                mmx[i]=np.count_nonzero(res)\n    \n    return max_idx(mmx)\n    \ndef max_idx(lista):\n    mx = max(lista)\n    for i in range(0,len(lista)):\n        if(lista[i]==mx):\n            return i\n            \n    return -1\n    \nimage_path = []\nresult = []\n    \nin_path = 'level-1-mnist-train/level-1-mnist/out.txt'\nout_path = 'level-1-mnist-test/level-1-mnist-test/out.txt'\ntrain_path = 'level-1-mnist-train/level-1-mnist/'\ntest_path = 'level-1-mnist-test/level-1-mnist-test/'\nimage_paths = ucitavanje(out_path)\n#knn = KNeighborsClassifier()\nknn = KNeighborsClassifier(n_neighbors=2000,weights='distance',algorithm='auto',n_jobs=-1)\nknn.fit(mnist.data,mnist.target)\nsuma = [0]*len(image_paths)\nfor i in range(0,len(image_paths)):\n    print('Image'+str(i+1)+'/'+str(len(image_paths)))\n    img = get_img(test_path+image_paths[i])\n    start_indices = mark_indices(img.reshape(640*480))\n    \n    for start_indice in start_indices:\n        img_d = get_image_from_indice(img,start_indice)\n        #nr = find_number(img_d)\n        nr = knn.predict(img_d)\n        suma[i] = suma[i] + nr[0]\n        suma[i] = int(suma[i])\nfor i in range(0,len(suma)):\n    suma[i] = float(suma[i])\n        \nupis(out_path, image_paths, suma)\nimage28_28 = img_d\nmmx = [0]*10\nfor i in range(0,10):\n    for j in range(0,len(numbers[i])):\n        res = image28_28 == numbers[i][j]\n        if(np.count_nonzero(res)>mmx[i]):\n            mmx[i]=np.count_nonzero(res)\n    \ntotal = np.zeros(784, dtype='float')\nfor i in range(0,10):\n    total = total + representative_number[i]\n        \nimg = representative_number[4]\nimg = img.reshape(28,28)\nplt.imshow(img, cmap='Greys')\n", "answers": ["check = numbers[5][123]"], "length": 502, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "3a9e8b1453db3c2f6454e9ee3926124b1bbca244e7f8e637"}
{"input": "", "context": "/*\n * *************************************************************************************\n *  Copyright (C) 2008 EsperTech, Inc. All rights reserved.                            *\n *  http://esper.codehaus.org                                                          *\n *  http://www.espertech.com                                                           *\n *  ---------------------------------------------------------------------------------- *\n *  The software in this package is published under the terms of the GPL license       *\n *  a copy of which has been included with this distribution in the license.txt file.  *\n * *************************************************************************************\n */\npackage com.espertech.esper.regression.epl;\nimport com.espertech.esper.client.*;\nimport com.espertech.esper.client.soda.*;\nimport com.espertech.esper.support.bean.*;\nimport com.espertech.esper.support.client.SupportConfigFactory;\nimport com.espertech.esper.support.util.SupportUpdateListener;\nimport com.espertech.esper.util.SerializableObjectCopier;\nimport junit.framework.TestCase;\npublic class TestSubselectIn extends TestCase\n{\n    private EPServiceProvider epService;\n    private SupportUpdateListener listener;\n    public void setUp()\n    {\n        Configuration config = SupportConfigFactory.getConfiguration();\n        config.addEventType(\"S0\", SupportBean_S0.class);\n        config.addEventType(\"S1\", SupportBean_S1.class);\n        config.addEventType(\"S2\", SupportBean_S2.class);\n        epService = EPServiceProviderManager.getDefaultProvider(config);\n        epService.initialize();\n        listener = new SupportUpdateListener();\n    }\n    public void testInSelect()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectOM() throws Exception\n    {\n        EPStatementObjectModel subquery = new EPStatementObjectModel();\n        subquery.setSelectClause(SelectClause.create(\"id\"));\n        subquery.setFromClause(FromClause.create(FilterStream.create(\"S1\").addView(View.create(\"win\", \"length\", Expressions.constant(1000)))));\n        EPStatementObjectModel model = new EPStatementObjectModel();\n        model.setFromClause(FromClause.create(FilterStream.create(\"S0\")));\n        model.setSelectClause(SelectClause.create().add(Expressions.subqueryIn(\"id\", subquery), \"value\"));\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    public void testInSelectCompile() throws Exception\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatementObjectModel model = epService.getEPAdministrator().compileEPL(stmtText);\n        model = (EPStatementObjectModel) SerializableObjectCopier.copy(model);\n        assertEquals(stmtText, model.toEPL());\n        EPStatement stmt = epService.getEPAdministrator().create(model);\n        stmt.addListener(listener);\n        runTestInSelect();\n    }\n    private void runTestInSelect()\n    {\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhere()\n    {\n        String stmtText = \"select id in (select id from S1.win:length(1000) where id > 0) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInSelectWhereExpressions()\n    {\n        String stmtText = \"select 3*id in (select 2*id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(6));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInWildcard()\n    {\n        epService.getEPAdministrator().getConfiguration().addEventType(\"ArrayBean\", SupportBeanArrayCollMap.class);\n        String stmtText = \"select s0.anyObject in (select * from S1.win:length(1000)) as value from ArrayBean s0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        SupportBean_S1 s1 = new SupportBean_S1(100);\n        SupportBeanArrayCollMap arrayBean = new SupportBeanArrayCollMap(s1);\n        epService.getEPRuntime().sendEvent(s1);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        SupportBean_S2 s2 = new SupportBean_S2(100);\n        arrayBean.setAnyObject(s2);\n        epService.getEPRuntime().sendEvent(s2);\n        epService.getEPRuntime().sendEvent(arrayBean);\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testInNullable()\n    {\n        String stmtText = \"select id from S0 as s0 where p00 in (select p10 from S1.win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(1, \"a\"));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1, \"A\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(3, null));\n        assertFalse(listener.isInvoked());\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4, \"A\"));\n        assertEquals(4, listener.assertOneGetNewAndReset().get(\"id\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-2, null));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5, null));\n        assertFalse(listener.isInvoked());\n    }\n    public void testInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 0, 0L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", 99, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, 99l);\n        assertEquals(99L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", 98, null);\n        sendBean(\"A\", null, 98l);\n        assertEquals(98L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n    }\n    public void testInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertEquals(1, listener.assertOneGetNewAndReset().get(\"intBoxed\"));\n    }\n    public void testNotInNullRow()\n    {\n        String stmtText = \"select intBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where intBoxed not in \" +\n                          \"(select longBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"B\", 1, 1l);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1l);\n        assertFalse(listener.isInvoked());\n    }\n    public void testNotInSelect()\n    {\n        String stmtText = \"select not id in (select id from S1.win:length(1000)) as value from S0\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(-1));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(2));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(-1));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S1(5));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(4));\n        assertEquals(true, listener.assertOneGetNewAndReset().get(\"value\"));\n        epService.getEPRuntime().sendEvent(new SupportBean_S0(5));\n        assertEquals(false, listener.assertOneGetNewAndReset().get(\"value\"));\n    }\n    public void testNotInNullableCoercion()\n    {\n        String stmtText = \"select longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed not in \" +\n                          \"(select intBoxed from \" + SupportBean.class.getName() + \"(string='B').win:length(1000))\";\n        EPStatement stmt = epService.getEPAdministrator().createEPL(stmtText);\n        stmt.addListener(listener);\n        sendBean(\"A\", 0, 0L);\n        assertEquals(0L, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"A\", null, null);\n        assertEquals(null, listener.assertOneGetNewAndReset().get(\"longBoxed\"));\n        sendBean(\"B\", null, null);\n        sendBean(\"A\", 1, 1L);\n        assertFalse(listener.isInvoked());\n", "answers": ["        sendBean(\"A\", null, null);"], "length": 756, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa15f3d4eeb6f0c28379f41721521940dfe5d3eb6bc898b9"}
{"input": "", "context": "package net.brokentrain.ftf.ui.gui.dialog;\nimport net.brokentrain.ftf.ui.gui.GUI;\nimport net.brokentrain.ftf.ui.gui.properties.BrowserTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ConnectionProperties;\nimport net.brokentrain.ftf.ui.gui.properties.PropertyPage;\nimport net.brokentrain.ftf.ui.gui.properties.QueryTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.SystemTrayProperties;\nimport net.brokentrain.ftf.ui.gui.properties.TransferTabProperties;\nimport net.brokentrain.ftf.ui.gui.properties.ViewProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ArXivProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.DOIProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleDesktopSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleScholarProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.GoogleWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PlosJournalsProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedCentralProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.PubMedProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ScirusProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.ServicesProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.TerrierProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.WebOfKnowledgeProperties;\nimport net.brokentrain.ftf.ui.gui.properties.services.YahooWebSearchProperties;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsRegistry;\nimport net.brokentrain.ftf.ui.gui.settings.SettingsSaver;\nimport net.brokentrain.ftf.ui.gui.util.FontUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutDataUtil;\nimport net.brokentrain.ftf.ui.gui.util.LayoutUtil;\nimport net.brokentrain.ftf.ui.gui.util.PaintUtil;\nimport net.brokentrain.ftf.ui.gui.util.StringUtil;\nimport net.brokentrain.ftf.ui.gui.util.WidgetUtil;\nimport org.eclipse.jface.dialogs.Dialog;\nimport org.eclipse.jface.dialogs.IDialogConstants;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.KeyAdapter;\nimport org.eclipse.swt.events.KeyEvent;\nimport org.eclipse.swt.events.PaintEvent;\nimport org.eclipse.swt.events.PaintListener;\nimport org.eclipse.swt.events.SelectionAdapter;\nimport org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.graphics.Point;\nimport org.eclipse.swt.graphics.Rectangle;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Listener;\nimport org.eclipse.swt.widgets.Shell;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swt.widgets.TreeItem;\n/* \n * TODO: This entire class could REALLY do with a re-think - since there were\n * few preference pages to think about they were just hard  coded, then it\n * started to grow and grow leading to this mess.  This should probably be made\n * dynamic and just build the *service* preference pages by seeing what is in\n * SettingsRegistry.services rather than hard coding them explicitly :(! This\n * kind of applies to the entire services package that is a sub-package of the\n * properties package, too.\n * NOTE: This is heavily based on RSSOwls code!\n * */\npublic class PreferencesDialog extends Dialog {\n    public static int lastOpenedPropertyPage = 0;\n    private static final int dialogMinWidth = 460;\n    private GUI fetcherGui;\n    private Composite buttonHolder;\n    private Composite contentHolder;\n    private Composite prefTitleHolder;\n    private Label labelImgHolder;\n    private Label labelPrefTitle;\n    private PropertyPage activePropertyPage;\n    private String lastSelectedItemText;\n    private String title;\n    private TreeItem arxiv;\n    private TreeItem browserTab;\n    private TreeItem connection;\n    private TreeItem crawler;\n    private TreeItem doi;\n    private TreeItem google;\n    private TreeItem googleDesktop;\n    private TreeItem googleScholar;\n    private TreeItem plosjournals;\n    private TreeItem pubmed;\n    private TreeItem pubmedCentral;\n    private TreeItem queryTab;\n    private TreeItem scirus;\n    private TreeItem services;\n    private TreeItem systemTray;\n    private TreeItem terrier;\n    private TreeItem transferTab;\n    private TreeItem view;\n    private TreeItem webofknowledge;\n    private TreeItem yahoo;\n    private Tree tree;\n    public PreferencesDialog(Shell parentShell, String dialogTitle,\n            GUI fetcherGui) {\n        super(parentShell);\n        this.title = dialogTitle;\n        this.fetcherGui = fetcherGui;\n        /* Init the PropertyChangeManager */\n        PropertyPage.initPropertyChangeManager(fetcherGui);\n    }\n    // private void createGeneralProps() {\n    // renewPropertyPage(\"General\");\n    // activePropertyPage = new GeneralProperties(contentHolder, fetcherGui);\n    // }\n    // private void createCrawlerProps() {\n    // renewPropertyPage(\"Crawler\");\n    // activePropertyPage = new CrawlerProperties(contentHolder, fetcherGui);\n    // }\n    // private void createBrowserProps() {\n    // renewPropertyPage(\"Browser\");\n    // }\n    @Override\n    protected void buttonPressed(int buttonId) {\n        if (buttonId == IDialogConstants.OK_ID) {\n            saveSettings();\n        }\n        if (activePropertyPage != null) {\n            activePropertyPage.dispose();\n        }\n        super.buttonPressed(buttonId);\n    }\n    @Override\n    protected void configureShell(Shell shell) {\n        shell.setLayout(LayoutUtil.createGridLayout(1, 0, 5));\n        shell.setText(title);\n        shell.setSize(0, 0);\n    }\n    private void createArxivProperties() {\n        renewPropertyPage(\"ArXiv\");\n        activePropertyPage = new ArXivProperties(contentHolder);\n    }\n    private void createBrowserTabProps() {\n        renewPropertyPage(\"Internal Browser\");\n        activePropertyPage = new BrowserTabProperties(contentHolder);\n    }\n    // private void createLogTabProps() {\n    // renewPropertyPage(\"Debug Log\");\n    // activePropertyPage = new LogTabProperties(contentHolder);\n    // }\n    @Override\n    protected Control createButtonBar(Composite parent) {\n        buttonHolder = new Composite(parent, SWT.NONE);\n        buttonHolder.setLayout(LayoutUtil\n                .createGridLayout(2, 0, 0, 5, 5, false));\n        buttonHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        Composite okCancelHolder = new Composite(buttonHolder, SWT.NONE);\n        okCancelHolder.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 5));\n        okCancelHolder.setLayoutData(new GridData(SWT.END, SWT.TOP, false,\n                false));\n        if (GUI.display.getDismissalAlignment() == SWT.RIGHT) {\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n        } else {\n            createButton(okCancelHolder, IDialogConstants.OK_ID, \"OK\", true)\n                    .setFont(FontUtil.dialogFont);\n            createButton(okCancelHolder, IDialogConstants.CANCEL_ID, \"Cancel\",\n                    false).setFont(FontUtil.dialogFont);\n        }\n        return buttonHolder;\n    }\n    // private void createStatusTabProps() {\n    // renewPropertyPage(\"Status\");\n    // activePropertyPage = new StatusTabProperties(contentHolder, fetcherGui);\n    // }\n    private void createConnectionProps() {\n        renewPropertyPage(\"Connection\");\n        activePropertyPage = new ConnectionProperties(contentHolder, fetcherGui);\n    }\n    @Override\n    protected Control createDialogArea(Composite parent) {\n        Composite baseComposite = (Composite) super.createDialogArea(parent);\n        baseComposite.setLayout(LayoutUtil.createGridLayout(2, 0, 5, 15, 0,\n                false));\n        baseComposite.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_BOTH, 1));\n        Composite treeHolder = new Composite(baseComposite, SWT.NONE);\n        treeHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_VERTICAL, 1, convertHorizontalDLUsToPixels(140)));\n        treeHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        tree = new Tree(treeHolder, SWT.BORDER);\n        tree.setFont(FontUtil.dialogFont);\n        tree.setFocus();\n        tree.setLayoutData(new GridData(GridData.FILL_BOTH));\n        tree.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                handleTreeItemSelect();\n            }\n        });\n        tree.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                TreeItem selectedItem = tree.getSelection()[0];\n                if ((e.keyCode == SWT.CR) && (selectedItem.getItemCount() > 0)) {\n                    selectedItem.setExpanded(!selectedItem.getExpanded());\n                }\n            }\n        });\n        tree.addListener(SWT.MouseDoubleClick, new Listener() {\n            public void handleEvent(Event event) {\n                if (tree.getSelectionCount() > 0) {\n                    Rectangle clickedRect = event.getBounds();\n                    Rectangle selectedRect = tree.getSelection()[0].getBounds();\n                    /* Only handle event, if Mouse is over treeitem */\n                    if (selectedRect.contains(clickedRect.x, clickedRect.y)) {\n                        tree.getSelection()[0]\n                                .setExpanded(!tree.getSelection()[0]\n                                        .getExpanded());\n                    }\n                }\n            }\n        });\n        populateTree();\n        contentHolder = new Composite(baseComposite, SWT.NONE);\n        contentHolder.setLayoutData(new GridData(GridData.FILL_BOTH\n                | GridData.VERTICAL_ALIGN_BEGINNING));\n        contentHolder.setLayout(LayoutUtil.createGridLayout(1, 5, 0));\n        prefTitleHolder = new Composite(contentHolder, SWT.NONE);\n        GridLayout prefTitleHolderLayout = new GridLayout(2, false);\n        prefTitleHolderLayout.marginWidth = 1;\n        prefTitleHolderLayout.marginHeight = 2;\n        prefTitleHolderLayout.marginLeft = 4;\n        prefTitleHolder.setLayout(prefTitleHolderLayout);\n        prefTitleHolder.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.FILL_HORIZONTAL, 2));\n        prefTitleHolder.setBackground(GUI.display\n                .getSystemColor(SWT.COLOR_WHITE));\n        prefTitleHolder.addPaintListener(new PaintListener() {\n            public void paintControl(PaintEvent e) {\n                e.gc.setForeground(GUI.display\n                        .getSystemColor(SWT.COLOR_DARK_GRAY));\n                Rectangle bounds = prefTitleHolder.getClientArea();\n                bounds.height -= 2;\n                bounds.width -= 1;\n                e.gc.drawRectangle(bounds);\n            }\n        });\n        setTreeSelection(lastOpenedPropertyPage);\n        handleTreeItemSelect();\n        Label seperator = new Label(baseComposite, SWT.HORIZONTAL\n                | SWT.SEPARATOR);\n        seperator.setLayoutData(LayoutDataUtil.createGridData(\n                GridData.HORIZONTAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL,\n                2));\n        if (WidgetUtil.isset(tree.getHorizontalBar())) {\n            tree.getHorizontalBar().setSelection(0);\n        }\n        return contentHolder;\n    }\n    private void createDOIProperties() {\n        renewPropertyPage(\"DOI\");\n        activePropertyPage = new DOIProperties(contentHolder);\n    }\n    private void createGoogleDesktopSearchProperties() {\n        renewPropertyPage(\"Google Desktop Search\");\n        activePropertyPage = new GoogleDesktopSearchProperties(contentHolder);\n    }\n    // private void createCiteSeerProperties() {\n    // renewPropertyPage(\"Cite Seer\");\n    // activePropertyPage = new CiteSeerProperties(contentHolder);\n    // }\n    private void createGoogleScholarProperties() {\n        renewPropertyPage(\"Google Scholar\");\n        activePropertyPage = new GoogleScholarProperties(contentHolder);\n    }\n    private void createGoogleWebSearchProperties() {\n        renewPropertyPage(\"Google Web Search\");\n        activePropertyPage = new GoogleWebSearchProperties(contentHolder);\n    }\n    private void createPlosJournalsProperties() {\n        renewPropertyPage(\"Plos Journals\");\n        activePropertyPage = new PlosJournalsProperties(contentHolder);\n    }\n    private void createPubMedCentralProperties() {\n        renewPropertyPage(\"PubMed Central\");\n        activePropertyPage = new PubMedCentralProperties(contentHolder);\n    }\n    private void createPubMedProperties() {\n        renewPropertyPage(\"PubMed\");\n        activePropertyPage = new PubMedProperties(contentHolder);\n    }\n    private void createQueryTabProps() {\n        renewPropertyPage(\"Queries\");\n        activePropertyPage = new QueryTabProperties(contentHolder);\n    }\n    private void createScirusProperties() {\n        renewPropertyPage(\"Scirus\");\n        activePropertyPage = new ScirusProperties(contentHolder);\n    }\n    private void createServicesProperties() {\n        renewPropertyPage(\"Default Services\");\n        activePropertyPage = new ServicesProperties(contentHolder);\n    }\n    private void createSystemTrayProps() {\n        renewPropertyPage(\"System Tray\");\n        activePropertyPage = new SystemTrayProperties(contentHolder, fetcherGui);\n    }\n    private void createTerrierProperties() {\n        renewPropertyPage(\"Terrier\");\n        activePropertyPage = new TerrierProperties(contentHolder);\n    }\n    private void createTransferTabProps() {\n        renewPropertyPage(\"Transfer\");\n        activePropertyPage = new TransferTabProperties(contentHolder);\n    }\n    private void createViewProps() {\n        renewPropertyPage(\"View\");\n        activePropertyPage = new ViewProperties(contentHolder, fetcherGui);\n    }\n    private void createWebOfKnowledgeProperties() {\n        renewPropertyPage(\"WebOfKnowledge\");\n        activePropertyPage = new WebOfKnowledgeProperties(contentHolder);\n    }\n    private void createYahooProperties() {\n        renewPropertyPage(\"Yahoo Web Search\");\n        activePropertyPage = new YahooWebSearchProperties(contentHolder);\n    }\n    @Override\n    protected int getShellStyle() {\n        int style = SWT.TITLE | SWT.BORDER | SWT.RESIZE | SWT.APPLICATION_MODAL\n                | getDefaultOrientation();\n        return style;\n    }\n    void handleTreeItemSelect() {\n        if (tree.getSelection().length == 0) {\n            return;\n        }\n        if (tree.getSelection()[0].getText().equals(lastSelectedItemText)) {\n            return;\n        }\n        lastSelectedItemText = tree.getSelection()[0].getText();\n        // if (tree.getSelection()[0].getText().equals(\"General\")) {\n        // createGeneralProps();\n        // lastOpenedPropertyPage = 0;\n        // }\n        // if (tree.getSelection()[0].getText().equals(\"Crawler\")) {\n        // createCrawlerProps();\n        // lastOpenedPropertyPage = 23;\n        // }\n        /* Browser */\n        // if (tree.getSelection()[0].getText().equals(\"Browser\")) {\n        // createBrowserProps();\n        // lastOpenedPropertyPage = 1;\n        // }\n        /* Connection */\n        if (tree.getSelection()[0].getText().equals(\"Connection\")) {\n            createConnectionProps();\n            lastOpenedPropertyPage = 2;\n        }\n        /* System Tray */\n        else if (tree.getSelection()[0].getText().equals(\"System Tray\")) {\n            createSystemTrayProps();\n            lastOpenedPropertyPage = 3;\n        }\n        /* View */\n        else if (tree.getSelection()[0].getText().equals(\"View\")) {\n            createViewProps();\n            lastOpenedPropertyPage = 4;\n        }\n        /* Browser Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Internal Browser\")) {\n            createBrowserTabProps();\n            lastOpenedPropertyPage = 5;\n        }\n        /* Log Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Debug Log\")) {\n        // createLogTabProps();\n        // lastOpenedPropertyPage = 6;\n        // }\n        /* Query Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Queries\")) {\n            createQueryTabProps();\n            lastOpenedPropertyPage = 7;\n        }\n        /* Status Tab */\n        // else if (tree.getSelection()[0].getText().equals(\"Status\")) {\n        // createStatusTabProps();\n        // lastOpenedPropertyPage = 8;\n        // }\n        /* Transfer Tab */\n        else if (tree.getSelection()[0].getText().equals(\"Transfer\")) {\n            createTransferTabProps();\n            lastOpenedPropertyPage = 9;\n        }\n        /* Services */\n        else if (tree.getSelection()[0].getText().equals(\"Services\")) {\n            createServicesProperties();\n            lastOpenedPropertyPage = 10;\n        }\n        /* ArXiv */\n        else if (tree.getSelection()[0].getText().equals(\"ArXiv\")) {\n            createArxivProperties();\n            lastOpenedPropertyPage = 11;\n        }\n        /* CiteSeer */\n        // else if (tree.getSelection()[0].getText().equals(\"Cite Seer\")) {\n        // createCiteSeerProperties();\n        // lastOpenedPropertyPage = 12;\n        // }\n        /* DOI */\n        else if (tree.getSelection()[0].getText().equals(\"DOI\")) {\n            createDOIProperties();\n            lastOpenedPropertyPage = 13;\n        }\n        /* GoogleDesktopSearch */\n        else if (tree.getSelection()[0].getText().equals(\n                \"Google Desktop Search\")) {\n            createGoogleDesktopSearchProperties();\n            lastOpenedPropertyPage = 24;\n        }\n        /* Google */\n        else if (tree.getSelection()[0].getText().equals(\"Google Web Search\")) {\n            createGoogleWebSearchProperties();\n            lastOpenedPropertyPage = 14;\n        }\n        /* GoogleScholar */\n        else if (tree.getSelection()[0].getText().equals(\"Google Scholar\")) {\n            createGoogleScholarProperties();\n            lastOpenedPropertyPage = 15;\n        }\n        /* PlosJournals */\n        else if (tree.getSelection()[0].getText().equals(\"Plos Journals\")) {\n            createPlosJournalsProperties();\n            lastOpenedPropertyPage = 16;\n        }\n        /* PubMed */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed\")) {\n            createPubMedProperties();\n            lastOpenedPropertyPage = 17;\n        }\n        /* PubMedCentral */\n        else if (tree.getSelection()[0].getText().equals(\"PubMed Central\")) {\n            createPubMedCentralProperties();\n            lastOpenedPropertyPage = 18;\n        }\n        /* Scirus */\n        else if (tree.getSelection()[0].getText().equals(\"Scirus\")) {\n            createScirusProperties();\n            lastOpenedPropertyPage = 19;\n        }\n        /* Terrier */\n        else if (tree.getSelection()[0].getText().equals(\"Terrier\")) {\n            createTerrierProperties();\n            lastOpenedPropertyPage = 20;\n        }\n        /* WebOfKnowledge */\n        else if (tree.getSelection()[0].getText().equals(\"Web Of Knowledge\")) {\n            createWebOfKnowledgeProperties();\n            lastOpenedPropertyPage = 21;\n        }\n        /* Yahoo */\n        else if (tree.getSelection()[0].getText().equals(\"Yahoo Web Search\")) {\n            createYahooProperties();\n            lastOpenedPropertyPage = 22;\n        }\n        contentHolder.layout();\n        initializeBounds(false);\n    }\n    @Override\n    protected void initializeBounds() {\n        initializeBounds(true);\n    }\n    protected void initializeBounds(boolean updateLocation) {\n        Point currentSize = getShell().getSize();\n        Point bestSize = getShell().computeSize(\n                convertHorizontalDLUsToPixels(dialogMinWidth), SWT.DEFAULT);\n        Point location = (updateLocation == true) ? getInitialLocation(bestSize)\n                : getShell().getLocation();\n        if (updateLocation && (bestSize.y > currentSize.y)) {\n            getShell()\n                    .setBounds(location.x, location.y, bestSize.x, bestSize.y);\n        } else if (bestSize.y > currentSize.y) {\n            getShell().setSize(bestSize.x, bestSize.y);\n        }\n        getShell().setMinimumSize(bestSize.x, bestSize.y);\n    }\n    void populateTree() {\n        String selectionText = null;\n        if (tree.getSelectionCount() > 0) {\n            selectionText = tree.getSelection()[0].getText();\n        }\n        if (tree.getItemCount() > 0) {\n            tree.removeAll();\n        }\n        /* General properties */\n        // general = new TreeItem(tree, SWT.NONE);\n        // general.setText(\"General\");\n        /* Crawler sub-property */\n        // crawler = new TreeItem(tree, SWT.NONE);\n        // crawler.setText(\"Crawler\");\n        /* Browser sub-property */\n        // browser = new TreeItem(tree, SWT.NONE);\n        // browser.setText(\"Browser\");\n        /* Connection sub-property */\n        connection = new TreeItem(tree, SWT.NONE);\n        connection.setText(\"Connection\");\n        /* System Tray sub-property */\n        if (SettingsRegistry.useSystemTray()) {\n            // if (!WidgetShop.isset(general)) {\n            // general = new TreeItem(tree, SWT.NONE);\n            // general.setText(\"General\");\n            // }\n            systemTray = new TreeItem(tree, SWT.NONE);\n            systemTray.setText(\"System Tray\");\n        }\n        /* View properties */\n        view = new TreeItem(tree, SWT.NONE);\n        view.setText(\"View\");\n        /* Browser tab sub-property */\n        browserTab = new TreeItem(view, SWT.NONE);\n        browserTab.setText(\"Internal Browser\");\n        /* Log tab sub-property */\n        // logTab = new TreeItem(view, SWT.NONE);\n        // logTab.setText(\"Debug Log\");\n        // logTab.setForeground(ColourUtil.gray);\n        /* Status tab sub-property */\n        // statusTab = new TreeItem(view, SWT.NONE);\n        // statusTab.setText(\"Status\");\n        // statusTab.setForeground(ColourUtil.gray);\n        /* Transfer tab sub-property */\n        transferTab = new TreeItem(view, SWT.NONE);\n        transferTab.setText(\"Transfer\");\n        /* Query tab sub-property */\n        queryTab = new TreeItem(view, SWT.NONE);\n        queryTab.setText(\"Queries\");\n        /* Services sub-property */\n        services = new TreeItem(tree, SWT.NONE);\n        services.setText(\"Services\");\n        /* Arxiv sub-property */\n        arxiv = new TreeItem(services, SWT.NONE);\n        arxiv.setText(\"ArXiv\");\n        /* DOI sub-property */\n        doi = new TreeItem(services, SWT.NONE);\n        doi.setText(\"DOI\");\n        /* Cite Seer sub-property */\n        // citeSeer = new TreeItem(services, SWT.NONE);\n        // citeSeer.setText(\"Cite Seer\");\n        /* Google Scholar sub-property */\n        googleDesktop = new TreeItem(services, SWT.NONE);\n        googleDesktop.setText(\"Google Desktop Search\");\n        /* Google Scholar sub-property */\n        google = new TreeItem(services, SWT.NONE);\n        google.setText(\"Google Web Search\");\n        /* Google Scholar sub-property */\n        googleScholar = new TreeItem(services, SWT.NONE);\n        googleScholar.setText(\"Google Scholar\");\n        /* Plos Journals sub-property */\n        plosjournals = new TreeItem(services, SWT.NONE);\n        plosjournals.setText(\"Plos Journals\");\n        /* PubMed sub-property */\n        pubmed = new TreeItem(services, SWT.NONE);\n        pubmed.setText(\"PubMed\");\n        /* PubMed Central sub-property */\n        pubmedCentral = new TreeItem(services, SWT.NONE);\n        pubmedCentral.setText(\"PubMed Central\");\n        /* Scirus sub-property */\n        scirus = new TreeItem(services, SWT.NONE);\n        scirus.setText(\"Scirus\");\n        /* Terrier sub-property */\n        terrier = new TreeItem(services, SWT.NONE);\n        terrier.setText(\"Terrier\");\n        /* WOK sub-property */\n        webofknowledge = new TreeItem(services, SWT.NONE);\n        webofknowledge.setText(\"Web Of Knowledge\");\n        /* Yahoo sub-property */\n        yahoo = new TreeItem(services, SWT.NONE);\n        yahoo.setText(\"Yahoo Web Search\");\n        // if (WidgetShop.isset(general))\n        // general.setExpanded(true);\n        if (WidgetUtil.isset(view)) {\n            view.setExpanded(true);\n        }\n        if (WidgetUtil.isset(services)) {\n            services.setExpanded(true);\n        }\n        if (StringUtil.isset(selectionText)) {\n            restoreSelection(selectionText, tree.getItems());\n        }\n    }\n    private void renewPropertyPage(String title) {\n        if (activePropertyPage != null) {\n            activePropertyPage.updatePropertiesChangeManager();\n            activePropertyPage.dispose();\n        }\n        if (labelPrefTitle == null) {\n            labelPrefTitle = new Label(prefTitleHolder, SWT.LEFT);\n            labelPrefTitle.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelPrefTitle.setLayoutData(new GridData(SWT.FILL, SWT.CENTER,\n                    true, false));\n            labelPrefTitle.setFont(FontUtil.dialogBoldFont);\n        }\n        if (labelImgHolder == null) {\n            labelImgHolder = new Label(prefTitleHolder, SWT.NONE);\n            labelImgHolder.setBackground(GUI.display\n                    .getSystemColor(SWT.COLOR_WHITE));\n            labelImgHolder.setImage(PaintUtil.iconBlueStripes);\n            labelImgHolder.setLayoutData(new GridData(SWT.END, SWT.END, false,\n                    false));\n        }\n        labelPrefTitle.setText(title);\n        labelPrefTitle.update();\n        labelImgHolder.update();\n        prefTitleHolder.layout();\n        contentHolder.layout();\n    }\n    private void restoreSelection(String selectionText, TreeItem items[]) {\n        for (TreeItem item : items) {\n            if (selectionText.equals(item.getText())) {\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "length": 1800, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "683bf49a8cf91c2074fdb7f2c850ab08b6ffa7c6c32f736a"}
{"input": "", "context": "/*\n * ATLauncher - https://github.com/ATLauncher/ATLauncher\n * Copyright (C) 2013 ATLauncher\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\npackage com.atlauncher.gui.tabs;\nimport com.atlauncher.App;\nimport com.atlauncher.data.Instance;\nimport com.atlauncher.data.Language;\nimport com.atlauncher.evnt.listener.RelocalizationListener;\nimport com.atlauncher.evnt.manager.RelocalizationManager;\nimport com.atlauncher.gui.card.InstanceCard;\nimport com.atlauncher.gui.card.NilCard;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.util.regex.Pattern;\n/**\n * TODO: Rewrite this for better loading\n */\npublic class InstancesTab extends JPanel implements Tab, RelocalizationListener {\n    private static final long serialVersionUID = -969812552965390610L;\n    private JPanel topPanel;\n    private JButton clearButton;\n    private JTextField searchBox;\n    private JButton searchButton;\n    private JCheckBox hasUpdate;\n    private JLabel hasUpdateLabel;\n    private String searchText = null;\n    private boolean isUpdate = false;\n    private JPanel panel;\n    private JScrollPane scrollPane;\n    private int currentPosition = 0;\n    \n    private NilCard nilCard;\n    public InstancesTab() {\n        setLayout(new BorderLayout());\n        loadContent(false);\n        RelocalizationManager.addListener(this);\n    }\n    public void loadContent(boolean keepFilters) {\n        topPanel = new JPanel();\n        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));\n        clearButton = new JButton(Language.INSTANCE.localize(\"common.clear\"));\n        clearButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                searchBox.setText(\"\");\n                hasUpdate.setSelected(false);\n                reload();\n            }\n        });\n        topPanel.add(clearButton);\n        searchBox = new JTextField(16);\n        if (keepFilters) {\n            searchBox.setText(this.searchText);\n        }\n        searchBox.addKeyListener(new KeyAdapter() {\n            public void keyReleased(KeyEvent e) {\n                if (e.getKeyChar() == KeyEvent.VK_ENTER) {\n                    reload();\n                }\n            }\n        });\n        topPanel.add(searchBox);\n        searchButton = new JButton(Language.INSTANCE.localize(\"common.search\"));\n        searchButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(searchButton);\n        hasUpdate = new JCheckBox();\n        hasUpdate.setSelected(isUpdate);\n        hasUpdate.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                reload();\n            }\n        });\n        topPanel.add(hasUpdate);\n        hasUpdateLabel = new JLabel(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        topPanel.add(hasUpdateLabel);\n        add(topPanel, BorderLayout.NORTH);\n        panel = new JPanel();\n        scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane\n                .HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.getVerticalScrollBar().setUnitIncrement(16);\n        add(scrollPane, BorderLayout.CENTER);\n        panel.setLayout(new GridBagLayout());\n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.gridx = gbc.gridy = 0;\n        gbc.weightx = 1.0;\n        gbc.fill = GridBagConstraints.BOTH;\n        int count = 0;\n        for (Instance instance : App.settings.getInstancesSorted()) {\n            if (instance.canPlay()) {\n                if (keepFilters) {\n                    boolean showInstance = true;\n                    if (searchText != null) {\n                        if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(instance\n                                .getName()).find()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (isUpdate) {\n                        if (!instance.hasUpdate()) {\n                            showInstance = false;\n                        }\n                    }\n                    if (showInstance) {\n                        panel.add(new InstanceCard(instance), gbc);\n                        gbc.gridy++;\n                        count++;\n                    }\n                } else {\n                    panel.add(new InstanceCard(instance), gbc);\n                    gbc.gridy++;\n                    count++;\n                }\n            }\n        }\n        if (count == 0) {\n            nilCard = new NilCard(Language.INSTANCE.localizeWithReplace(\"instance.nodisplay\", \"\\n\\n\"));\n            panel.add(nilCard, gbc);\n        }\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                scrollPane.getVerticalScrollBar().setValue(currentPosition);\n            }\n        });\n    }\n    public void reload() {\n        this.currentPosition = scrollPane.getVerticalScrollBar().getValue();\n        this.searchText = searchBox.getText();\n        this.isUpdate = hasUpdate.isSelected();\n        if (this.searchText.isEmpty()) {\n            this.searchText = null;\n        }\n        removeAll();\n        loadContent(true);\n        validate();\n        repaint();\n        searchBox.requestFocus();\n    }\n    @Override\n    public String getTitle() {\n        return Language.INSTANCE.localize(\"tabs.instances\");\n    }\n    @Override\n    public void onRelocalization() {\n        clearButton.setText(Language.INSTANCE.localize(\"common.clear\"));\n        searchButton.setText(Language.INSTANCE.localize(\"common.search\"));\n        hasUpdateLabel.setText(Language.INSTANCE.localize(\"instance.hasupdate\"));\n        \n", "answers": ["        if (nilCard != null) {"], "length": 511, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "01ae6097833c3bcf2b2bd049d9fd87c92875de1e0f90be36"}
{"input": "", "context": "package name.vbraun.view.write;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.LinkedList;\nimport java.util.UUID;\nimport com.write.Quill.artist.Artist;\nimport junit.framework.Assert;\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Paint.Style;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.net.Uri;\nimport android.util.FloatMath;\nimport android.util.Log;\nimport android.widget.ImageButton;\nimport android.widget.Toast;\npublic class GraphicsImage extends GraphicsControlpoint {\n\tprivate static final String TAG = \"GraphicsImage\";\n\tprivate Controlpoint bottom_left, bottom_right, top_left, top_right,\n\t\t\tcenter;\n\tprivate final Paint paint = new Paint();\n\tprivate final Paint outline = new Paint();\n\tprivate final Rect rect = new Rect();\n\tprivate final RectF rectF = new RectF();\n\tprivate Bitmap bitmap = null;\n\tprivate File file = null;\n\tprivate int height, width;\n\tprivate float sqrtAspect;\n\tpublic enum FileType {\n\t\tFILETYPE_NONE, FILETYPE_PNG, FILETYPE_JPG\n\t}\n\t\n\tpublic static String getImageFileExt(FileType fileType) {\n\t\tif (fileType == FileType.FILETYPE_JPG) {\n\t\t\treturn \".jpg\";\n\t\t} else if (fileType == FileType.FILETYPE_PNG) {\n\t\t\treturn \".png\";\n\t\t} else {\n\t\t\tAssert.fail();\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tpublic static FileType getImageFileType(String fileName) {\n\t\tfor (FileType t : FileType.values()) {\n\t\t\tif (t == FileType.FILETYPE_NONE)\n\t\t\t\tcontinue;\n\t\t\tString ext = getImageFileExt(t);\n\t\t\tif (fileName.endsWith(ext))\n\t\t\t\treturn t;\n\t\t}\n\t\treturn FileType.FILETYPE_NONE;\n\t}\n\t/**\n\t * Helper to construct a file name out of uuid and file type\n\t * @param uuid\n\t * @param fileType\n\t * @return\n\t */\n\tpublic static String getImageFileName(UUID uuid, FileType fileType) {\n\t\treturn uuid.toString() + getImageFileExt(fileType);\n\t}\n\tpublic String getFileName() {\n\t\treturn file.getAbsolutePath();\n\t}\n\t\n\t// persistent data\n\tprotected UUID uuid = null;\n\tprotected boolean constrainAspect = true;\n\tprotected Rect cropRect = new Rect();\n\tpublic UUID getUuid() {\n\t\tif (uuid == null)\n\t\t\tuuid = UUID.randomUUID();\n\t\treturn uuid;\n\t}\n\tpublic Uri getFileUri() {\n\t\tif (file == null)\n\t\t\treturn null;   // no picture selected yet\n\t\telse\n\t\t\treturn Uri.fromFile(file);\n\t}\n\t\n\tpublic File getFile() {\n\t\treturn file;\n\t}\n\tpublic boolean getConstrainAspect() {\n\t\treturn constrainAspect;\n\t}\n\t\n\tpublic FileType getFileType() {\n\t\treturn getImageFileType(file.getName());\n\t}\n\t/**\n\t * Construct a new image\n\t * \n\t * @param transform\n\t *            The current transformation\n\t * @param x\n\t *            Screen x coordinate\n\t * @param y\n\t *            Screen y coordinate\n\t * @param penThickness\n\t * @param penColor\n\t */\n\tprotected GraphicsImage(Transformation transform, float x, float y) {\n\t\tsuper(Tool.IMAGE);\n\t\tsetTransform(transform);\n\t\tbottom_left = new Controlpoint(transform, x, y);\n\t\tbottom_right = new Controlpoint(transform, x, y);\n\t\ttop_left = new Controlpoint(transform, x, y);\n\t\ttop_right = new Controlpoint(transform, x, y);\n\t\tcenter = new Controlpoint(transform, x, y);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t}\n\t\n\t/**\n\t * The copy constructor\n\t * @param image\n\t * @param dir the directory to copy the image file to\n\t */\n\tprotected GraphicsImage(final GraphicsImage image, File dir) {\n\t\tsuper(image);\n\t\tbottom_left = new Controlpoint(image.bottom_left);\n\t\tbottom_right = new Controlpoint(image.bottom_right);\n\t\ttop_left = new Controlpoint(image.top_left);\n\t\ttop_right = new Controlpoint(image.top_right);\n\t\tcenter = new Controlpoint(image.center);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tconstrainAspect = image.constrainAspect;\n\t\tinit();\n\t\tif (image.getFile() == null) \n\t\t\treturn;\n\t\tfinal String fileName = getImageFileName(getUuid(), image.getFileType());\n\t\tfile = new File(dir, fileName);\n\t\tcom.write.Quill.image.Util.copyfile(image.getFile(), file);\n\t}\n\tprivate void init() {\n\t\tpaint.setARGB(0xff, 0x5f, 0xff, 0x5f);\n\t\tpaint.setStyle(Style.FILL);\n\t\tpaint.setStrokeWidth(0);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Paint.Cap.ROUND);\n\t\toutline.setARGB(0xff, 0x0, 0xaa, 0x0);\n\t\toutline.setStyle(Style.STROKE);\n\t\toutline.setStrokeWidth(4);\n\t\toutline.setAntiAlias(true);\n\t\toutline.setStrokeCap(Paint.Cap.ROUND);\n\t}\n\t@Override\n\tprotected Controlpoint initialControlpoint() {\n\t\treturn bottom_right;\n\t}\n\t@Override\n\tpublic boolean intersects(RectF screenRect) {\n\t\treturn false;\n\t}\n\t@Override\n\tpublic void draw(Canvas c, RectF bounding_box) {\n\t\tif (file != null && bitmap == null)\n\t\t\ttry {\n\t\t\t\tloadBitmap();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(TAG, \"loading bitmap: \"+e.getMessage());\n\t\t\t}\n\t\t\n\t\tcomputeScreenRect();\n\t\tc.clipRect(0, 0, c.getWidth(), c.getHeight(), android.graphics.Region.Op.REPLACE);\n\t\tif (bitmap == null) {\n\t\t\tc.drawRect(rect, paint);\n\t\t\tc.drawRect(rect, outline);\n\t\t} else {\n\t\t\tc.drawBitmap(bitmap, null, rect, null);\n\t\t}\n\t}\n\tprivate Controlpoint oppositeControlpoint(Controlpoint point) {\n\t\tif (point == bottom_right)\n\t\t\treturn top_left;\n\t\tif (point == bottom_left)\n\t\t\treturn top_right;\n\t\tif (point == top_right)\n\t\t\treturn bottom_left;\n\t\tif (point == top_left)\n\t\t\treturn bottom_right;\n\t\tif (point == center)\n\t\t\treturn center;\n\t\tAssert.fail(\"Unreachable\");\n\t\treturn null;\n\t}\n\tprivate final static float minDistancePixel = 30;\n\t@Override\n\tvoid controlpointMoved(Controlpoint point) {\n\t\tsuper.controlpointMoved(point);\n\t\tif (point == center) {\n\t\t\tfloat width2 = (bottom_right.x - bottom_left.x) / 2;\n\t\t\tfloat height2 = (top_right.y - bottom_right.y) / 2;\n\t\t\tbottom_right.y = bottom_left.y = center.y - height2;\n\t\t\ttop_right.y = top_left.y = center.y + height2;\n\t\t\tbottom_right.x = top_right.x = center.x + width2;\n\t\t\tbottom_left.x = top_left.x = center.x - width2;\n\t\t} else {\n\t\t\tControlpoint opposite = oppositeControlpoint(point);\n\t\t\tfloat dx = opposite.x - point.x;\n\t\t\tfloat dy = opposite.y - point.y;\n\t\t\tfloat minDistance = minDistancePixel / scale;\n\t\t\tif (-minDistance <= dx && dx <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dx);\n\t\t\t\topposite.x = point.x + sgn * minDistance;\n\t\t\t\tdx = sgn * minDistance;\n\t\t\t}\n\t\t\tif (-minDistance <= dy && dy <= minDistance) {\n\t\t\t\tfloat sgn = Math.signum(dy);\n\t\t\t\topposite.y = point.y + sgn * minDistance;\n\t\t\t\tdy = sgn *minDistance;\n\t\t\t}\n\t\t\tif (constrainAspect && bitmap != null) {\n\t\t\t\tfloat r = (Math.abs(dx)+Math.abs(dy))/2;\n\t\t\t\tdx = r * sqrtAspect * Math.signum(dx);\n\t\t\t\tdy = r / sqrtAspect * Math.signum(dy);\n\t\t\t\t// Log.d(TAG, \"move \"+dx + \" \"+dy + \" \" + r + \" \"+(sqrtAspect*sqrtAspect));\n\t\t\t}\n\t\t\trectF.bottom = opposite.y;\n\t\t\trectF.top = opposite.y - dy;\n\t\t\trectF.left = opposite.x;\n\t\t\trectF.right = opposite.x - dx;\n\t\t\trectF.sort();\n\t\t\tbottom_right.y = bottom_left.y = rectF.bottom;\n\t\t\ttop_right.y = top_left.y = rectF.top;\n\t\t\tbottom_right.x = top_right.x = rectF.right;\n\t\t\tbottom_left.x = top_left.x = rectF.left;\n\t\t\tcenter.x = rectF.left + (rectF.right - rectF.left) / 2;\n\t\t\tcenter.y = rectF.bottom + (rectF.top - rectF.bottom) / 2;\n\t\t}\n\t}\n\tprivate void computeScreenRect() {\n\t\trectF.bottom = bottom_left.screenY();\n\t\trectF.top = top_left.screenY();\n\t\trectF.left = bottom_left.screenX();\n\t\trectF.right = bottom_right.screenX();\n\t\trectF.sort();\n\t\trectF.round(rect);\n\t}\n\tpublic void writeToStream(DataOutputStream out) throws IOException {\n\t\tout.writeInt(1);  // protocol #1\n\t\tout.writeUTF(uuid.toString());\n\t\tout.writeFloat(top_left.x);\n\t\tout.writeFloat(top_right.x);\n\t\tout.writeFloat(top_left.y);\n\t\tout.writeFloat(bottom_left.y);\n\t\tout.writeBoolean(constrainAspect);\n\t}\n\tpublic GraphicsImage(DataInputStream in, File dir) throws IOException {\n\t\tsuper(Tool.IMAGE);\n\t\tint version = in.readInt();\n\t\tif (version > 1)\n\t\t\tthrow new IOException(\"Unknown image version!\");\n\t\tuuid = UUID.fromString(in.readUTF());\n\t\tfloat left   = in.readFloat(); \n\t\tfloat right  = in.readFloat();\n\t\tfloat top    = in.readFloat();\n\t\tfloat bottom = in.readFloat();  \t\t\n\t\tconstrainAspect = in.readBoolean();\n\t\t\n\t\tbottom_left = new Controlpoint(transform, left, bottom);\n\t\tbottom_right = new Controlpoint(transform, right, bottom);\n\t\ttop_left = new Controlpoint(transform, left, top);\n\t\ttop_right = new Controlpoint(transform, right, top);\n\t\tcenter = new Controlpoint(transform, (left+right)/2, (top+bottom)/2);\n\t\tcontrolpoints.add(bottom_left);\n\t\tcontrolpoints.add(bottom_right);\n\t\tcontrolpoints.add(top_left);\n\t\tcontrolpoints.add(top_right);\n\t\tcontrolpoints.add(center);\n\t\tinit();\n\t\tfile = new File(dir, getImageFileName(uuid, FileType.FILETYPE_JPG));\n\t}\n\t@Override\n\tpublic void render(Artist artist) {\n\t\tartist.imageJpeg(file, top_left.x, top_right.x, top_left.y, bottom_left.y);\n\t}\n\tpublic boolean checkFileName(String fileName) {\n\t\tFileType fileType = getImageFileType(fileName);\n\t\treturn fileName.endsWith(getImageFileName(uuid, fileType));\n\t}\n\t\n\tpublic void setFile(String fileName, boolean constrainAspect) {\n\t\t// file = new File(\"/mnt/sdcard/d5efe912-4b03-4ed7-a124-bff4984691d6.jpg\");\n\t\tif (!checkFileName(fileName)) {\n\t\t\tLog.e(TAG, \"filename must be uuid.ext\");\n\t\t}\n\t\tfile = new File(fileName);\n\t\ttry {\n\t\t\tloadBitmap();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(TAG, \"Unable to load file \" + file.toString() + \" (missing?\");\n\t\t}\n\t\tthis.constrainAspect = constrainAspect;\n\t\tif (constrainAspect) {\n\t\t\tfloat w = top_right.x - top_left.x;\n\t\t\tfloat h = bottom_right.y - top_right.y;\n", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "length": 1042, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "aa71378f81d8fee260faf0e1cf25590c02b8a2f4ff5ded68"}
{"input": "", "context": "import gtk\nimport gobject\nimport pygame\nimport pygame.event \nclass _MockEvent(object):\n    def __init__(self, keyval):\n        self.keyval = keyval\nclass Translator(object):\n    key_trans = {\n        'Alt_L': pygame.K_LALT,\n        'Alt_R': pygame.K_RALT,\n        'Control_L': pygame.K_LCTRL,\n        'Control_R': pygame.K_RCTRL,\n        'Shift_L': pygame.K_LSHIFT,\n        'Shift_R': pygame.K_RSHIFT,\n        'Super_L': pygame.K_LSUPER,\n        'Super_R': pygame.K_RSUPER,\n        'KP_Page_Up' : pygame.K_KP9, \n        'KP_Page_Down' : pygame.K_KP3,\n        'KP_End' : pygame.K_KP1, \n        'KP_Home' : pygame.K_KP7,\n        'KP_Up' : pygame.K_KP8,\n        'KP_Down' : pygame.K_KP2,\n        'KP_Left' : pygame.K_KP4,\n        'KP_Right' : pygame.K_KP6,\n        'numbersign' : pygame.K_HASH,\n        'percent' : ord('%'),\n        'exclam' : pygame.K_EXCLAIM,\n\t'asciicircum' : pygame.K_CARET,\n        'parenleft' : pygame.K_LEFTPAREN,\n        'parenright' : pygame.K_RIGHTPAREN,\n        'braceleft' : ord('{'),\n        'braceright' : ord('}'),\n        'bracketleft' : pygame.K_LEFTBRACKET,\n        'bracketright' : pygame.K_RIGHTBRACKET,\n        'apostrophe' : ord('\\''),\n        'equal' : pygame.K_EQUALS,\n        'grave' : pygame.K_BACKQUOTE,\n        'Caps_Lock' : pygame.K_CAPSLOCK,\n        'Page_Up' : pygame.K_PAGEUP,\n        'Page_Down' : pygame.K_PAGEDOWN,\n        'Num_Lock' : pygame.K_NUMLOCK,\n        'Bar' : ord('|')\n    }\n    \n    mod_map = {\n        pygame.K_LALT: pygame.KMOD_LALT,\n        pygame.K_RALT: pygame.KMOD_RALT,\n        pygame.K_LCTRL: pygame.KMOD_LCTRL,\n        pygame.K_RCTRL: pygame.KMOD_RCTRL,\n        pygame.K_LSHIFT: pygame.KMOD_LSHIFT,\n        pygame.K_RSHIFT: pygame.KMOD_RSHIFT,\n    }\n    \n    def __init__(self, mainwindow, inner_evb):\n        \"\"\"Initialise the Translator with the windows to which to listen\"\"\"\n        self._mainwindow = mainwindow\n        self._inner_evb = inner_evb\n        # Enable events\n        # (add instead of set here because the main window is already realized)\n        self._mainwindow.add_events(\n            gtk.gdk.KEY_PRESS_MASK | \\\n            gtk.gdk.KEY_RELEASE_MASK | \\\n            gtk.gdk.VISIBILITY_NOTIFY_MASK\n        )\n        \n        self._inner_evb.set_events(\n            gtk.gdk.POINTER_MOTION_MASK | \\\n            gtk.gdk.POINTER_MOTION_HINT_MASK | \\\n            gtk.gdk.BUTTON_MOTION_MASK | \\\n            gtk.gdk.BUTTON_PRESS_MASK | \\\n            gtk.gdk.BUTTON_RELEASE_MASK\n        )\n        self._mainwindow.set_flags(gtk.CAN_FOCUS)\n        self._inner_evb.set_flags(gtk.CAN_FOCUS)\n        \n        # Callback functions to link the event systems\n        self._mainwindow.connect('unrealize', self._quit_cb)\n        self._mainwindow.connect('visibility_notify_event', self._visibility)\n        self._inner_evb.connect('key_press_event', self._keydown_cb)\n        self._inner_evb.connect('key_release_event', self._keyup_cb)\n        self._inner_evb.connect('button_press_event', self._mousedown_cb)\n        self._inner_evb.connect('button_release_event', self._mouseup_cb)\n        self._inner_evb.connect('motion-notify-event', self._mousemove_cb)\n        self._inner_evb.connect('expose-event', self._expose_cb)\n        self._inner_evb.connect('configure-event', self._resize_cb)\n        self._inner_evb.connect('screen-changed', self._screen_changed_cb)\n        \n        # Internal data\n        self.__stopped = False\n        self.__keystate = [0] * 323\n        self.__button_state = [0,0,0]\n        self.__mouse_pos = (0,0)\n        self.__repeat = (None, None)\n        self.__held = set()\n        self.__held_time_left = {}\n        self.__held_last_time = {}\n        self.__held_last_value = {}\n        self.__tick_id = None\n    def hook_pygame(self):\n        pygame.key.get_pressed = self._get_pressed\n        pygame.key.set_repeat = self._set_repeat\n        pygame.mouse.get_pressed = self._get_mouse_pressed\n        pygame.mouse.get_pos = self._get_mouse_pos\n        \n    def _visibility(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return False\n        \n    def _expose_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n        return True\n    def _resize_cb(self, widget, event):\n        evt = pygame.event.Event(pygame.VIDEORESIZE, \n                                 size=(event.width,event.height), width=event.width, height=event.height)\n        pygame.event.post(evt)\n        return False # continue processing\n        \n    def _screen_changed_cb(self, widget, event):\n        if pygame.display.get_init():\n            pygame.event.post(pygame.event.Event(pygame.VIDEOEXPOSE))\n    def _quit_cb(self, data=None):\n        self.__stopped = True\n        pygame.event.post(pygame.event.Event(pygame.QUIT))\n    def _keydown_cb(self, widget, event):\n        key = event.hardware_keycode\n        keyval = event.keyval\n        if key in self.__held:\n            return True\n        else:\n            if self.__repeat[0] is not None:\n                self.__held_last_time[key] = pygame.time.get_ticks()\n                self.__held_time_left[key] = self.__repeat[0]\n                self.__held_last_value[key] = keyval\n            self.__held.add(key)\n        return self._keyevent(widget, event, pygame.KEYDOWN)\n        \n    def _keyup_cb(self, widget, event):\n        key = event.hardware_keycode\n        if self.__repeat[0] is not None:\n            if key in self.__held:\n                # This is possibly false if set_repeat() is called with a key held\n                del self.__held_time_left[key]\n                del self.__held_last_time[key]\n                del self.__held_last_value[key]\n        self.__held.discard(key)\n        return self._keyevent(widget, event, pygame.KEYUP)\n        \n    def _keymods(self):\n        mod = 0\n        for key_val, mod_val in self.mod_map.iteritems():\n            mod |= self.__keystate[key_val] and mod_val\n        return mod\n        \n    def _keyevent(self, widget, event, type):\n        key = gtk.gdk.keyval_name(event.keyval)\n        if key is None:\n            # No idea what this key is.\n            return False \n        \n        keycode = None\n        if key in self.key_trans:\n            keycode = self.key_trans[key]\n        elif hasattr(pygame, 'K_'+key.upper()):\n            keycode = getattr(pygame, 'K_'+key.upper())\n        elif hasattr(pygame, 'K_'+key.lower()):\n            keycode = getattr(pygame, 'K_'+key.lower())\n        elif key == 'XF86Start':\n            # view source request, specially handled...\n            self._mainwindow.view_source()\n        else:\n            print 'Key %s unrecognized' % key\n            \n        if keycode is not None:\n            if type == pygame.KEYDOWN:\n                mod = self._keymods()\n            self.__keystate[keycode] = type == pygame.KEYDOWN\n            if type == pygame.KEYUP:\n                mod = self._keymods()\n            ukey = unichr(gtk.gdk.keyval_to_unicode(event.keyval))\n            if ukey == '\\000':\n                ukey = ''\n            evt = pygame.event.Event(type, key=keycode, unicode=ukey, mod=mod)\n            self._post(evt)\n            \n        return True\n    def _get_pressed(self):\n        return self.__keystate\n    def _get_mouse_pressed(self):\n        return self.__button_state\n    def _mousedown_cb(self, widget, event):\n        self.__button_state[event.button-1] = 1\n        widget.grab_focus()\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONDOWN)\n    def _mouseup_cb(self, widget, event):\n        self.__button_state[event.button-1] = 0\n        return self._mouseevent(widget, event, pygame.MOUSEBUTTONUP)\n        \n    def _mouseevent(self, widget, event, type):\n        evt = pygame.event.Event(type, button=event.button, pos=(event.x, event.y))\n        self._post(evt)\n        return True\n        \n    def _mousemove_cb(self, widget, event):\n        # From http://www.learningpython.com/2006/07/25/writing-a-custom-widget-using-pygtk/\n        # if this is a hint, then let's get all the necessary \n        # information, if not it's all we need.\n        if event.is_hint:\n            x, y, state = event.window.get_pointer()\n        else:\n            x = event.x\n            y = event.y\n            state = event.state\n        rel = (x - self.__mouse_pos[0], y - self.__mouse_pos[1])\n        self.__mouse_pos = (x, y)\n        \n        self.__button_state = [\n            state & gtk.gdk.BUTTON1_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON2_MASK and 1 or 0,\n            state & gtk.gdk.BUTTON3_MASK and 1 or 0,\n        ]\n        \n        evt = pygame.event.Event(pygame.MOUSEMOTION,\n                                 pos=self.__mouse_pos, rel=rel, buttons=self.__button_state)\n        self._post(evt)\n        return True\n        \n    def _tick_cb(self):\n        cur_time = pygame.time.get_ticks()\n        for key in self.__held:\n            delta = cur_time - self.__held_last_time[key] \n            self.__held_last_time[key] = cur_time\n            \n            self.__held_time_left[key] -= delta\n            if self.__held_time_left[key] <= 0:\n                self.__held_time_left[key] = self.__repeat[1]\n                self._keyevent(None, _MockEvent(self.__held_last_value[key]), pygame.KEYDOWN)\n                \n        return True\n        \n    def _set_repeat(self, delay=None, interval=None):\n        if delay is not None and self.__repeat[0] is None:\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "length": 703, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "8470084fed939b4e4fcf2f79678790b3986d9ec82bc29985"}
{"input": "", "context": "import json\nimport os\nimport sys\nfrom datetime import datetime, timedelta\nimport wptserve\nfrom wptserve import sslutils\nfrom . import environment as env\nfrom . import instruments\nfrom . import mpcontext\nfrom . import products\nfrom . import testloader\nfrom . import wptcommandline\nfrom . import wptlogging\nfrom . import wpttest\nfrom mozlog import capture, handlers\nfrom .font import FontInstaller\nfrom .testrunner import ManagerGroup\nhere = os.path.dirname(__file__)\nlogger = None\n\"\"\"Runner for web-platform-tests\nThe runner has several design goals:\n* Tests should run with no modification from upstream.\n* Tests should be regarded as \"untrusted\" so that errors, timeouts and even\n  crashes in the tests can be handled without failing the entire test run.\n* For performance tests can be run in multiple browsers in parallel.\nThe upstream repository has the facility for creating a test manifest in JSON\nformat. This manifest is used directly to determine which tests exist. Local\nmetadata files are used to store the expected test results.\n\"\"\"\ndef setup_logging(*args, **kwargs):\n    global logger\n    logger = wptlogging.setup(*args, **kwargs)\n    return logger\ndef get_loader(test_paths, product, debug=None, run_info_extras=None, chunker_kwargs=None,\n               test_groups=None, **kwargs):\n    if run_info_extras is None:\n        run_info_extras = {}\n    run_info = wpttest.get_run_info(kwargs[\"run_info\"], product,\n                                    browser_version=kwargs.get(\"browser_version\"),\n                                    browser_channel=kwargs.get(\"browser_channel\"),\n                                    verify=kwargs.get(\"verify\"),\n                                    debug=debug,\n                                    extras=run_info_extras,\n                                    enable_webrender=kwargs.get(\"enable_webrender\"))\n    test_manifests = testloader.ManifestLoader(test_paths, force_manifest_update=kwargs[\"manifest_update\"],\n                                               manifest_download=kwargs[\"manifest_download\"]).load()\n    manifest_filters = []\n    include = kwargs[\"include\"]\n    if kwargs[\"include_file\"]:\n        include = include or []\n        include.extend(testloader.read_include_from_file(kwargs[\"include_file\"]))\n    if test_groups:\n        include = testloader.update_include_for_groups(test_groups, include)\n    if include or kwargs[\"exclude\"] or kwargs[\"include_manifest\"] or kwargs[\"default_exclude\"]:\n        manifest_filters.append(testloader.TestFilter(include=include,\n                                                      exclude=kwargs[\"exclude\"],\n                                                      manifest_path=kwargs[\"include_manifest\"],\n                                                      test_manifests=test_manifests,\n                                                      explicit=kwargs[\"default_exclude\"]))\n    ssl_enabled = sslutils.get_cls(kwargs[\"ssl_type\"]).ssl_enabled\n    h2_enabled = wptserve.utils.http2_compatible()\n    test_loader = testloader.TestLoader(test_manifests,\n                                        kwargs[\"test_types\"],\n                                        run_info,\n                                        manifest_filters=manifest_filters,\n                                        chunk_type=kwargs[\"chunk_type\"],\n                                        total_chunks=kwargs[\"total_chunks\"],\n                                        chunk_number=kwargs[\"this_chunk\"],\n                                        include_https=ssl_enabled,\n                                        include_h2=h2_enabled,\n                                        include_webtransport_h3=kwargs[\"enable_webtransport_h3\"],\n                                        skip_timeout=kwargs[\"skip_timeout\"],\n                                        skip_implementation_status=kwargs[\"skip_implementation_status\"],\n                                        chunker_kwargs=chunker_kwargs)\n    return run_info, test_loader\ndef list_test_groups(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for item in sorted(test_loader.groups(kwargs[\"test_types\"])):\n        print(item)\ndef list_disabled(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    rv = []\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test_type, tests in test_loader.disabled_tests.items():\n        for test in tests:\n            rv.append({\"test\": test.id, \"reason\": test.disabled()})\n    print(json.dumps(rv, indent=2))\ndef list_tests(test_paths, product, **kwargs):\n    env.do_delayed_imports(logger, test_paths)\n    run_info_extras = products.Product(kwargs[\"config\"], product).run_info_extras(**kwargs)\n    run_info, test_loader = get_loader(test_paths, product,\n                                       run_info_extras=run_info_extras, **kwargs)\n    for test in test_loader.test_ids:\n        print(test)\ndef get_pause_after_test(test_loader, **kwargs):\n    if kwargs[\"pause_after_test\"] is None:\n        if kwargs[\"repeat_until_unexpected\"]:\n            return False\n        if kwargs[\"headless\"]:\n            return False\n        if kwargs[\"debug_test\"]:\n            return True\n        tests = test_loader.tests\n        is_single_testharness = (sum(len(item) for item in tests.values()) == 1 and\n                                 len(tests.get(\"testharness\", [])) == 1)\n        if kwargs[\"repeat\"] == 1 and kwargs[\"rerun\"] == 1 and is_single_testharness:\n            return True\n        return False\n    return kwargs[\"pause_after_test\"]\ndef run_test_iteration(test_status, test_loader, test_source_kwargs, test_source_cls, run_info,\n                       recording, test_environment, product, run_test_kwargs):\n    \"\"\"Runs the entire test suite.\n    This is called for each repeat run requested.\"\"\"\n    tests = []\n    for test_type in test_loader.test_types:\n        tests.extend(test_loader.tests[test_type])\n    try:\n        test_groups = test_source_cls.tests_by_group(\n            tests, **test_source_kwargs)\n    except Exception:\n        logger.critical(\"Loading tests failed\")\n        return False\n    logger.suite_start(test_groups,\n                       name='web-platform-test',\n                       run_info=run_info,\n                       extra={\"run_by_dir\": run_test_kwargs[\"run_by_dir\"]})\n    for test_type in run_test_kwargs[\"test_types\"]:\n        logger.info(f\"Running {test_type} tests\")\n        browser_cls = product.get_browser_cls(test_type)\n        browser_kwargs = product.get_browser_kwargs(logger,\n                                                    test_type,\n                                                    run_info,\n                                                    config=test_environment.config,\n                                                    num_test_groups=len(test_groups),\n                                                    **run_test_kwargs)\n        executor_cls = product.executor_classes.get(test_type)\n        executor_kwargs = product.get_executor_kwargs(logger,\n                                                      test_type,\n                                                      test_environment,\n                                                      run_info,\n                                                      **run_test_kwargs)\n        if executor_cls is None:\n            logger.error(f\"Unsupported test type {test_type} for product {product.name}\")\n            continue\n        for test in test_loader.disabled_tests[test_type]:\n            logger.test_start(test.id)\n            logger.test_end(test.id, status=\"SKIP\")\n            test_status.skipped += 1\n        if test_type == \"testharness\":\n            run_tests = {\"testharness\": []}\n            for test in test_loader.tests[\"testharness\"]:\n                if ((test.testdriver and not executor_cls.supports_testdriver) or\n                        (test.jsshell and not executor_cls.supports_jsshell)):\n                    logger.test_start(test.id)\n                    logger.test_end(test.id, status=\"SKIP\")\n                    test_status.skipped += 1\n                else:\n                    run_tests[\"testharness\"].append(test)\n        else:\n            run_tests = test_loader.tests\n        recording.pause()\n        with ManagerGroup(\"web-platform-tests\",\n                          run_test_kwargs[\"processes\"],\n                          test_source_cls,\n                          test_source_kwargs,\n                          browser_cls,\n                          browser_kwargs,\n                          executor_cls,\n                          executor_kwargs,\n                          run_test_kwargs[\"rerun\"],\n                          run_test_kwargs[\"pause_after_test\"],\n                          run_test_kwargs[\"pause_on_unexpected\"],\n                          run_test_kwargs[\"restart_on_unexpected\"],\n                          run_test_kwargs[\"debug_info\"],\n                          not run_test_kwargs[\"no_capture_stdio\"],\n                          recording=recording) as manager_group:\n            try:\n                manager_group.run(test_type, run_tests)\n            except KeyboardInterrupt:\n                logger.critical(\"Main thread got signal\")\n                manager_group.stop()\n                raise\n            test_status.total_tests += manager_group.test_count()\n            test_status.unexpected += manager_group.unexpected_count()\n            test_status.unexpected_pass += manager_group.unexpected_pass_count()\n    return True\ndef evaluate_runs(test_status, run_test_kwargs):\n    \"\"\"Evaluates the test counts after the given number of repeat runs has finished\"\"\"\n    if test_status.total_tests == 0:\n        if test_status.skipped > 0:\n            logger.warning(\"All requested tests were skipped\")\n        else:\n            if run_test_kwargs[\"default_exclude\"]:\n                logger.info(\"No tests ran\")\n                return True\n            else:\n                logger.critical(\"No tests ran\")\n                return False\n    if test_status.unexpected and not run_test_kwargs[\"fail_on_unexpected\"]:\n        logger.info(f\"Tolerating {test_status.unexpected} unexpected results\")\n        return True\n    all_unexpected_passed = (test_status.unexpected and\n                             test_status.unexpected == test_status.unexpected_pass)\n    if all_unexpected_passed and not run_test_kwargs[\"fail_on_unexpected_pass\"]:\n        logger.info(f\"Tolerating {test_status.unexpected_pass} unexpected results \"\n                    \"because they all PASS\")\n        return True\n    return test_status.unexpected == 0\nclass TestStatus:\n    \"\"\"Class that stores information on the results of test runs for later reference\"\"\"\n    def __init__(self):\n        self.total_tests = 0\n        self.skipped = 0\n        self.unexpected = 0\n        self.unexpected_pass = 0\n        self.repeated_runs = 0\n        self.expected_repeated_runs = 0\n        self.all_skipped = False\ndef run_tests(config, test_paths, product, **kwargs):\n    \"\"\"Set up the test environment, load the list of tests to be executed, and\n    invoke the remainder of the code to execute tests\"\"\"\n    mp = mpcontext.get_context()\n    if kwargs[\"instrument_to_file\"] is None:\n        recorder = instruments.NullInstrument()\n    else:\n        recorder = instruments.Instrument(kwargs[\"instrument_to_file\"])\n    with recorder as recording, capture.CaptureIO(logger,\n                                                  not kwargs[\"no_capture_stdio\"],\n                                                  mp_context=mp):\n        recording.set([\"startup\"])\n        env.do_delayed_imports(logger, test_paths)\n        product = products.Product(config, product)\n        env_extras = product.get_env_extras(**kwargs)\n        product.check_args(**kwargs)\n        if kwargs[\"install_fonts\"]:\n            env_extras.append(FontInstaller(\n                logger,\n                font_dir=kwargs[\"font_dir\"],\n                ahem=os.path.join(test_paths[\"/\"][\"tests_path\"], \"fonts/Ahem.ttf\")\n            ))\n        recording.set([\"startup\", \"load_tests\"])\n        test_groups = (testloader.TestGroupsFile(logger, kwargs[\"test_groups_file\"])\n                       if kwargs[\"test_groups_file\"] else None)\n        (test_source_cls,\n         test_source_kwargs,\n         chunker_kwargs) = testloader.get_test_src(logger=logger,\n                                                   test_groups=test_groups,\n                                                   **kwargs)\n        run_info, test_loader = get_loader(test_paths,\n                                           product.name,\n                                           run_info_extras=product.run_info_extras(**kwargs),\n                                           chunker_kwargs=chunker_kwargs,\n                                           test_groups=test_groups,\n                                           **kwargs)\n        logger.info(\"Using %i client processes\" % kwargs[\"processes\"])\n        test_status = TestStatus()\n        repeat = kwargs[\"repeat\"]\n        test_status.expected_repeat = repeat\n        if len(test_loader.test_ids) == 0 and kwargs[\"test_list\"]:\n            logger.critical(\"Unable to find any tests at the path(s):\")\n            for path in kwargs[\"test_list\"]:\n                logger.critical(\"  %s\" % path)\n            logger.critical(\"Please check spelling and make sure there are tests in the specified path(s).\")\n            return False, test_status\n        kwargs[\"pause_after_test\"] = get_pause_after_test(test_loader, **kwargs)\n        ssl_config = {\"type\": kwargs[\"ssl_type\"],\n                      \"openssl\": {\"openssl_binary\": kwargs[\"openssl_binary\"]},\n                      \"pregenerated\": {\"host_key_path\": kwargs[\"host_key_path\"],\n                                       \"host_cert_path\": kwargs[\"host_cert_path\"],\n                                       \"ca_cert_path\": kwargs[\"ca_cert_path\"]}}\n        testharness_timeout_multipler = product.get_timeout_multiplier(\"testharness\",\n                                                                       run_info,\n                                                                       **kwargs)\n        mojojs_path = kwargs[\"mojojs_path\"] if kwargs[\"enable_mojojs\"] else None\n        recording.set([\"startup\", \"start_environment\"])\n        with env.TestEnvironment(test_paths,\n                                 testharness_timeout_multipler,\n                                 kwargs[\"pause_after_test\"],\n                                 kwargs[\"debug_test\"],\n                                 kwargs[\"debug_info\"],\n                                 product.env_options,\n                                 ssl_config,\n                                 env_extras,\n                                 kwargs[\"enable_webtransport_h3\"],\n                                 mojojs_path) as test_environment:\n            recording.set([\"startup\", \"ensure_environment\"])\n            try:\n                test_environment.ensure_started()\n                start_time = datetime.now()\n            except env.TestEnvironmentError as e:\n                logger.critical(\"Error starting test environment: %s\" % e)\n                raise\n            recording.set([\"startup\"])\n            max_time = None\n            if \"repeat_max_time\" in kwargs:\n                max_time = timedelta(minutes=kwargs[\"repeat_max_time\"])\n            repeat_until_unexpected = kwargs[\"repeat_until_unexpected\"]\n            # keep track of longest time taken to complete a test suite iteration\n            # so that the runs can be stopped to avoid a possible TC timeout.\n            longest_iteration_time = timedelta()\n            while test_status.repeated_runs < repeat or repeat_until_unexpected:\n                # if the next repeat run could cause the TC timeout to be reached,\n                # stop now and use the test results we have.\n                # Pad the total time by 10% to ensure ample time for the next iteration(s).\n                estimate = (datetime.now() +\n                            timedelta(seconds=(longest_iteration_time.total_seconds() * 1.1)))\n                if not repeat_until_unexpected and max_time and estimate >= start_time + max_time:\n                    logger.info(f\"Ran {test_status.repeated_runs} of {repeat} iterations.\")\n                    break\n                # begin tracking runtime of the test suite\n                iteration_start = datetime.now()\n                test_status.repeated_runs += 1\n                if repeat_until_unexpected:\n                    logger.info(f\"Repetition {test_status.repeated_runs}\")\n                elif repeat > 1:\n                    logger.info(f\"Repetition {test_status.repeated_runs} / {repeat}\")\n                iter_success = run_test_iteration(test_status, test_loader, test_source_kwargs,\n                                                  test_source_cls, run_info, recording,\n                                                  test_environment, product, kwargs)\n                # if there were issues with the suite run(tests not loaded, etc.) return\n                if not iter_success:\n                    return False, test_status\n                recording.set([\"after-end\"])\n                logger.info(f\"Got {test_status.unexpected} unexpected results, \"\n                    f\"with {test_status.unexpected_pass} unexpected passes\")\n                logger.suite_end()\n                # Note this iteration's runtime\n                iteration_runtime = datetime.now() - iteration_start\n                # determine the longest test suite runtime seen.\n                longest_iteration_time = max(longest_iteration_time,\n                                             iteration_runtime)\n                if repeat_until_unexpected and test_status.unexpected > 0:\n                    break\n                if test_status.repeated_runs == 1 and len(test_loader.test_ids) == test_status.skipped:\n                    test_status.all_skipped = True\n                    break\n    # Return the evaluation of the runs and the number of repeated iterations that were run.\n    return evaluate_runs(test_status, kwargs), test_status\ndef check_stability(**kwargs):\n    from . import stability\n    if kwargs[\"stability\"]:\n        logger.warning(\"--stability is deprecated; please use --verify instead!\")\n        kwargs['verify_max_time'] = None\n        kwargs['verify_chaos_mode'] = False\n        kwargs['verify_repeat_loop'] = 0\n        kwargs['verify_repeat_restart'] = 10 if kwargs['repeat'] == 1 else kwargs['repeat']\n        kwargs['verify_output_results'] = True\n    return stability.check_stability(logger,\n                                     max_time=kwargs['verify_max_time'],\n                                     chaos_mode=kwargs['verify_chaos_mode'],\n                                     repeat_loop=kwargs['verify_repeat_loop'],\n                                     repeat_restart=kwargs['verify_repeat_restart'],\n                                     output_results=kwargs['verify_output_results'],\n                                     **kwargs)\ndef start(**kwargs):\n    assert logger is not None\n    logged_critical = wptlogging.LoggedAboveLevelHandler(\"CRITICAL\")\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "length": 1196, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "2477e626c89426f565807bbc5e35a472279f3e388787ac17"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n\"\"\"\nThis module contains a POI Manager core class which gives capability to mark\npoints of interest, re-optimise their position, and keep track of sample drift\nover time.\nQudi is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nQudi is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with Qudi. If not, see <http://www.gnu.org/licenses/>.\nCopyright (c) the Qudi Developers. See the COPYRIGHT.txt file at the\ntop-level directory of this distribution and at <https://github.com/Ulm-IQO/qudi/>\n\"\"\"\nfrom qtpy import QtCore\nimport ctypes   # is a foreign function library for Python. It provides C\n                # compatible data types, and allows calling functions in DLLs\n                # or shared libraries. It can be used to wrap these libraries\n                # in pure Python.\nfrom interface.wavemeter_interface import WavemeterInterface\nfrom core.base import Base\nfrom core.util.mutex import Mutex\nclass HardwarePull(QtCore.QObject):\n    \"\"\" Helper class for running the hardware communication in a separate thread. \"\"\"\n    # signal to deliver the wavelength to the parent class\n    sig_wavelength = QtCore.Signal(float, float)\n    def __init__(self, parentclass):\n        super().__init__()\n        # remember the reference to the parent class to access functions ad settings\n        self._parentclass = parentclass\n    def handle_timer(self, state_change):\n        \"\"\" Threaded method that can be called by a signal from outside to start the timer.\n        @param bool state: (True) starts timer, (False) stops it.\n        \"\"\"\n        if state_change:\n            self.timer = QtCore.QTimer()\n            self.timer.timeout.connect(self._measure_thread)\n            self.timer.start(self._parentclass._measurement_timing)\n        else:\n            if hasattr(self, 'timer'):\n                self.timer.stop()\n    def _measure_thread(self):\n        \"\"\" The threaded method querying the data from the wavemeter.\n        \"\"\"\n        # update as long as the state is busy\n        if self._parentclass.getState() == 'running':\n            # get the current wavelength from the wavemeter\n            temp1=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            temp2=float(self._parentclass._wavemeterdll.GetWavelength(0))\n            # send the data to the parent via a signal\n            self.sig_wavelength.emit(temp1, temp2)\nclass HighFinesseWavemeter(Base,WavemeterInterface):\n    _modclass = 'HighFinesseWavemeter'\n    _modtype = 'hardware'\n    ## declare connectors\n    _out = {'highfinessewavemeter': 'WavemeterInterface'}\n    sig_handle_timer = QtCore.Signal(bool)\n    #############################################\n    # Flags for the external DLL\n    #############################################\n    # define constants as flags for the wavemeter\n    _cCtrlStop                   = ctypes.c_uint16(0x00)\n    # this following flag is modified to override every existing file\n    _cCtrlStartMeasurment        = ctypes.c_uint16(0x1002)\n    _cReturnWavelangthAir        = ctypes.c_long(0x0001)\n    _cReturnWavelangthVac        = ctypes.c_long(0x0000)\n    def __init__(self, config, **kwargs):\n        super().__init__(config=config, **kwargs)\n        #locking for thread safety\n        self.threadlock = Mutex()\n        # the current wavelength read by the wavemeter in nm (vac)\n        self._current_wavelength=0.0\n        self._current_wavelength2=0.0\n        # time between two measurement points of the wavemeter in milliseconds\n        if 'measurement_timing' in config.keys():\n            self._measurement_timing=config['measurement_timing']\n        else:\n            self._measurement_timing = 10.\n            self.log.warning('No measurement_timing configured, '\\\n                        'using {} instead.'.format(self._measurement_timing))\n    def on_activate(self, e):\n        #############################################\n        # Initialisation to access external DLL\n        #############################################\n        try:\n            # imports the spectrometer specific function from dll\n            self._wavemeterdll = ctypes.windll.LoadLibrary('wlmData.dll')\n        except:\n            self.log.critical('There is no Wavemeter installed on this '\n                    'Computer.\\nPlease install a High Finesse Wavemeter and '\n                    'try again.')\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength2 = self._wavemeterdll.GetWavelength2\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength2.argtypes = [ctypes.c_double]\n        # define the use of the GetWavelength function of the wavemeter\n#        self._GetWavelength = self._wavemeterdll.GetWavelength\n        # return data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.restype = ctypes.c_double\n        # parameter data type of the GetWavelength function of the wavemeter\n        self._wavemeterdll.GetWavelength.argtypes = [ctypes.c_double]\n        # define the use of the ConvertUnit function of the wavemeter\n#        self._ConvertUnit = self._wavemeterdll.ConvertUnit\n        # return data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.restype = ctypes.c_double\n        # parameter data type of the ConvertUnit function of the wavemeter\n        self._wavemeterdll.ConvertUnit.argtypes = [ctypes.c_double, ctypes.c_long, ctypes.c_long]\n        # manipulate perdefined operations with simple flags\n#        self._Operation = self._wavemeterdll.Operation\n        # return data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.restype = ctypes.c_long\n        # parameter data type of the Operation function of the wavemeter\n        self._wavemeterdll.Operation.argtypes = [ctypes.c_ushort]\n        # create an indepentent thread for the hardware communication\n        self.hardware_thread = QtCore.QThread()\n        # create an object for the hardware communication and let it live on the new thread\n        self._hardware_pull = HardwarePull(self)\n        self._hardware_pull.moveToThread(self.hardware_thread)\n        # connect the signals in and out of the threaded object\n        self.sig_handle_timer.connect(self._hardware_pull.handle_timer)\n        self._hardware_pull.sig_wavelength.connect(self.handle_wavelength)\n        # start the event loop for the hardware\n        self.hardware_thread.start()\n    def on_deactivate(self, e):\n        if self.getState() != 'idle' and self.getState() != 'deactivated':\n            self.stop_acqusition()\n        self.hardware_thread.quit()\n        self.sig_handle_timer.disconnect()\n        self._hardware_pull.sig_wavelength.disconnect()\n        try:\n            # clean up by removing reference to the ctypes library object\n            del self._wavemeterdll\n            return 0\n        except:\n            self.log.error('Could not unload the wlmData.dll of the '\n                    'wavemeter.')\n    #############################################\n    # Methods of the main class\n    #############################################\n    def handle_wavelength(self, wavelength1, wavelength2):\n        \"\"\" Function to save the wavelength, when it comes in with a signal.\n        \"\"\"\n        self._current_wavelength = wavelength1\n        self._current_wavelength2 = wavelength2\n    def start_acqusition(self):\n        \"\"\" Method to start the wavemeter software.\n        @return int: error code (0:OK, -1:error)\n        Also the actual threaded method for getting the current wavemeter reading is started.\n        \"\"\"\n        # first check its status\n        if self.getState() == 'running':\n            self.log.error('Wavemeter busy')\n            return -1\n        self.run()\n        # actually start the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStartMeasurment) #starts measurement\n        # start the measuring thread\n        self.sig_handle_timer.emit(True)\n        return 0\n    def stop_acqusition(self):\n        \"\"\" Stops the Wavemeter from measuring and kills the thread that queries the data.\n        @return int: error code (0:OK, -1:error)\n        \"\"\"\n        # check status just for a sanity check\n", "answers": ["        if self.getState() == 'idle':"], "length": 885, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "e59f877d3863977e0c9a383546007617a3bcb1d48ab84132"}
{"input": "", "context": "/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Distributable under LGPL license.\n * See terms of license at gnu.org.\n */\npackage net.java.sip.communicator.slick.protocol.jabber;\nimport java.beans.*;\nimport java.util.*;\nimport junit.framework.*;\nimport net.java.sip.communicator.service.protocol.*;\nimport net.java.sip.communicator.service.protocol.event.*;\nimport net.java.sip.communicator.service.protocol.jabberconstants.*;\nimport net.java.sip.communicator.util.*;\n/**\n * Tests Jabber implementations of a Presence Operation Set. Tests in this class\n * verify functionality such as: Changing local (our own) status and\n * corresponding event dispatching; Querying status of contacts, Subscribing\n * for presence notifications upong status changes of specific contacts.\n * <p>\n * Using a custom suite() method, we make sure that apart from standard test\n * methods (those with a <tt>test</tt> prefix) we also execute those that\n * we want run in a specific order like for example - postTestSubscribe() and\n * postTestUnsubscribe().\n * <p>\n * @author Damian Minkov\n * @author Lubomir Marinov\n */\npublic class TestOperationSetPresence\n    extends TestCase\n{\n    private static final Logger logger =\n        Logger.getLogger(TestOperationSetPresence.class);\n    private JabberSlickFixture fixture = new JabberSlickFixture();\n    private OperationSetPresence operationSetPresence1 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet1\n        = new HashMap<String, PresenceStatus>();\n    private OperationSetPresence operationSetPresence2 = null;\n    private final Map<String, PresenceStatus> supportedStatusSet2\n        = new HashMap<String, PresenceStatus>();\n    private String statusMessageRoot = new String(\"Our status is now: \");\n    private static AuthEventCollector authEventCollector1\n        = new AuthEventCollector();\n    private static AuthEventCollector authEventCollector2\n        = new AuthEventCollector();\n    public TestOperationSetPresence(String name)\n    {\n        super(name);\n    }\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n        fixture.setUp();\n        Map<String, OperationSet> supportedOperationSets1 =\n            fixture.provider1.getSupportedOperationSets();\n        if ( supportedOperationSets1 == null\n            || supportedOperationSets1.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this implementation. \");\n        //get the operation set presence here.\n        operationSetPresence1 =\n            (OperationSetPresence)supportedOperationSets1.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence1 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        // do it once again for the second provider\n        Map<String, OperationSet> supportedOperationSets2 =\n            fixture.provider2.getSupportedOperationSets();\n        if ( supportedOperationSets2 == null\n            || supportedOperationSets2.size() < 1)\n            throw new NullPointerException(\n                \"No OperationSet implementations are supported by \"\n                +\"this Jabber implementation. \");\n        //get the operation set presence here.\n        operationSetPresence2 =\n            (OperationSetPresence)supportedOperationSets2.get(\n                OperationSetPresence.class.getName());\n        //if the op set is null then the implementation doesn't offer a presence\n        //operation set which is unacceptable for jabber.\n        if (operationSetPresence2 == null)\n        {\n            throw new NullPointerException(\n                \"An implementation of the Jabber service must provide an \"\n                + \"implementation of at least the one of the Presence \"\n                + \"Operation Sets\");\n        }\n        /*\n         * Retrieve the supported PresenceStatus values because the instances\n         * are specific to the ProtocolProviderService implementations.\n         */\n        // operationSetPresence1\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence1.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet1.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n        // operationSetPresence2\n        for (Iterator<PresenceStatus> supportedStatusIt\n                        = operationSetPresence2.getSupportedStatusSet();\n             supportedStatusIt.hasNext();)\n        {\n            PresenceStatus supportedStatus = supportedStatusIt.next();\n            supportedStatusSet2.put(supportedStatus.getStatusName(),\n                supportedStatus);\n        }\n    }\n    @Override\n    protected void tearDown() throws Exception\n    {\n        super.tearDown();\n        fixture.tearDown();\n    }\n    /**\n     * Creates a test suite containing all tests of this class followed by\n     * test methods that we want executed in a specified order.\n     * @return Test\n     */\n    public static Test suite()\n    {\n        //return an (almost) empty suite if we're running in offline mode.\n        if(JabberSlickFixture.onlineTestingDisabled)\n        {\n            TestSuite suite = new TestSuite();\n            //the only test around here that we could run without net\n            //connectivity\n            suite.addTest(\n                new TestOperationSetPresence(\n                        \"testSupportedStatusSetForCompleteness\"));\n            return suite;\n        }\n        TestSuite suite = new TestSuite();\n        // clear the lists before subscribing users\n        suite.addTest(new TestOperationSetPresence(\"clearLists\"));\n        // first postTestSubscribe. to be sure that contacts are in the\n        // list so we can further continue and test presences each other\n        suite.addTest(new TestOperationSetPresence(\"postTestSubscribe\"));\n//        // add other tests\n//        suite.addTestSuite(TestOperationSetPresence.class);\n//\n        // now test unsubscribe\n        suite.addTest(new TestOperationSetPresence(\"postTestUnsubscribe\"));\n        return suite;\n    }\n    /**\n     * Verifies that all necessary Jabber test states are supported by the\n     * implementation.\n     */\n    public void testSupportedStatusSetForCompleteness()\n    {\n        //first create a local list containing the presence status instances\n        //supported by the underlying implementation.\n        Iterator<PresenceStatus> supportedStatusSetIter =\n            operationSetPresence1.getSupportedStatusSet();\n        List<String> supportedStatusNames = new LinkedList<String>();\n        while (supportedStatusSetIter.hasNext())\n        {\n            supportedStatusNames.add(supportedStatusSetIter\n                .next().getStatusName());\n        }\n        //create a copy of the MUST status set and remove any matching status\n        //that is also present in the supported set.\n", "answers": ["        List<String> requiredStatusNames ="], "length": 678, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "ac6445bc3b2ff172ac4c503cce9895134c79147da4766d14"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net;\nusing System.Net.NetworkInformation;\nusing System.Net.Sockets;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Timers;\nusing LobbyClient;\nusing PlasmaDownloader;\nusing PlasmaShared;\nusing Ratings;\nusing ZeroKWeb.SpringieInterface;\nusing ZkData;\nusing ZkData.UnitSyncLib;\nusing static System.String;\nusing Timer = System.Timers.Timer;\n \nnamespace ZkLobbyServer\n{\n    public class ServerBattle : Battle\n    {\n        public const int PollTimeout = 60;\n        public const int MapVoteTime = 25;\n        public const int NumberOfMapChoices = 4;\n        public const int MinimumAutostartPlayers = 6;\n        public static int BattleCounter;\n        public int QueueCounter = 0;\n        public static readonly Dictionary<string, BattleCommand> Commands = new Dictionary<string, BattleCommand>();\n        private static object pickPortLock = new object();\n        private static string hostingIp;\n        public int DiscussionSeconds = 25;\n        public readonly List<string> toNotify = new List<string>();\n        public Resource HostedMap;\n        public Resource HostedMod;\n        public Mod HostedModInfo;\n        private int hostingPort;\n        private int? dbAutohostIndex;\n        protected bool isZombie;\n        protected bool IsPollsBlocked => IsAutohost && DateTime.UtcNow < BlockPollsUntil;\n        private List<KickedPlayer> kickedPlayers = new List<KickedPlayer>();\n        public List<BattleDebriefing> Debriefings { get; private set; } = new List<BattleDebriefing>();\n        private Timer pollTimer;\n        private Timer discussionTimer;\n        public ZkLobbyServer server;\n        public DedicatedServer spring;\n        public string battleInstanceGuid;\n        PlayerTeam startGameStatus;\n        public int InviteMMPlayers { get; protected set; } = int.MaxValue; //will invite players to MM after each battle if more than X players\n        public MapSupportLevel MinimalMapSupportLevel => IsAutohost ? MinimalMapSupportLevelAutohost : (IsPassworded ? MapSupportLevel.None : MapSupportLevel.Supported);\n        public CommandPoll ActivePoll { get; private set; }\n        public bool IsAutohost { get; private set; }\n        public bool IsDefaultGame { get; private set; } = true;\n        public bool IsCbalEnabled { get; private set; } = true;\n        public override bool TimeQueueEnabled => DynamicConfig.Instance.TimeQueueEnabled && (Mode == AutohostMode.Teams || Mode == AutohostMode.Game1v1 || Mode == AutohostMode.GameFFA);\n        public MapSupportLevel MinimalMapSupportLevelAutohost { get; protected set; } = MapSupportLevel.Featured;\n        static ServerBattle()\n        {\n            Commands =\n                Assembly.GetAssembly(typeof(BattleCommand))\n                    .GetTypes()\n                    .Where(x => !x.IsAbstract && x.IsClass && typeof(BattleCommand).IsAssignableFrom(x))\n                    .Select(x => x.GetConstructor(new Type[] { }).Invoke(new object[] { }))\n                    .Cast<BattleCommand>()\n                    .ToDictionary(x => x.Shortcut, x => x);\n            hostingIp =\n                Dns.GetHostEntry(Dns.GetHostName()).AddressList.FirstOrDefault(ip => ip.AddressFamily == AddressFamily.InterNetwork)?.ToString() ??\n                \"127.0.0.1\";\n        }\n        public ServerBattle(ZkLobbyServer server, string founder)\n        {\n            BattleID = Interlocked.Increment(ref BattleCounter);\n            FounderName = founder;\n            battleInstanceGuid = Guid.NewGuid().ToString();\n            this.server = server;\n            pollTimer = new Timer(PollTimeout * 1000);\n            pollTimer.Enabled = false;\n            pollTimer.AutoReset = false;\n            pollTimer.Elapsed += pollTimer_Elapsed;\n            discussionTimer = new Timer(DiscussionSeconds * 1000);\n            discussionTimer.Enabled = false;\n            discussionTimer.AutoReset = false;\n            discussionTimer.Elapsed += discussionTimer_Elapsed;\n            SetupSpring();\n            PickHostingPort();\n        }\n        public void SaveToDb()\n        {\n            if (!IsAutohost) return;\n            using (var db = new ZkDataContext())\n            {\n                Autohost autohost = null;\n                bool insert = false;\n                if (dbAutohostIndex.HasValue)\n                {\n                    autohost = db.Autohosts.Where(x => x.AutohostID == dbAutohostIndex).FirstOrDefault();\n                }\n                if (autohost == null)\n                {\n                    insert = true;\n                    autohost = new Autohost();\n                }\n                autohost.MinimumMapSupportLevel = MinimalMapSupportLevelAutohost;\n                autohost.AutohostMode = Mode;\n                autohost.InviteMMPlayers = InviteMMPlayers;\n                autohost.MaxElo = MaxElo;\n                autohost.MinElo = MinElo;\n                autohost.MaxLevel = MaxLevel;\n                autohost.MinLevel = MinLevel;\n                autohost.MaxRank = MaxRank;\n                autohost.MinRank = MinRank;\n                autohost.Title = Title;\n                autohost.MaxPlayers = MaxPlayers;\n                autohost.CbalEnabled = IsCbalEnabled;\n                autohost.MaxEvenPlayers = MaxEvenPlayers;\n                autohost.ApplicableRating = ApplicableRating;\n                autohost.ModName = HostedMod?.InternalName ?? ModName;\n                autohost.MapName = HostedMap?.InternalName ?? MapName;\n                if (insert)\n                {\n                    db.Autohosts.Add(autohost);\n                }\n                db.SaveChanges();\n                dbAutohostIndex = autohost.AutohostID;\n            }\n        }\n        public string GenerateClientScriptPassword(string name)\n        {\n            return Hash.HashString(battleInstanceGuid + name).ToString();\n        }\n        public void Dispose()\n        {\n            spring.UnsubscribeEvents(this);\n            if (pollTimer != null) pollTimer.Enabled = false;\n            pollTimer?.Dispose();\n            pollTimer = null;\n            if (discussionTimer != null) discussionTimer.Enabled = false;\n            discussionTimer?.Dispose();\n            discussionTimer = null;\n            spring = null;\n            ActivePoll = null;\n        }\n        public List<string> GetAllUserNames()\n        {\n            var ret = Users.Select(x => x.Key).ToList();\n            if (spring.IsRunning) ret.AddRange(spring.Context.ActualPlayers.Select(x => x.Name));\n            return ret.Distinct().ToList();\n        }\n        public BattleCommand GetCommandByName(string name)\n        {\n            BattleCommand command;\n            if (Commands.TryGetValue(name, out command)) return command.Create();\n            return null;\n        }\n        public ConnectSpring GetConnectSpringStructure(string scriptPassword, bool isSpectator)\n        {\n            return new ConnectSpring()\n            {\n                Engine = EngineVersion,\n                Ip = hostingIp,\n                Port = hostingPort,\n                Map = MapName,\n                Game = ModName,\n                ScriptPassword = scriptPassword,\n                Mode = Mode,\n                Title = Title,\n                IsSpectator = isSpectator,\n            };\n        }\n        public bool IsKicked(string name)\n        {\n            var kicked = false;\n            kickedPlayers.RemoveAll(x => x.TimeOfKicked <= DateTime.UtcNow.AddMinutes(-5));\n            if (kickedPlayers.Any(y => y.Name == name)) kicked = true;\n            return kicked;\n        }\n        public async Task KickFromBattle(string name, string reason)\n        {\n            UserBattleStatus user;\n            kickedPlayers.Add(new KickedPlayer() { Name = name });\n            if (Users.TryGetValue(name, out user))\n            {\n                var client = server.ConnectedUsers[name];\n                await client.Respond($\"You were kicked from battle: {reason}\");\n                await client.Process(new LeaveBattle() { BattleID = BattleID });\n            }\n        }\n        public virtual async Task CheckCloseBattle()\n        {\n            if (Users.IsEmpty && !spring.IsRunning)\n            {\n                if (!IsAutohost)\n                    await server.RemoveBattle(this);\n                else if (Mode != AutohostMode.None) // custom autohosts would typically be themed around a single map\n                    await RunCommandDirectly<CmdMap>(null);\n            }\n        }\n        public void SwitchDefaultGame(bool useDefaultGame)\n        {\n            IsDefaultGame = useDefaultGame;\n        }\n        public void SwitchAutohost(bool autohost, string founder)\n        {\n            if (autohost)\n            {\n                IsAutohost = true;\n                IsDefaultGame = true;\n                FounderName = \"Autohost #\" + BattleID;\n                SaveToDb();\n            }\n            else\n            {\n                IsAutohost = false;\n                FounderName = founder;\n                if (dbAutohostIndex.HasValue)\n                {\n                    using (var db = new ZkDataContext())\n                    {\n                        db.Autohosts.Remove(db.Autohosts.Where(x => x.AutohostID == dbAutohostIndex).FirstOrDefault());\n                        db.SaveChanges();\n                    }\n                }\n            }\n        }\n        public async Task ProcessBattleSay(Say say)\n        {\n            if (say.User == GlobalConst.NightwatchName) return; // ignore self\n            ConnectedUser user;\n            server.ConnectedUsers.TryGetValue(say.User, out user);\n            if ((say.Place == SayPlace.Battle) && !say.IsEmote && (user?.User.BanMute != true) && (user?.User.BanSpecChat != true) && say.AllowRelay) spring.SayGame($\"<{say.User}>{say.Text}\"); // relay to spring\n            await CheckSayForCommand(say);\n        }\n        private async Task<bool> CheckSayForCommand(Say say)\n        {\n            // check if it's command\n            if (!say.IsEmote && (say.Text?.Length > 1) && say.Text.StartsWith(\"!\"))\n            {\n                var parts = say.Text.Substring(1).Split(new[] { ' ' }, 2, StringSplitOptions.RemoveEmptyEntries);\n                return await RunCommandWithPermissionCheck(say, parts[0], parts.Skip(1).FirstOrDefault());\n            }\n            return false;\n        }\n        public virtual async Task ProcessPlayerJoin(ConnectedUser user, string joinPassword)\n        {\n            if (IsPassworded && (Password != joinPassword))\n            {\n                await user.Respond(\"Invalid password\");\n                return;\n            }\n            if (IsKicked(user.Name))\n            {\n                await KickFromBattle(user.Name, \"Banned for five minutes\");\n                return;\n            }\n            if ((user.MyBattle != null) && (user.MyBattle != this)) await user.Process(new LeaveBattle());\n            UserBattleStatus ubs;\n            if (!Users.TryGetValue(user.Name, out ubs))\n            {\n                ubs = new UserBattleStatus(user.Name, user.User, GenerateClientScriptPassword(user.Name));\n                Users[user.Name] = ubs;\n            }\n            ValidateBattleStatus(ubs);\n            user.MyBattle = this;\n            await server.TwoWaySyncUsers(user.Name, Users.Keys); // mutually sync user statuses\n            await server.SyncUserToAll(user);\n            await RecalcSpectators();\n            await\n                user.SendCommand(new JoinBattleSuccess()\n                {\n                    BattleID = BattleID,\n                    Players = Users.Values.Select(x => x.ToUpdateBattleStatus()).ToList(),\n                    Bots = Bots.Values.Select(x => x.ToUpdateBotStatus()).ToList(),\n                    Options = ModOptions\n                });\n            if (ActivePoll != null) await user.SendCommand(ActivePoll.GetBattlePoll());\n            await server.Broadcast(Users.Keys.Where(x => x != user.Name), ubs.ToUpdateBattleStatus()); // send my UBS to others in battle\n            if (spring.IsRunning)\n            {\n                spring.AddUser(ubs.Name, ubs.ScriptPassword, ubs.LobbyUser);\n                var started = DateTime.UtcNow.Subtract(spring.IngameStartTime ?? RunningSince ?? DateTime.UtcNow);\n                started = new TimeSpan((int)started.TotalHours, started.Minutes, started.Seconds);\n                await SayBattle($\"THIS GAME IS CURRENTLY IN PROGRESS, PLEASE WAIT UNTIL IT ENDS! Running for {started}\", ubs.Name);\n                await SayBattle(\"If you say !notify, I will message you when the current game ends.\", ubs.Name);\n            }\n            try\n            {\n                var ret = PlayerJoinHandler.AutohostPlayerJoined(GetContext(), ubs.LobbyUser.AccountID);\n                if (ret != null)\n                {\n                    if (!IsNullOrEmpty(ret.PrivateMessage)) await SayBattle(ret.PrivateMessage, ubs.Name);\n                    if (!IsNullOrEmpty(ret.PublicMessage)) await SayBattle(ret.PublicMessage);\n                }\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(ex.ToString());\n                await SayBattle(\"ServerManage error: \" + ex);\n            }\n        }\n        public async Task RecalcSpectators()\n        {\n            var specCount = Users.Values.Count(x => x.IsSpectator);\n            var playerCount = Users.Values.Count(x => !x.IsSpectator);\n            if (specCount != SpectatorCount || playerCount != NonSpectatorCount)\n            {\n                SpectatorCount = specCount;\n                NonSpectatorCount = playerCount;\n                if (GlobalConst.LobbyServerUpdateSpectatorsInstantly)\n                {\n                    await server.Broadcast(Users.Keys, new BattleUpdate() { Header = new BattleHeader() { SpectatorCount = specCount, BattleID = BattleID, PlayerCount = NonSpectatorCount } });\n                }\n            }\n        }\n        public async Task RegisterVote(Say e, int vote)\n        {\n            if (ActivePoll != null)\n            {\n                if (await ActivePoll.Vote(e, vote))\n                {\n                    StopVote();\n                }\n            }\n            else await Respond(e, \"There is no poll going on, start some first\");\n        }\n        public async Task RequestConnectSpring(ConnectedUser conus, string joinPassword)\n        {\n            UserBattleStatus ubs;\n            startGameStatus = spring.LobbyStartContext.Players.FirstOrDefault(x => x.Name == conus.Name);\n            \n            if (!Users.TryGetValue(conus.Name, out ubs) && !(IsInGame && startGameStatus != null))\n                if (IsPassworded && (Password != joinPassword))\n                {\n                    await conus.Respond(\"Invalid password\");\n                    return;\n                }\n            var pwd = GenerateClientScriptPassword(conus.Name);\n            spring.AddUser(conus.Name, pwd, conus.User);\n            if (spring.Context.LobbyStartContext.Players.Any(x => x.Name == conus.Name) && conus.MyBattle != this)\n            {\n                await ProcessPlayerJoin(conus, joinPassword);\n            }\n            await conus.SendCommand(GetConnectSpringStructure(pwd, startGameStatus?.IsSpectator != false));\n        }\n        public Task Respond(Say e, string text)\n        {\n            return SayBattle(text, e?.User);\n        }\n        public async Task RunCommandDirectly<T>(Say e, string args = null) where T : BattleCommand, new()\n        {\n            var t = new T();\n            await t.Run(this, e, args);\n        }\n        public async Task<bool> RunCommandWithPermissionCheck(Say e, string com, string arg)\n        {\n            var cmd = GetCommandByName(com);\n            if (cmd == null) return false;\n            if (isZombie)\n            {\n                await Respond(e, \"This room is now disabled, please join a new one\");\n                return false;\n            }\n            string reason;\n            var perm = cmd.GetRunPermissions(this, e.User, out reason);\n            if (perm == BattleCommand.RunPermission.Run) await cmd.Run(this, e, arg);\n            else if (perm == BattleCommand.RunPermission.Vote)\n            {\n                if (IsPollsBlocked)\n                {\n                    await Respond(e, \"Please wait for a few seconds before starting a poll.\");\n                    return false;\n                }\n                await StartVote(cmd, e, arg);\n            }\n            else\n            {\n                await Respond(e, reason);\n                return false;\n            }\n            return true;\n        }\n        public async Task<bool> RunServerBalance(bool isGameStart, int? allyTeams, bool? clanWise)\n        {\n            try\n            {\n                var context = GetContext();\n                context.Mode = Mode;\n                if (!IsCbalEnabled) clanWise = false;\n                var balance = Balancer.BalanceTeams(context, isGameStart, allyTeams, clanWise);\n                await ApplyBalanceResults(balance);\n                return balance.CanStart;\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(ex.ToString());\n                return false;\n            }\n        }\n        public void SayGame(string text)\n        {\n            if (spring?.IsRunning != true) return;\n            foreach (var line in text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n            {\n                spring.SayGame(line);\n            }\n        }\n        public async Task SayBattle(string text, string privateUser = null)\n        {\n            if (!IsNullOrEmpty(text))\n            {\n                if ((privateUser == null)) spring.SayGame(text);\n                foreach (var line in text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries))\n                {\n                    await\n                        server.GhostSay(\n                            new Say()\n                            {\n                                User = GlobalConst.NightwatchName,\n                                Text = line,\n                                Place = privateUser != null ? SayPlace.BattlePrivate : SayPlace.Battle,\n                                Target = privateUser,\n                                IsEmote = true,\n                                AllowRelay = false,\n                            },\n                            BattleID);\n                }\n            }\n        }\n        public async Task SetModOptions(Dictionary<string, string> options)\n        {\n            ModOptions = options;\n            await server.Broadcast(Users.Keys, new SetModOptions() { Options = options });\n        }\n        public void SetApplicableRating(RatingCategory rating)\n        {\n            ApplicableRating = rating;\n            SaveToDb();\n        }\n        public async Task Spectate(string name)\n        {\n            ConnectedUser usr;\n            if (server.ConnectedUsers.TryGetValue(name, out usr)) await usr.Process(new UpdateUserBattleStatus() { Name = usr.Name, IsSpectator = true });\n        }\n        public async Task<bool> StartGame()\n        {\n            var context = GetContext();\n            if (TimeQueueEnabled) // spectate beyond max players\n            {\n                int allowedPlayers = MaxPlayers;\n                if (context.Players.Where(x => !x.IsSpectator).Count() <= MaxEvenPlayers)\n                {\n                    allowedPlayers = context.Players.Where(x => !x.IsSpectator).Count() & ~0x1;\n                }\n                foreach (var plr in context.Players.Where(x=>!x.IsSpectator).OrderBy(x => x.QueueOrder).Skip(allowedPlayers))\n                {\n                    plr.IsSpectator = true;\n                }\n            }\n            \n            \n            if (Mode != AutohostMode.None)\n            {\n                var balance = IsCbalEnabled ? Balancer.BalanceTeams(context, true, null, null) : Balancer.BalanceTeams(context, true, null, false);\n                if (!IsNullOrEmpty(balance.Message)) await SayBattle(balance.Message);\n                if (!balance.CanStart) return false;\n                context.ApplyBalance(balance);\n            }\n            var startSetup = StartSetup.GetDedicatedServerStartSetup(context);\n            if (!await EnsureEngineIsPresent()) return false;\n            if (IsInGame || spring.IsRunning)\n            {\n                await SayBattle(\"Game already running\");\n                return false;\n            }\n            spring.HostGame(startSetup, hostingIp, hostingPort);\n            IsInGame = true;\n            RunningSince = DateTime.UtcNow;\n            foreach (var us in Users.Values)\n                if (us != null)\n                {\n                    ConnectedUser user;\n                    if (server.ConnectedUsers.TryGetValue(us.Name, out user)) await user.SendCommand(GetConnectSpringStructure(us.ScriptPassword, startSetup?.Players.FirstOrDefault(x=>x.Name == us.Name)?.IsSpectator != false));\n                }\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            // remove all from MM\n            foreach (var player in startSetup.Players.Where(x => !x.IsSpectator)) {\n                if (await server.MatchMaker.RemoveUser(player.Name, false))\n                {\n                    await server.UserLogSay($\"Removing {player.Name} from MM since their custom battle just started.\");\n                }\n            }\n            await server.MatchMaker.UpdateAllPlayerStatuses();\n            return true;\n        }\n        public async Task<bool> StartVote(BattleCommand cmd, Say e, string args, int timeout = PollTimeout, CommandPoll poll = null)\n        {\n            cmd = cmd.Create();\n            string topic = cmd.Arm(this, e, args);\n            if (topic == null) return false;\n            var unwrappedCmd = cmd;\n            if (cmd is CmdPoll)\n            {\n                var split = args.Split(new[] { ' ' }, 2);\n                args = split.Length > 1 ? split[1] : \"\";\n                unwrappedCmd = (cmd as CmdPoll).InternalCommand;\n            }\n            if (unwrappedCmd is CmdMap && string.IsNullOrEmpty(args)) return await CreateMultiMapPoll();\n            Func<string, string> selector = cmd.GetIneligibilityReasonFunc(this);\n            if (e != null && selector(e.User) != null) return false;\n            var options = new List<PollOption>();\n            string url = null;\n            string map = null;\n            if (unwrappedCmd is CmdMap)\n            {\n                url = $\"{GlobalConst.BaseSiteUrl}/Maps/Detail/{(unwrappedCmd as CmdMap).Map.ResourceID}\";\n                map = (unwrappedCmd as CmdMap).Map.InternalName;\n            }\n            var numVoters = Users.Values.Count(x => selector(x.Name) == null);\n            var voteMargin = unwrappedCmd.GetPollWinMargin(this, numVoters);\n            poll = poll ?? new CommandPoll(this, true, true, unwrappedCmd is CmdMap, map, unwrappedCmd is CmdStart, voteMargin);\n            options.Add(new PollOption()\n            {\n                Name = \"Yes\",\n                URL = url,\n                Action = async () =>\n                {\n                    if (cmd.Access == BattleCommand.AccessType.NotIngame && spring.IsRunning) return;\n                    if (cmd.Access == BattleCommand.AccessType.Ingame && !spring.IsRunning) return;\n                    await cmd.ExecuteArmed(this, e);\n                }\n            });\n            options.Add(new PollOption()\n            {\n                Name = \"No\",\n                Action = async () => { }\n            });\n            if (await StartVote(selector, options, e, topic, poll))\n            {\n                await RegisterVote(e, 1);\n                return true;\n            }\n            return false;\n        }\n        public async Task<bool> StartVote(Func<string, string> eligibilitySelector, List<PollOption> options, Say creator, string topic, CommandPoll poll, int timeout = PollTimeout)\n        {\n            if (ActivePoll != null)\n            {\n                await Respond(creator, $\"Please wait, another poll already in progress: {ActivePoll.Topic}\");\n                return false;\n            }\n            await poll.Setup(eligibilitySelector, options, creator, topic);\n            ActivePoll = poll;\n            pollTimer.Interval = timeout * 1000;\n            pollTimer.Enabled = true;\n            return true;\n        }\n        public async void StopVote()\n        {\n            try\n            {\n                if (ActivePoll == null) return;\n                var oldPoll = ActivePoll;\n                if (ActivePoll != null) await ActivePoll.End(false);\n                if (pollTimer != null) pollTimer.Enabled = false;\n                ActivePoll = null;\n                await oldPoll?.PublishResult();\n            }\n            catch (Exception ex)\n            {\n                Trace.TraceError(\"Error stopping vote \" + ex);\n            }\n        }\n        public async Task SwitchEngine(string engine)\n        {\n            EngineVersion = engine;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Engine = EngineVersion } });\n        }\n        public async Task SwitchGame(string internalName)\n        {\n            ModName = internalName;\n            ValidateAndFillDetails();\n            if (ModName != server.Game)\n            {\n                ModOptions[\"noelo\"] = \"1\";\n                await SayBattle(\"Ratings are disabled, since this game is not vanilla ZK\");\n                await server.Broadcast(Users.Keys, new SetModOptions() { Options = ModOptions });\n            }\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Game = ModName } });\n        }\n        public async Task SwitchGameType(AutohostMode type)\n        {\n            Mode = type;\n            MapName = null;\n            ValidateAndFillDetails();\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            SaveToDb();\n            // do a full update - mode can also change map/players\n        }\n        public async Task SwitchMap(string internalName)\n        {\n            MapName = internalName;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Map = MapName } });\n        }\n        public async Task SwitchMaxPlayers(int cnt)\n        {\n            MaxPlayers = cnt;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, MaxPlayers = MaxPlayers } });\n            SaveToDb();\n        }\n        public async Task SwitchMaxEvenPlayers(int cnt)\n        {\n            MaxEvenPlayers = cnt;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, MaxEvenPlayers = MaxEvenPlayers } });\n            SaveToDb();\n        }\n        public async Task SwitchInviteMmPlayers(int players)\n        {\n            InviteMMPlayers = players;\n            SaveToDb();\n        }\n        public async Task ValidateAllBattleStatuses()\n        {\n            foreach (var ubs in Users.Values)\n            {\n                ValidateBattleStatus(ubs);\n                await server.Broadcast(Users.Keys, ubs.ToUpdateBattleStatus());\n            }\n            await RecalcSpectators();\n        }\n        public async Task SwitchMaxElo(int elo)\n        {\n            MaxElo = elo;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinElo(int elo)\n        {\n            MinElo = elo;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMaxLevel(int lvl)\n        {\n            MaxLevel = lvl;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinLevel(int lvl)\n        {\n            MinLevel = lvl;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMaxRank(int rank)\n        {\n            MaxRank = rank;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinRank(int rank)\n        {\n            MinRank = rank;\n            SaveToDb();\n            await ValidateAllBattleStatuses();\n        }\n        public async Task SwitchMinMapSupportLevel(MapSupportLevel lvl)\n        {\n            MinimalMapSupportLevelAutohost = lvl;\n            SaveToDb();\n        }\n        public void SwitchCbal(bool cbalEnabled)\n        {\n            IsCbalEnabled = cbalEnabled;\n            SaveToDb();\n        }\n        public async Task SwitchPassword(string pwd)\n        {\n            Password = pwd ?? \"\";\n            await server.Broadcast(server.ConnectedUsers.Values, new BattleUpdate() { Header = GetHeader() });\n            // do a full update to hide pwd properly\n        }\n        public async Task SwitchTitle(string title)\n        {\n            Title = title;\n            ValidateAndFillDetails();\n            await\n                server.Broadcast(server.ConnectedUsers.Values,\n                    new BattleUpdate() { Header = new BattleHeader() { BattleID = BattleID, Title = Title } });\n            SaveToDb();\n        }\n        public void BlockPolls(int seconds)\n        {\n            var target = DateTime.UtcNow.AddSeconds(seconds);\n            if (BlockPollsUntil < target) BlockPollsUntil = target;\n        }\n        public void UpdateWith(Autohost autohost)\n        {\n            IsAutohost = true;\n            MinimalMapSupportLevelAutohost = autohost.MinimumMapSupportLevel;\n            Mode = autohost.AutohostMode;\n            InviteMMPlayers = autohost.InviteMMPlayers;\n            MaxElo = autohost.MaxElo;\n            MinElo = autohost.MinElo;\n            MaxLevel = autohost.MaxLevel;\n            MinLevel = autohost.MinLevel;\n            MaxRank = autohost.MaxRank;\n            MinRank = autohost.MinRank;\n            Title = autohost.Title;\n            MaxPlayers = autohost.MaxPlayers;\n            IsCbalEnabled = autohost.CbalEnabled;\n            dbAutohostIndex = autohost.AutohostID;\n            MaxEvenPlayers = autohost.MaxEvenPlayers;\n            ApplicableRating = autohost.ApplicableRating;\n            FounderName = \"Autohost #\" + BattleID;\n            ValidateAndFillDetails();\n            SwitchGame(autohost.ModName);\n            SwitchMap(autohost.MapName);\n            RunCommandDirectly<CmdMap>(null);\n        }\n        public override void UpdateWith(BattleHeader h)\n        {\n            // following variables cannot be overriden in serverbattle\n            h.BattleID = BattleID;\n            h.Founder = FounderName;\n            h.IsRunning = IsInGame;\n            h.RunningSince = RunningSince;\n            h.SpectatorCount = SpectatorCount;\n            h.PlayerCount = NonSpectatorCount;\n            h.IsMatchMaker = IsMatchMakerBattle;\n            base.UpdateWith(h);\n            SwitchGame(h.Game);\n            ValidateAndFillDetails();\n        }\n        public void ValidateAndFillDetails()\n        {\n            if (IsNullOrEmpty(Title)) Title = $\"{FounderName}'s game\";\n            if (IsNullOrEmpty(EngineVersion) || (Mode != AutohostMode.None)) EngineVersion = server.Engine;\n            server.Downloader.GetResource(DownloadType.ENGINE, server.Engine);\n            switch (Mode)\n            {\n                case AutohostMode.Game1v1:\n                    MaxPlayers = 2;\n                    break;\n                case AutohostMode.Planetwars:\n                    if (MaxPlayers < 2) MaxPlayers = 16;\n                    break;\n                case AutohostMode.GameChickens:\n                    if (MaxPlayers < 2) MaxPlayers = 10;\n                    break;\n                case AutohostMode.GameFFA:\n                    if (MaxPlayers < 3) MaxPlayers = 16;\n                    break;\n                case AutohostMode.Teams:\n                    if (MaxPlayers < 4) MaxPlayers = 16;\n                    break;\n                case AutohostMode.None:\n                    if (MaxPlayers == 0) MaxPlayers = 16;\n                    break;\n            }\n            if (MaxPlayers > DynamicConfig.Instance.MaximumBattlePlayers && !IsAutohost) MaxPlayers = DynamicConfig.Instance.MaximumBattlePlayers;\n            if (MaxEvenPlayers > MaxPlayers) MaxEvenPlayers = MaxPlayers;\n            HostedMod = MapPicker.FindResources(ResourceType.Mod, ModName ?? server.Game ?? GlobalConst.DefaultZkTag).FirstOrDefault();\n            HostedMap = MapName != null\n                ? MapPicker.FindResources(ResourceType.Map, MapName).FirstOrDefault()\n                : MapPicker.GetRecommendedMap(GetContext());\n            ModName = HostedMod?.InternalName ?? ModName ?? server.Game ?? GlobalConst.DefaultZkTag;\n            MapName = HostedMap?.InternalName ?? MapName ?? \"Small_Divide-Remake-v04\";\n            if (HostedMod != null)\n                try\n                {\n                    HostedModInfo = MetaDataCache.ServerGetMod(HostedMod.InternalName);\n                }\n                catch (Exception ex)\n                {\n                    Trace.TraceWarning(\"Error loading mod metadata for {0} : {1}\", HostedMod.InternalName, ex);\n                }\n        }\n        public virtual void ValidateBattleStatus(UserBattleStatus ubs)\n        {\n            if (Mode != AutohostMode.None) ubs.AllyNumber = 0;\n            if (!ubs.IsSpectator)\n            {\n                if (!TimeQueueEnabled && Users.Values.Count(x => !x.IsSpectator) > MaxPlayers)\n                {\n                    ubs.IsSpectator = true;\n                    SayBattle(\"This battle is full.\", ubs.Name);\n                }\n                if (Users.Values.Count(x => !x.IsSpectator) <= DynamicConfig.Instance.MaximumStatLimitedBattlePlayers || IsAutohost)\n                {\n                    if (ubs.LobbyUser.EffectiveElo > MaxElo && ubs.LobbyUser.EffectiveMmElo > MaxElo)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your rating (\" + Math.Min(ubs.LobbyUser.EffectiveElo, ubs.LobbyUser.EffectiveMmElo) + \") is too high. The maximum rating to play in this battle is \" + MaxElo + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.EffectiveElo < MinElo && ubs.LobbyUser.EffectiveMmElo < MinElo)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your rating (\" + Math.Max(ubs.LobbyUser.EffectiveElo, ubs.LobbyUser.EffectiveMmElo) + \") is too low. The minimum rating to play in this battle is \" + MinElo + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Level > MaxLevel)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your level (\" + ubs.LobbyUser.Level + \") is too high. The maximum level to play in this battle is \" + MaxLevel + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Level < MinLevel)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your level (\" + ubs.LobbyUser.Level + \") is too low. The minimum level to play in this battle is \" + MinLevel + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Rank > MaxRank)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your Rank (\" + Ranks.RankNames[ubs.LobbyUser.Rank] + \") is too high. The maximum Rank to play in this battle is \" + Ranks.RankNames[MaxRank] + \".\", ubs.Name);\n                    }\n                    if (ubs.LobbyUser.Rank < MinRank)\n                    {\n                        ubs.IsSpectator = true;\n                        SayBattle(\"Your Rank (\" + Ranks.RankNames[ubs.LobbyUser.Rank] + \") is too low. The minimum Rank to play in this battle is \" + Ranks.RankNames[MinRank] + \".\", ubs.Name);\n                    }\n                }\n                if (ubs.QueueOrder <= 0) ubs.QueueOrder = ++QueueCounter;\n            }\n            else\n            {\n                ubs.QueueOrder = -1;\n            }\n        }\n        protected virtual async Task OnDedicatedExited(SpringBattleContext springBattleContext)\n        {\n            StopVote();\n            IsInGame = false;\n            RunningSince = null;\n            BlockPollsUntil = DateTime.UtcNow.AddSeconds(DiscussionSeconds);\n            bool result = BattleResultHandler.SubmitSpringBattleResult(springBattleContext, server, (debriefing) =>\n            {\n                Debriefings.Add(debriefing);\n                server.Broadcast(springBattleContext.ActualPlayers.Select(x => x.Name), debriefing);\n                Trace.TraceInformation(\"Battle ended: Sent out debriefings for B\" + debriefing.ServerBattleID);\n            });\n            await server.Broadcast(server.ConnectedUsers.Keys, new BattleUpdate() { Header = GetHeader() });\n            foreach (var s in toNotify)\n                await\n                    server.GhostSay(new Say()\n                    {\n                        User = GlobalConst.NightwatchName,\n                        Text = $\"** {FounderName} 's {Title} just ended, join me! **\",\n                        Target = s,\n                        IsEmote = true,\n                        Place = SayPlace.User,\n                        Ring = true,\n                        AllowRelay = false\n                    });\n            toNotify.Clear();\n            var playingEligibleUsers = server.MatchMaker.GetEligibleQuickJoinPlayers(Users.Values.Where(x => !x.LobbyUser.IsAway && !x.IsSpectator && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList());\n            if (playingEligibleUsers.Count() >= InviteMMPlayers)\n            { //Make sure there are enough eligible users for a battle to be likely to happen\n                //put all users into MM queue to suggest battles\n                var teamsQueues = server.MatchMaker.PossibleQueues.Where(x => x.Mode == AutohostMode.Teams).ToList();\n                var availableUsers = Users.Values.Where(x => !x.LobbyUser.IsAway && x.Name != null).Select(x => server.ConnectedUsers[x.Name]).ToList();\n                await server.MatchMaker.MassJoin(availableUsers, teamsQueues);\n                DiscussionSeconds = MatchMaker.TimerSeconds + 2;\n            }\n            else\n            {\n                DiscussionSeconds = 5;\n            }\n            BlockPollsUntil = DateTime.UtcNow.AddSeconds(DiscussionSeconds);\n            if (Mode != AutohostMode.None && (IsAutohost || (!Users.ContainsKey(FounderName) || Users[FounderName].LobbyUser?.IsAway == true) && Mode != AutohostMode.Planetwars && !IsPassworded))\n            {\n                if (!result)\n                {\n                    //Game was aborted/exited/invalid, allow manual commands\n                    BlockPollsUntil = DateTime.UtcNow;\n                }\n                else\n                {\n                    //Initiate discussion time, then map vote, then start vote\n                    discussionTimer.Interval = (DiscussionSeconds - 1) * 1000;\n                    discussionTimer.Start();\n                }\n            }\n            await CheckCloseBattle();\n        }\n        private async Task<bool> CreateMultiMapPoll()\n        {\n            var poll = new CommandPoll(this, false, false, true);\n            poll.PollEnded += MapVoteEnded;\n            var options = new List<PollOption>();\n            List<int> pickedMaps = new List<int>();\n            pickedMaps.Add(HostedMap?.ResourceID ?? 0);\n            using (var db = new ZkDataContext())\n            {\n                for (int i = 0; i < NumberOfMapChoices; i++)\n                {\n                    Resource map = null;\n                    if (i < NumberOfMapChoices / 2)\n                    {\n                        map = MapPicker.GetRecommendedMap(GetContext(), (MinimalMapSupportLevel < MapSupportLevel.Supported) ? MapSupportLevel.Supported : MinimalMapSupportLevel, MapRatings.GetMapRanking(Mode).TakeWhile(x => x.Percentile < 0.2).Select(x => x.Map).Where(x => !pickedMaps.Contains(x.ResourceID)).AsQueryable()); //choose at least 50% popular maps\n                    }\n                    if (map == null)\n                    {\n                        map = MapPicker.GetRecommendedMap(GetContext(), (MinimalMapSupportLevel < MapSupportLevel.Featured) ? MapSupportLevel.Supported : MinimalMapSupportLevel, db.Resources.Where(x => !pickedMaps.Contains(x.ResourceID)));\n                    }\n                    pickedMaps.Add(map.ResourceID);\n                    options.Add(new PollOption()\n                    {\n                        Name = map.InternalName,\n                        DisplayName = map.MapNameWithDimensions(),\n                        URL = $\"{GlobalConst.BaseSiteUrl}/Maps/Detail/{map.ResourceID}\",\n                        ResourceID = map.ResourceID,\n                        Action = async () =>\n                        {\n                            var cmd = new CmdMap().Create();\n                            cmd.Arm(this, null, map.ResourceID.ToString());\n                            if (cmd.Access == BattleCommand.AccessType.NotIngame && spring.IsRunning) return;\n                            if (cmd.Access == BattleCommand.AccessType.Ingame && !spring.IsRunning) return;\n", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "length": 3344, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "19ce7eea60fb00ea9e13296e05d1b64301152439fb8a88f2"}
{"input": "", "context": "namespace OpenDental{\n\tpartial class FormHL7DefEdit {\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing) {\n\t\t\tif(disposing && (components != null)) {\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\t\t#region Windows Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent() {\n\t\t\tSystem.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FormHL7DefEdit));\n\t\t\tthis.label15 = new System.Windows.Forms.Label();\n\t\t\tthis.label6 = new System.Windows.Forms.Label();\n\t\t\tthis.label5 = new System.Windows.Forms.Label();\n\t\t\tthis.label4 = new System.Windows.Forms.Label();\n\t\t\tthis.label3 = new System.Windows.Forms.Label();\n\t\t\tthis.textNote = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelOutAddrPortEx = new System.Windows.Forms.Label();\n\t\t\tthis.labelInAddrPortEx = new System.Windows.Forms.Label();\n\t\t\tthis.textInternalTypeVersion = new System.Windows.Forms.TextBox();\n\t\t\tthis.label13 = new System.Windows.Forms.Label();\n\t\t\tthis.textInternalType = new System.Windows.Forms.TextBox();\n\t\t\tthis.label14 = new System.Windows.Forms.Label();\n\t\t\tthis.checkEnabled = new System.Windows.Forms.CheckBox();\n\t\t\tthis.textEscChar = new System.Windows.Forms.TextBox();\n\t\t\tthis.label12 = new System.Windows.Forms.Label();\n\t\t\tthis.checkInternal = new System.Windows.Forms.CheckBox();\n\t\t\tthis.label11 = new System.Windows.Forms.Label();\n\t\t\tthis.textSubcompSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label9 = new System.Windows.Forms.Label();\n\t\t\tthis.textRepSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label10 = new System.Windows.Forms.Label();\n\t\t\tthis.textCompSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label8 = new System.Windows.Forms.Label();\n\t\t\tthis.textFieldSep = new System.Windows.Forms.TextBox();\n\t\t\tthis.label7 = new System.Windows.Forms.Label();\n\t\t\tthis.comboModeTx = new System.Windows.Forms.ComboBox();\n\t\t\tthis.textSftpPassword = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelSftpPassword = new System.Windows.Forms.Label();\n\t\t\tthis.textSftpUsername = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelSftpUsername = new System.Windows.Forms.Label();\n\t\t\tthis.textOutPathOrAddrPort = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelOutPathOrAddrPort = new System.Windows.Forms.Label();\n\t\t\tthis.textInPathOrAddrPort = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelInPathOrAddrPort = new System.Windows.Forms.Label();\n\t\t\tthis.label2 = new System.Windows.Forms.Label();\n\t\t\tthis.label1 = new System.Windows.Forms.Label();\n\t\t\tthis.textDescription = new System.Windows.Forms.TextBox();\n\t\t\tthis.labelDelete = new System.Windows.Forms.Label();\n\t\t\tthis.label16 = new System.Windows.Forms.Label();\n\t\t\tthis.label17 = new System.Windows.Forms.Label();\n\t\t\tthis.textHL7ServiceName = new System.Windows.Forms.TextBox();\n\t\t\tthis.label18 = new System.Windows.Forms.Label();\n\t\t\tthis.textHL7Server = new System.Windows.Forms.TextBox();\n\t\t\tthis.label19 = new System.Windows.Forms.Label();\n\t\t\tthis.groupShowDemographics = new System.Windows.Forms.GroupBox();\n\t\t\tthis.label20 = new System.Windows.Forms.Label();\n\t\t\tthis.radioChangeAndAdd = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioChange = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioShow = new System.Windows.Forms.RadioButton();\n\t\t\tthis.radioHide = new System.Windows.Forms.RadioButton();\n\t\t\tthis.checkShowAccount = new System.Windows.Forms.CheckBox();\n\t\t\tthis.checkShowAppts = new System.Windows.Forms.CheckBox();\n\t\t\tthis.checkQuadAsToothNum = new System.Windows.Forms.CheckBox();\n\t\t\tthis.labelLabImageCat = new System.Windows.Forms.Label();\n\t\t\tthis.comboLabImageCat = new System.Windows.Forms.ComboBox();\n\t\t\tthis.groupDelimeters = new System.Windows.Forms.GroupBox();\n\t\t\tthis.groupHL7Comm = new System.Windows.Forms.GroupBox();\n\t\t\tthis.butBrowseOut = new OpenDental.UI.Button();\n\t\t\tthis.butBrowseIn = new OpenDental.UI.Button();\n\t\t\tthis.butAdd = new OpenDental.UI.Button();\n\t\t\tthis.butOK = new OpenDental.UI.Button();\n\t\t\tthis.butCancel = new OpenDental.UI.Button();\n\t\t\tthis.butDelete = new OpenDental.UI.Button();\n\t\t\tthis.gridMain = new OpenDental.UI.ODGrid();\n\t\t\tthis.groupShowDemographics.SuspendLayout();\n\t\t\tthis.groupDelimeters.SuspendLayout();\n\t\t\tthis.groupHL7Comm.SuspendLayout();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// label15\n\t\t\t// \n\t\t\tthis.label15.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label15.Location = new System.Drawing.Point(166, 93);\n\t\t\tthis.label15.Name = \"label15\";\n\t\t\tthis.label15.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label15.TabIndex = 0;\n\t\t\tthis.label15.Text = \"Default: \\\\\";\n\t\t\tthis.label15.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label6\n\t\t\t// \n\t\t\tthis.label6.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label6.Location = new System.Drawing.Point(166, 73);\n\t\t\tthis.label6.Name = \"label6\";\n\t\t\tthis.label6.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label6.TabIndex = 0;\n\t\t\tthis.label6.Text = \"Default: &\";\n\t\t\tthis.label6.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.label6.UseMnemonic = false;\n\t\t\t// \n\t\t\t// label5\n\t\t\t// \n\t\t\tthis.label5.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label5.Location = new System.Drawing.Point(166, 53);\n\t\t\tthis.label5.Name = \"label5\";\n\t\t\tthis.label5.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label5.TabIndex = 0;\n\t\t\tthis.label5.Text = \"Default: ^\";\n\t\t\tthis.label5.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label4\n\t\t\t// \n\t\t\tthis.label4.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label4.Location = new System.Drawing.Point(166, 33);\n\t\t\tthis.label4.Name = \"label4\";\n\t\t\tthis.label4.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label4.TabIndex = 0;\n\t\t\tthis.label4.Text = \"Default: ~\";\n\t\t\tthis.label4.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// label3\n\t\t\t// \n\t\t\tthis.label3.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label3.Location = new System.Drawing.Point(166, 13);\n\t\t\tthis.label3.Name = \"label3\";\n\t\t\tthis.label3.Size = new System.Drawing.Size(91, 18);\n\t\t\tthis.label3.TabIndex = 0;\n\t\t\tthis.label3.Text = \"Default: |\";\n\t\t\tthis.label3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\t// \n\t\t\t// textNote\n\t\t\t// \n\t\t\tthis.textNote.Location = new System.Drawing.Point(443, 184);\n\t\t\tthis.textNote.Multiline = true;\n\t\t\tthis.textNote.Name = \"textNote\";\n\t\t\tthis.textNote.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n\t\t\tthis.textNote.Size = new System.Drawing.Size(368, 40);\n\t\t\tthis.textNote.TabIndex = 62;\n\t\t\t// \n\t\t\t// labelOutAddrPortEx\n\t\t\t// \n\t\t\tthis.labelOutAddrPortEx.Location = new System.Drawing.Point(336, 39);\n\t\t\tthis.labelOutAddrPortEx.Name = \"labelOutAddrPortEx\";\n\t\t\tthis.labelOutAddrPortEx.Size = new System.Drawing.Size(182, 18);\n\t\t\tthis.labelOutAddrPortEx.TabIndex = 0;\n\t\t\tthis.labelOutAddrPortEx.Text = \"Ex: 192.168.0.23:5846\";\n\t\t\tthis.labelOutAddrPortEx.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.labelOutAddrPortEx.Visible = false;\n\t\t\t// \n\t\t\t// labelInAddrPortEx\n\t\t\t// \n\t\t\tthis.labelInAddrPortEx.Location = new System.Drawing.Point(336, 17);\n\t\t\tthis.labelInAddrPortEx.Name = \"labelInAddrPortEx\";\n\t\t\tthis.labelInAddrPortEx.Size = new System.Drawing.Size(182, 18);\n\t\t\tthis.labelInAddrPortEx.TabIndex = 0;\n\t\t\tthis.labelInAddrPortEx.Text = \"Ex: server.address.com:12345\";\n\t\t\tthis.labelInAddrPortEx.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n\t\t\tthis.labelInAddrPortEx.Visible = false;\n\t\t\t// \n\t\t\t// textInternalTypeVersion\n\t\t\t// \n\t\t\tthis.textInternalTypeVersion.Location = new System.Drawing.Point(155, 112);\n\t\t\tthis.textInternalTypeVersion.Name = \"textInternalTypeVersion\";\n\t\t\tthis.textInternalTypeVersion.ReadOnly = true;\n\t\t\tthis.textInternalTypeVersion.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textInternalTypeVersion.TabIndex = 44;\n\t\t\t// \n\t\t\t// label13\n\t\t\t// \n\t\t\tthis.label13.Location = new System.Drawing.Point(6, 113);\n\t\t\tthis.label13.Name = \"label13\";\n\t\t\tthis.label13.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label13.TabIndex = 0;\n\t\t\tthis.label13.Text = \"Internal Type Version\";\n\t\t\tthis.label13.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textInternalType\n\t\t\t// \n\t\t\tthis.textInternalType.Location = new System.Drawing.Point(155, 92);\n\t\t\tthis.textInternalType.Name = \"textInternalType\";\n\t\t\tthis.textInternalType.ReadOnly = true;\n\t\t\tthis.textInternalType.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textInternalType.TabIndex = 43;\n\t\t\t// \n\t\t\t// label14\n\t\t\t// \n\t\t\tthis.label14.Location = new System.Drawing.Point(6, 93);\n\t\t\tthis.label14.Name = \"label14\";\n\t\t\tthis.label14.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label14.TabIndex = 0;\n\t\t\tthis.label14.Text = \"Internal Type\";\n\t\t\tthis.label14.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// checkEnabled\n\t\t\t// \n\t\t\tthis.checkEnabled.Checked = true;\n\t\t\tthis.checkEnabled.CheckState = System.Windows.Forms.CheckState.Checked;\n\t\t\tthis.checkEnabled.FlatStyle = System.Windows.Forms.FlatStyle.System;\n\t\t\tthis.checkEnabled.Location = new System.Drawing.Point(6, 30);\n\t\t\tthis.checkEnabled.Name = \"checkEnabled\";\n\t\t\tthis.checkEnabled.RightToLeft = System.Windows.Forms.RightToLeft.Yes;\n\t\t\tthis.checkEnabled.Size = new System.Drawing.Size(162, 18);\n\t\t\tthis.checkEnabled.TabIndex = 40;\n\t\t\tthis.checkEnabled.Text = \"Enabled\";\n\t\t\tthis.checkEnabled.CheckedChanged += new System.EventHandler(this.checkEnabled_CheckedChanged);\n\t\t\tthis.checkEnabled.Click += new System.EventHandler(this.checkEnabled_Click);\n\t\t\t// \n\t\t\t// textEscChar\n\t\t\t// \n\t\t\tthis.textEscChar.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textEscChar.Location = new System.Drawing.Point(138, 92);\n\t\t\tthis.textEscChar.Name = \"textEscChar\";\n\t\t\tthis.textEscChar.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textEscChar.TabIndex = 49;\n\t\t\t// \n\t\t\t// label12\n\t\t\t// \n\t\t\tthis.label12.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label12.Location = new System.Drawing.Point(6, 93);\n\t\t\tthis.label12.Name = \"label12\";\n\t\t\tthis.label12.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label12.TabIndex = 0;\n\t\t\tthis.label12.Text = \"Escape\";\n\t\t\tthis.label12.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// checkInternal\n\t\t\t// \n\t\t\tthis.checkInternal.Enabled = false;\n\t\t\tthis.checkInternal.FlatStyle = System.Windows.Forms.FlatStyle.System;\n\t\t\tthis.checkInternal.Location = new System.Drawing.Point(6, 12);\n\t\t\tthis.checkInternal.Name = \"checkInternal\";\n\t\t\tthis.checkInternal.RightToLeft = System.Windows.Forms.RightToLeft.Yes;\n\t\t\tthis.checkInternal.Size = new System.Drawing.Size(162, 18);\n\t\t\tthis.checkInternal.TabIndex = 31;\n\t\t\tthis.checkInternal.TabStop = false;\n\t\t\tthis.checkInternal.Text = \"Internal\";\n\t\t\t// \n\t\t\t// label11\n\t\t\t// \n\t\t\tthis.label11.Location = new System.Drawing.Point(292, 185);\n\t\t\tthis.label11.Name = \"label11\";\n\t\t\tthis.label11.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.label11.TabIndex = 0;\n\t\t\tthis.label11.Text = \"Note\";\n\t\t\tthis.label11.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textSubcompSep\n\t\t\t// \n\t\t\tthis.textSubcompSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textSubcompSep.Location = new System.Drawing.Point(138, 72);\n\t\t\tthis.textSubcompSep.Name = \"textSubcompSep\";\n\t\t\tthis.textSubcompSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textSubcompSep.TabIndex = 48;\n\t\t\t// \n\t\t\t// label9\n\t\t\t// \n\t\t\tthis.label9.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label9.Location = new System.Drawing.Point(6, 73);\n\t\t\tthis.label9.Name = \"label9\";\n\t\t\tthis.label9.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label9.TabIndex = 0;\n\t\t\tthis.label9.Text = \"Subcomponent\";\n\t\t\tthis.label9.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textRepSep\n\t\t\t// \n\t\t\tthis.textRepSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textRepSep.Location = new System.Drawing.Point(138, 32);\n\t\t\tthis.textRepSep.Name = \"textRepSep\";\n\t\t\tthis.textRepSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textRepSep.TabIndex = 46;\n\t\t\t// \n\t\t\t// label10\n\t\t\t// \n\t\t\tthis.label10.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label10.Location = new System.Drawing.Point(6, 33);\n\t\t\tthis.label10.Name = \"label10\";\n\t\t\tthis.label10.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label10.TabIndex = 0;\n\t\t\tthis.label10.Text = \"Repetition\";\n\t\t\tthis.label10.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textCompSep\n\t\t\t// \n\t\t\tthis.textCompSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textCompSep.Location = new System.Drawing.Point(138, 52);\n\t\t\tthis.textCompSep.Name = \"textCompSep\";\n\t\t\tthis.textCompSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textCompSep.TabIndex = 47;\n\t\t\t// \n\t\t\t// label8\n\t\t\t// \n\t\t\tthis.label8.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label8.Location = new System.Drawing.Point(6, 53);\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label8.TabIndex = 0;\n\t\t\tthis.label8.Text = \"Component\";\n\t\t\tthis.label8.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textFieldSep\n\t\t\t// \n\t\t\tthis.textFieldSep.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.textFieldSep.Location = new System.Drawing.Point(138, 12);\n\t\t\tthis.textFieldSep.Name = \"textFieldSep\";\n\t\t\tthis.textFieldSep.Size = new System.Drawing.Size(27, 20);\n\t\t\tthis.textFieldSep.TabIndex = 45;\n\t\t\t// \n\t\t\t// label7\n\t\t\t// \n\t\t\tthis.label7.Anchor = System.Windows.Forms.AnchorStyles.Right;\n\t\t\tthis.label7.Location = new System.Drawing.Point(6, 13);\n\t\t\tthis.label7.Name = \"label7\";\n\t\t\tthis.label7.Size = new System.Drawing.Size(131, 18);\n\t\t\tthis.label7.TabIndex = 0;\n\t\t\tthis.label7.Text = \"Field\";\n\t\t\tthis.label7.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// comboModeTx\n\t\t\t// \n\t\t\tthis.comboModeTx.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;\n\t\t\tthis.comboModeTx.Location = new System.Drawing.Point(155, 71);\n\t\t\tthis.comboModeTx.MaxDropDownItems = 100;\n\t\t\tthis.comboModeTx.Name = \"comboModeTx\";\n\t\t\tthis.comboModeTx.Size = new System.Drawing.Size(125, 21);\n\t\t\tthis.comboModeTx.TabIndex = 42;\n\t\t\tthis.comboModeTx.SelectedIndexChanged += new System.EventHandler(this.comboModeTx_SelectedIndexChanged);\n\t\t\t// \n\t\t\t// textSftpPassword\n\t\t\t// \n\t\t\tthis.textSftpPassword.Location = new System.Drawing.Point(157, 78);\n\t\t\tthis.textSftpPassword.Name = \"textSftpPassword\";\n\t\t\tthis.textSftpPassword.PasswordChar = '*';\n\t\t\tthis.textSftpPassword.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textSftpPassword.TabIndex = 58;\n\t\t\t// \n\t\t\t// labelSftpPassword\n\t\t\t// \n\t\t\tthis.labelSftpPassword.Location = new System.Drawing.Point(6, 79);\n\t\t\tthis.labelSftpPassword.Name = \"labelSftpPassword\";\n\t\t\tthis.labelSftpPassword.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelSftpPassword.TabIndex = 0;\n\t\t\tthis.labelSftpPassword.Text = \"Sftp Password\";\n\t\t\tthis.labelSftpPassword.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textSftpUsername\n\t\t\t// \n\t\t\tthis.textSftpUsername.Location = new System.Drawing.Point(157, 58);\n\t\t\tthis.textSftpUsername.Name = \"textSftpUsername\";\n\t\t\tthis.textSftpUsername.Size = new System.Drawing.Size(125, 20);\n\t\t\tthis.textSftpUsername.TabIndex = 57;\n\t\t\t// \n\t\t\t// labelSftpUsername\n\t\t\t// \n\t\t\tthis.labelSftpUsername.Location = new System.Drawing.Point(6, 59);\n\t\t\tthis.labelSftpUsername.Name = \"labelSftpUsername\";\n\t\t\tthis.labelSftpUsername.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelSftpUsername.TabIndex = 0;\n\t\t\tthis.labelSftpUsername.Text = \"Sftp Username\";\n\t\t\tthis.labelSftpUsername.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textOutPathOrAddrPort\n\t\t\t// \n\t\t\tthis.textOutPathOrAddrPort.Location = new System.Drawing.Point(157, 38);\n\t\t\tthis.textOutPathOrAddrPort.Name = \"textOutPathOrAddrPort\";\n\t\t\tthis.textOutPathOrAddrPort.Size = new System.Drawing.Size(177, 20);\n\t\t\tthis.textOutPathOrAddrPort.TabIndex = 55;\n\t\t\t// \n\t\t\t// labelOutPathOrAddrPort\n\t\t\t// \n\t\t\tthis.labelOutPathOrAddrPort.Location = new System.Drawing.Point(6, 39);\n\t\t\tthis.labelOutPathOrAddrPort.Name = \"labelOutPathOrAddrPort\";\n\t\t\tthis.labelOutPathOrAddrPort.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelOutPathOrAddrPort.TabIndex = 0;\n\t\t\tthis.labelOutPathOrAddrPort.Text = \"Outgoing Folder\";\n\t\t\tthis.labelOutPathOrAddrPort.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// textInPathOrAddrPort\n\t\t\t// \n\t\t\tthis.textInPathOrAddrPort.Location = new System.Drawing.Point(157, 16);\n\t\t\tthis.textInPathOrAddrPort.Name = \"textInPathOrAddrPort\";\n\t\t\tthis.textInPathOrAddrPort.Size = new System.Drawing.Size(177, 20);\n\t\t\tthis.textInPathOrAddrPort.TabIndex = 53;\n\t\t\t// \n\t\t\t// labelInPathOrAddrPort\n\t\t\t// \n\t\t\tthis.labelInPathOrAddrPort.Location = new System.Drawing.Point(6, 17);\n\t\t\tthis.labelInPathOrAddrPort.Name = \"labelInPathOrAddrPort\";\n\t\t\tthis.labelInPathOrAddrPort.Size = new System.Drawing.Size(150, 18);\n\t\t\tthis.labelInPathOrAddrPort.TabIndex = 0;\n\t\t\tthis.labelInPathOrAddrPort.Text = \"Incoming Folder\";\n\t\t\tthis.labelInPathOrAddrPort.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// label2\n\t\t\t// \n\t\t\tthis.label2.Location = new System.Drawing.Point(6, 72);\n\t\t\tthis.label2.Name = \"label2\";\n\t\t\tthis.label2.Size = new System.Drawing.Size(148, 18);\n\t\t\tthis.label2.TabIndex = 0;\n\t\t\tthis.label2.Text = \"ModeTx\";\n\t\t\tthis.label2.TextAlign = System.Drawing.ContentAlignment.MiddleRight;\n\t\t\t// \n\t\t\t// label1\n\t\t\t// \n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "length": 1316, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "bcd0194211a51191ba420ba81d1fbd3578d39821783bd335"}
{"input": "", "context": "//\n// System.Web.Compilation.AspComponentFoundry\n//\n// Authors:\n//\tGonzalo Paniagua Javier (gonzalo@ximian.com)\n//\n// (C) 2002,2003 Ximian, Inc (http://www.ximian.com)\n//\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// \n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Reflection;\nusing System.Web;\nusing System.Web.Configuration;\nusing System.Web.UI;\nusing System.Web.Util;\nnamespace System.Web.Compilation\n{\n\tclass AspComponentFoundry\n\t{\n\t\tHashtable foundries;\n\t\tDictionary <string, AspComponent> components;\n\t\tDictionary <string, AspComponent> Components {\n\t\t\tget {\n\t\t\t\tif (components == null)\n\t\t\t\t\tcomponents = new Dictionary <string, AspComponent> (StringComparer.OrdinalIgnoreCase);\n\t\t\t\treturn components;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic AspComponentFoundry ()\n\t\t{\n\t\t\tfoundries = new Hashtable (StringComparer.InvariantCultureIgnoreCase);\n\t\t\tAssembly sw = typeof (AspComponentFoundry).Assembly;\n\t\t\tRegisterFoundry (\"asp\", sw, \"System.Web.UI.WebControls\");\n\t\t\tRegisterFoundry (\"\", \"object\", typeof (System.Web.UI.ObjectTag));\n\t\t\tRegisterConfigControls ();\n\t\t}\n\t\tpublic AspComponent GetComponent (string tagName)\n\t\t{\n\t\t\tif (tagName == null || tagName.Length == 0)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tif (components != null) {\n\t\t\t\tAspComponent ret;\n\t\t\t\tif (components.TryGetValue (tagName, out ret))\n\t\t\t\t\treturn ret;\n\t\t\t}\n\t\t\tstring foundryName, tag;\n\t\t\tint colon = tagName.IndexOf (':');\n\t\t\tif (colon > -1) {\n\t\t\t\tif (colon == 0)\n\t\t\t\t\tthrow new Exception (\"Empty TagPrefix is not valid.\");\n\t\t\t\tif (colon + 1 == tagName.Length)\n\t\t\t\t\treturn null;\n\t\t\t\tfoundryName = tagName.Substring (0, colon);\n\t\t\t\ttag = tagName.Substring (colon + 1);\n\t\t\t} else {\n\t\t\t\tfoundryName = String.Empty;\n\t\t\t\ttag = tagName;\n\t\t\t}\n\t\t\t\n\t\t\tobject o = foundries [foundryName];\t\t\t\n\t\t\tif (o == null)\n\t\t\t\treturn null;\n\t\t\tFoundry foundry = o as Foundry;\n\t\t\tif (foundry != null)\n\t\t\t\treturn CreateComponent (foundry, tagName, foundryName, tag);\n\t\t\t\n\t\t\tArrayList af = o as ArrayList;\n\t\t\tif (af == null)\n\t\t\t\treturn null;\n\t\t\tAspComponent component = null;\n\t\t\tException e = null;\n\t\t\tforeach (Foundry f in af) {\n\t\t\t\ttry {\n\t\t\t\t\tcomponent = CreateComponent (f, tagName, foundryName, tag);\n\t\t\t\t\tif (component != null)\n\t\t\t\t\t\treturn component;\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\te = ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (e != null)\n\t\t\t\tthrow e;\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t\tAspComponent CreateComponent (Foundry foundry, string tagName, string prefix, string tag)\n\t\t{\n\t\t\tstring source, ns;\n\t\t\tType type;\n\t\t\ttype = foundry.GetType (tag, out source, out ns);\n\t\t\tif (type == null)\n\t\t\t\treturn null;\n\t\t\t\n\t\t\tAspComponent ret = new AspComponent (type, ns, prefix, source, foundry.FromConfig);\n\t\t\tDictionary <string, AspComponent> components = Components;\n\t\t\tcomponents.Add (tagName, ret);\n\t\t\treturn ret;\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName, Assembly assembly, string nameSpace)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, assembly, nameSpace, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     Assembly assembly,\n\t\t\t\t\t     string nameSpace,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tAssemblyFoundry foundry = new AssemblyFoundry (assembly, nameSpace);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterFoundry (string foundryName, string tagName, Type type)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, tagName, type, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     string tagName,\n\t\t\t\t\t     Type type,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tTagNameFoundry foundry = new TagNameFoundry (tagName, type);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterFoundry (string foundryName, string tagName, string source)\n\t\t{\n\t\t\tRegisterFoundry (foundryName, tagName, source, false);\n\t\t}\n\t\t\n\t\tpublic void RegisterFoundry (string foundryName,\n\t\t\t\t\t     string tagName,\n\t\t\t\t\t     string source,\n\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tTagNameFoundry foundry = new TagNameFoundry (tagName, source);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\n\t\tpublic void RegisterAssemblyFoundry (string foundryName,\n\t\t\t\t\t\t     string assemblyName,\n\t\t\t\t\t\t     string nameSpace,\n\t\t\t\t\t\t     bool fromConfig)\n\t\t{\n\t\t\tAssemblyFoundry foundry = new AssemblyFoundry (assemblyName, nameSpace);\n\t\t\tfoundry.FromConfig = fromConfig;\n\t\t\tInternalRegister (foundryName, foundry, fromConfig);\n\t\t}\t\t\n\t\tvoid RegisterConfigControls ()\n\t\t{\n\t\t\tPagesSection pages = WebConfigurationManager.GetSection (\"system.web/pages\") as PagesSection;\n\t\t\tif (pages == null)\n\t\t\t\treturn;\n\t\t\tTagPrefixCollection controls = pages.Controls;\n\t\t\tif (controls == null || controls.Count == 0)\n\t\t\t\treturn;\n\t\t\t\n\t\t\tIList appCode = BuildManager.CodeAssemblies;\n\t\t\tbool haveCodeAssemblies = appCode != null && appCode.Count > 0;\n\t\t\tAssembly asm;\n\t\t\tforeach (TagPrefixInfo tpi in controls) {\n\t\t\t\tif (!String.IsNullOrEmpty (tpi.TagName))\n\t\t\t\t\tRegisterFoundry (tpi.TagPrefix, tpi.TagName, tpi.Source, true);\n\t\t\t\telse if (String.IsNullOrEmpty (tpi.Assembly)) {\n\t\t\t\t\tif (haveCodeAssemblies) {\n\t\t\t\t\t\tforeach (object o in appCode) {\n\t\t\t\t\t\t\tasm = o as Assembly;\n\t\t\t\t\t\t\tif (asm == null)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tRegisterFoundry (tpi.TagPrefix, asm, tpi.Namespace, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!String.IsNullOrEmpty (tpi.Namespace))\n\t\t\t\t\tRegisterAssemblyFoundry (tpi.TagPrefix,\n\t\t\t\t\t\t\t\t tpi.Assembly,\n\t\t\t\t\t\t\t\t tpi.Namespace,\n\t\t\t\t\t\t\t\t true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvoid InternalRegister (string foundryName, Foundry foundry, bool fromConfig)\n\t\t{\n\t\t\tobject f = foundries [foundryName];\n\t\t\tFoundry newFoundry = null;\n\t\t\t\n\t\t\tif (f is CompoundFoundry) {\n\t\t\t\t((CompoundFoundry) f).Add (foundry);\n\t\t\t\treturn;\n\t\t\t} else if (f == null || f is ArrayList || (f is AssemblyFoundry && foundry is AssemblyFoundry)) {\n\t\t\t\tnewFoundry = foundry;\n\t\t\t} else if (f != null) {\n\t\t\t\tCompoundFoundry compound = new CompoundFoundry (foundryName);\n\t\t\t\tcompound.Add ((Foundry) f);\n\t\t\t\tcompound.Add (foundry);\n\t\t\t\tnewFoundry = foundry;\n\t\t\t\tnewFoundry.FromConfig = fromConfig;\n\t\t\t}\n\t\t\tif (newFoundry == null)\n\t\t\t\treturn;\n\t\t\tif (f == null) {\n\t\t\t\tfoundries [foundryName] = newFoundry;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tArrayList af = f as ArrayList;\n\t\t\tif (af == null) {\n\t\t\t\taf = new ArrayList (2);\n\t\t\t\taf.Add (f);\n\t\t\t\tfoundries [foundryName] = af;\n\t\t\t}\n\t\t\tif (newFoundry is AssemblyFoundry) {\n\t\t\t\tobject o;\n\t\t\t\tfor (int i = 0; i < af.Count; i++) {\n\t\t\t\t\to = af [i];\n\t\t\t\t\tif (o is AssemblyFoundry) {\n\t\t\t\t\t\taf.Insert (i, newFoundry);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taf.Add (newFoundry);\n\t\t\t} else\n\t\t\t\taf.Insert (0, newFoundry);\n\t\t}\n\t\tpublic bool LookupFoundry (string foundryName)\n\t\t{\n\t\t\treturn foundries.Contains (foundryName);\n\t\t}\n\t\tabstract class Foundry\n\t\t{\n\t\t\tbool _fromConfig;\n\t\t\tpublic bool FromConfig {\n\t\t\t\tget { return _fromConfig; }\n\t\t\t\tset { _fromConfig = value; }\n\t\t\t}\n\t\t\t\n\t\t\tpublic abstract Type GetType (string componentName, out string source, out string ns);\n\t\t}\n\t\t\n\t\tclass TagNameFoundry : Foundry\n\t\t{\n\t\t\tstring tagName;\n\t\t\tType type;\n\t\t\tstring source;\n\t\t\tpublic bool FromWebConfig {\n\t\t\t\tget { return source != null; }\n\t\t\t}\n\t\t\t\n\t\t\tpublic TagNameFoundry (string tagName, string source)\n\t\t\t{\n\t\t\t\tthis.tagName = tagName;\n\t\t\t\tthis.source = source;\n\t\t\t}\n\t\t\t\n\t\t\tpublic TagNameFoundry (string tagName, Type type)\n\t\t\t{\n\t\t\t\tthis.tagName = tagName;\n\t\t\t\tthis.type = type;\n\t\t\t}\n\t\t\tpublic override Type GetType (string componentName, out string source, out string ns)\n\t\t\t{\n\t\t\t\tsource = null;\n\t\t\t\tns = null;\n\t\t\t\tif (0 != String.Compare (componentName, tagName, true, Helpers.InvariantCulture))\n\t\t\t\t\treturn null;\n\t\t\t\tsource = this.source;\n\t\t\t\treturn LoadType ();\n\t\t\t}\n\t\t\tType LoadType ()\n\t\t\t{\n\t\t\t\tif (type != null)\n\t\t\t\t\treturn type;\n\t\t\t\tHttpContext context = HttpContext.Current;\n\t\t\t\tstring vpath;\n\t\t\t\tstring realpath;\n\t\t\t\t\n\t\t\t\tif (VirtualPathUtility.IsAppRelative (source)) {\n\t\t\t\t\tvpath = source;\n\t\t\t\t\trealpath = context.Request.MapPath (source);\n\t\t\t\t} else {\n\t\t\t\t\tvpath = VirtualPathUtility.ToAppRelative (source);\n\t\t\t\t\trealpath = source;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((type = CachingCompiler.GetTypeFromCache (realpath)) != null)\n\t\t\t\t\treturn type;\t\t\t\t\n\t\t\t\ttype = BuildManager.GetCompiledType (vpath);\n\t\t\t\tif (type != null) {\n\t\t\t\t\tAspGenerator.AddTypeToCache (null, realpath, type);\n\t\t\t\t\tBuildManager.AddToReferencedAssemblies (type.Assembly);\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\t\n\t\t\tpublic string TagName {\n\t\t\t\tget { return tagName; }\n\t\t\t}\n\t\t}\n\t\tclass AssemblyFoundry : Foundry\n\t\t{\n\t\t\tstring nameSpace;\n\t\t\tAssembly assembly;\n\t\t\tstring assemblyName;\n\t\t\tDictionary <string, Assembly> assemblyCache;\n\t\t\t\n\t\t\tpublic AssemblyFoundry (Assembly assembly, string nameSpace)\n\t\t\t{\n\t\t\t\tthis.assembly = assembly;\n\t\t\t\tthis.nameSpace = nameSpace;\n\t\t\t\tif (assembly != null)\n\t\t\t\t\tthis.assemblyName = assembly.FullName;\n\t\t\t\telse\n\t\t\t\t\tthis.assemblyName = null;\n\t\t\t}\n\t\t\tpublic AssemblyFoundry (string assemblyName, string nameSpace)\n\t\t\t{\n\t\t\t\tthis.assembly = null;\n\t\t\t\tthis.nameSpace = nameSpace;\n\t\t\t\tthis.assemblyName = assemblyName;\n\t\t\t}\n\t\t\t\n\t\t\tpublic override Type GetType (string componentName, out string source, out string ns)\n\t\t\t{\n\t\t\t\tsource = null;\n\t\t\t\tns = nameSpace;\n\t\t\t\tif (assembly == null && assemblyName != null)\n\t\t\t\t\tassembly = GetAssemblyByName (assemblyName, true);\n\t\t\t\tstring typeName = String.Concat (nameSpace, \".\", componentName);\n\t\t\t\tif (assembly != null)\n\t\t\t\t\treturn assembly.GetType (typeName, false, true);\n\t\t\t\tIList tla = BuildManager.TopLevelAssemblies;\n\t\t\t\tif (tla != null && tla.Count > 0) {\n\t\t\t\t\tType ret = null;\n\t\t\t\t\tforeach (Assembly asm in tla) {\n\t\t\t\t\t\tif (asm == null)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tret = asm.GetType (typeName, false, true);\n\t\t\t\t\t\tif (ret != null)\n\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tAssembly GetAssemblyByName (string name, bool throwOnMissing)\n\t\t\t{\n\t\t\t\tif (assemblyCache == null)\n\t\t\t\t\tassemblyCache = new Dictionary <string, Assembly> ();\n\t\t\t\t\n\t\t\t\tif (assemblyCache.ContainsKey (name))\n\t\t\t\t\treturn assemblyCache [name];\n\t\t\t\t\n\t\t\t\tAssembly assembly = null;\n\t\t\t\tException error = null;\n\t\t\t\tif (name.IndexOf (',') != -1) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassembly = Assembly.Load (name);\n\t\t\t\t\t} catch (Exception e) { error = e; }\n\t\t\t\t}\n", "answers": ["\t\t\t\tif (assembly == null) {"], "length": 1336, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "c6886216f6449ef370d3a3478bd5092fbf6fd825bf157d43"}
{"input": "", "context": "#!/usr/bin/python\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\nDOCUMENTATION = '''\n---\nmodule: ce_link_status\nversion_added: \"2.4\"\nshort_description: Get interface link status on HUAWEI CloudEngine switches.\ndescription:\n    - Get interface link status on HUAWEI CloudEngine switches.\nauthor:\n    - Zhijin Zhou (@QijunPan)\nnotes:\n    - Current physical state shows an interface's physical status.\n    - Current link state shows an interface's link layer protocol status.\n    - Current IPv4 state shows an interface's IPv4 protocol status.\n    - Current IPv6 state shows an interface's  IPv6 protocol status.\n    - Inbound octets(bytes) shows the number of bytes that an interface received.\n    - Inbound unicast(pkts) shows the number of unicast packets that an interface received.\n    - Inbound multicast(pkts) shows the number of multicast packets that an interface received.\n    - Inbound broadcast(pkts) shows  the number of broadcast packets that an interface received.\n    - Inbound error(pkts) shows the number of error packets that an interface received.\n    - Inbound drop(pkts) shows the total number of packets that were sent to the interface but dropped by an interface.\n    - Inbound rate(byte/sec) shows the rate at which an interface receives bytes within an interval.\n    - Inbound rate(pkts/sec) shows the rate at which an interface receives packets within an interval.\n    - Outbound octets(bytes) shows the number of the bytes that an interface sent.\n    - Outbound unicast(pkts) shows  the number of unicast packets that an interface sent.\n    - Outbound multicast(pkts) shows the number of multicast packets that an interface sent.\n    - Outbound broadcast(pkts) shows the number of broadcast packets that an interface sent.\n    - Outbound error(pkts) shows the total number of packets that an interface sent but dropped by the remote interface.\n    - Outbound drop(pkts) shows the number of dropped packets that an interface sent.\n    - Outbound rate(byte/sec) shows the rate at which an interface sends bytes within an interval.\n    - Outbound rate(pkts/sec) shows the rate at which an interface sends packets within an interval.\n    - Speed shows the rate for an Ethernet interface.\noptions:\n    interface:\n        description:\n            - For the interface parameter, you can enter C(all) to display information about all interface,\n              an interface type such as C(40GE) to display information about interfaces of the specified type,\n              or full name of an interface such as C(40GE1/0/22) or C(vlanif10)\n              to display information about the specific interface.\n        required: true\n'''\nEXAMPLES = '''\n- name: Link status test\n  hosts: cloudengine\n  connection: local\n  gather_facts: no\n  vars:\n    cli:\n      host: \"{{ inventory_hostname }}\"\n      port: \"{{ ansible_ssh_port }}\"\n      username: \"{{ username }}\"\n      password: \"{{ password }}\"\n      transport: cli\n  tasks:\n  - name: Get specified interface link status information\n    ce_link_status:\n      interface: 40GE1/0/1\n      provider: \"{{ cli }}\"\n  - name: Get specified interface type link status information\n    ce_link_status:\n      interface: 40GE\n      provider: \"{{ cli }}\"\n  - name: Get all interface link status information\n    ce_link_status:\n      interface: all\n      provider: \"{{ cli }}\"\n'''\nRETURN = '''\nresult:\n    description: Interface link status information\n    returned: always\n    type: dict\n    sample: {\n                \"40ge2/0/8\": {\n                    \"Current IPv4 state\": \"down\",\n                    \"Current IPv6 state\": \"down\",\n                    \"Current link state\": \"up\",\n                    \"Current physical state\": \"up\",\n                    \"Inbound broadcast(pkts)\": \"0\",\n                    \"Inbound drop(pkts)\": \"0\",\n                    \"Inbound error(pkts)\": \"0\",\n                    \"Inbound multicast(pkts)\": \"20151\",\n                    \"Inbound octets(bytes)\": \"7314813\",\n                    \"Inbound rate(byte/sec)\": \"11\",\n                    \"Inbound rate(pkts/sec)\": \"0\",\n                    \"Inbound unicast(pkts)\": \"0\",\n                    \"Outbound broadcast(pkts)\": \"1\",\n                    \"Outbound drop(pkts)\": \"0\",\n                    \"Outbound error(pkts)\": \"0\",\n                    \"Outbound multicast(pkts)\": \"20152\",\n                    \"Outbound octets(bytes)\": \"7235021\",\n                    \"Outbound rate(byte/sec)\": \"11\",\n                    \"Outbound rate(pkts/sec)\": \"0\",\n                    \"Outbound unicast(pkts)\": \"0\",\n                    \"Speed\": \"40GE\"\n                }\n            }\n'''\nfrom xml.etree import ElementTree\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.cloudengine.ce import ce_argument_spec, get_nc_config\nCE_NC_GET_PORT_SPEED = \"\"\"\n<filter type=\"subtree\">\n  <devm xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n    <ports>\n      <port>\n        <position>%s</position>\n        <ethernetPort>\n          <speed></speed>\n        </ethernetPort>\n      </port>\n    </ports>\n  </devm>\n</filter>\n\"\"\"\nCE_NC_GET_INT_STATISTICS = \"\"\"\n<filter type=\"subtree\">\n  <ifm xmlns=\"http://www.huawei.com/netconf/vrp\" content-version=\"1.0\" format-version=\"1.0\">\n    <interfaces>\n      <interface>\n        <ifName>%s</ifName>\n        <ifDynamicInfo>\n          <ifPhyStatus></ifPhyStatus>\n          <ifLinkStatus></ifLinkStatus>\n          <ifV4State></ifV4State>\n          <ifV6State></ifV6State>\n        </ifDynamicInfo>\n        <ifStatistics>\n          <receiveByte></receiveByte>\n          <sendByte></sendByte>\n          <rcvUniPacket></rcvUniPacket>\n          <rcvMutiPacket></rcvMutiPacket>\n          <rcvBroadPacket></rcvBroadPacket>\n          <sendUniPacket></sendUniPacket>\n          <sendMutiPacket></sendMutiPacket>\n          <sendBroadPacket></sendBroadPacket>\n          <rcvErrorPacket></rcvErrorPacket>\n          <rcvDropPacket></rcvDropPacket>\n          <sendErrorPacket></sendErrorPacket>\n          <sendDropPacket></sendDropPacket>\n        </ifStatistics>\n        <ifClearedStat>\n          <inByteRate></inByteRate>\n          <inPacketRate></inPacketRate>\n          <outByteRate></outByteRate>\n          <outPacketRate></outPacketRate>\n        </ifClearedStat>\n      </interface>\n    </interfaces>\n  </ifm>\n</filter>\n\"\"\"\nINTERFACE_ALL = 1\nINTERFACE_TYPE = 2\nINTERFACE_FULL_NAME = 3\ndef get_interface_type(interface):\n    \"\"\"Gets the type of interface, such as 10GE, ETH-TRUNK, VLANIF...\"\"\"\n    if interface is None:\n        return None\n    iftype = None\n    if interface.upper().startswith('GE'):\n        iftype = 'ge'\n    elif interface.upper().startswith('10GE'):\n        iftype = '10ge'\n    elif interface.upper().startswith('25GE'):\n        iftype = '25ge'\n    elif interface.upper().startswith('4X10GE'):\n        iftype = '4x10ge'\n    elif interface.upper().startswith('40GE'):\n        iftype = '40ge'\n    elif interface.upper().startswith('100GE'):\n        iftype = '100ge'\n    elif interface.upper().startswith('VLANIF'):\n        iftype = 'vlanif'\n    elif interface.upper().startswith('LOOPBACK'):\n        iftype = 'loopback'\n    elif interface.upper().startswith('METH'):\n        iftype = 'meth'\n    elif interface.upper().startswith('ETH-TRUNK'):\n        iftype = 'eth-trunk'\n    elif interface.upper().startswith('VBDIF'):\n        iftype = 'vbdif'\n    elif interface.upper().startswith('NVE'):\n        iftype = 'nve'\n    elif interface.upper().startswith('TUNNEL'):\n        iftype = 'tunnel'\n    elif interface.upper().startswith('ETHERNET'):\n        iftype = 'ethernet'\n    elif interface.upper().startswith('FCOE-PORT'):\n        iftype = 'fcoe-port'\n    elif interface.upper().startswith('FABRIC-PORT'):\n        iftype = 'fabric-port'\n    elif interface.upper().startswith('STACK-PORT'):\n        iftype = 'stack-Port'\n    elif interface.upper().startswith('NULL'):\n        iftype = 'null'\n    else:\n        return None\n    return iftype.lower()\ndef is_ethernet_port(interface):\n    \"\"\"Judge whether it is ethernet port\"\"\"\n    ethernet_port = ['ge', '10ge', '25ge', '4x10ge', '40ge', '100ge', 'meth']\n    if_type = get_interface_type(interface)\n    if if_type in ethernet_port:\n        return True\n    return False\nclass LinkStatus(object):\n    \"\"\"Get interface link status information\"\"\"\n    def __init__(self, argument_spec):\n        self.spec = argument_spec\n        self.module = None\n        self.init_module()\n        # interface name\n        self.interface = self.module.params['interface']\n        self.interface = self.interface.replace(' ', '').lower()\n        self.param_type = None\n        self.if_type = None\n        # state\n        self.results = dict()\n        self.result = dict()\n    def check_params(self):\n        \"\"\"Check all input params\"\"\"\n        if not self.interface:\n            self.module.fail_json(msg='Error: Interface name cannot be empty.')\n        if self.interface and self.interface != 'all':\n            if not self.if_type:\n                self.module.fail_json(\n                    msg='Error: Interface name of %s is error.' % self.interface)\n    def init_module(self):\n        \"\"\"Init module object\"\"\"\n        self.module = AnsibleModule(\n            argument_spec=self.spec, supports_check_mode=True)\n    def show_result(self):\n        \"\"\"Show result\"\"\"\n        self.results['result'] = self.result\n        self.module.exit_json(**self.results)\n    def get_intf_dynamic_info(self, dyn_info, intf_name):\n        \"\"\"Get interface dynamic information\"\"\"\n        if not intf_name:\n            return\n        if dyn_info:\n            for eles in dyn_info:\n                if eles.tag in [\"ifPhyStatus\", \"ifV4State\", \"ifV6State\", \"ifLinkStatus\"]:\n                    if eles.tag == \"ifPhyStatus\":\n                        self.result[intf_name][\n                            'Current physical state'] = eles.text\n                    elif eles.tag == \"ifLinkStatus\":\n                        self.result[intf_name][\n                            'Current link state'] = eles.text\n                    elif eles.tag == \"ifV4State\":\n                        self.result[intf_name][\n                            'Current IPv4 state'] = eles.text\n                    elif eles.tag == \"ifV6State\":\n                        self.result[intf_name][\n                            'Current IPv6 state'] = eles.text\n    def get_intf_statistics_info(self, stat_info, intf_name):\n        \"\"\"Get interface statistics information\"\"\"\n        if not intf_name:\n            return\n        if_type = get_interface_type(intf_name)\n        if if_type == 'fcoe-port' or if_type == 'nve' or if_type == 'tunnel' or \\\n                if_type == 'vbdif' or if_type == 'vlanif':\n            return\n        if stat_info:\n            for eles in stat_info:\n                if eles.tag in [\"receiveByte\", \"sendByte\", \"rcvUniPacket\", \"rcvMutiPacket\", \"rcvBroadPacket\",\n                                \"sendUniPacket\", \"sendMutiPacket\", \"sendBroadPacket\", \"rcvErrorPacket\",\n                                \"rcvDropPacket\", \"sendErrorPacket\", \"sendDropPacket\"]:\n                    if eles.tag == \"receiveByte\":\n                        self.result[intf_name][\n                            'Inbound octets(bytes)'] = eles.text\n                    elif eles.tag == \"rcvUniPacket\":\n                        self.result[intf_name][\n                            'Inbound unicast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvMutiPacket\":\n                        self.result[intf_name][\n                            'Inbound multicast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvBroadPacket\":\n                        self.result[intf_name][\n                            'Inbound broadcast(pkts)'] = eles.text\n                    elif eles.tag == \"rcvErrorPacket\":\n                        self.result[intf_name][\n                            'Inbound error(pkts)'] = eles.text\n                    elif eles.tag == \"rcvDropPacket\":\n                        self.result[intf_name][\n                            'Inbound drop(pkts)'] = eles.text\n                    elif eles.tag == \"sendByte\":\n                        self.result[intf_name][\n                            'Outbound octets(bytes)'] = eles.text\n                    elif eles.tag == \"sendUniPacket\":\n                        self.result[intf_name][\n                            'Outbound unicast(pkts)'] = eles.text\n                    elif eles.tag == \"sendMutiPacket\":\n                        self.result[intf_name][\n                            'Outbound multicast(pkts)'] = eles.text\n                    elif eles.tag == \"sendBroadPacket\":\n                        self.result[intf_name][\n                            'Outbound broadcast(pkts)'] = eles.text\n                    elif eles.tag == \"sendErrorPacket\":\n                        self.result[intf_name][\n                            'Outbound error(pkts)'] = eles.text\n                    elif eles.tag == \"sendDropPacket\":\n                        self.result[intf_name][\n                            'Outbound drop(pkts)'] = eles.text\n    def get_intf_cleared_stat(self, clr_stat, intf_name):\n        \"\"\"Get interface cleared state information\"\"\"\n        if not intf_name:\n            return\n        if_type = get_interface_type(intf_name)\n        if if_type == 'fcoe-port' or if_type == 'nve' or if_type == 'tunnel' or \\\n                if_type == 'vbdif' or if_type == 'vlanif':\n            return\n        if clr_stat:\n            for eles in clr_stat:\n                if eles.tag in [\"inByteRate\", \"inPacketRate\", \"outByteRate\", \"outPacketRate\"]:\n                    if eles.tag == \"inByteRate\":\n                        self.result[intf_name][\n                            'Inbound rate(byte/sec)'] = eles.text\n                    elif eles.tag == \"inPacketRate\":\n                        self.result[intf_name][\n                            'Inbound rate(pkts/sec)'] = eles.text\n                    elif eles.tag == \"outByteRate\":\n                        self.result[intf_name][\n                            'Outbound rate(byte/sec)'] = eles.text\n                    elif eles.tag == \"outPacketRate\":\n                        self.result[intf_name][\n                            'Outbound rate(pkts/sec)'] = eles.text\n    def get_all_interface_info(self, intf_type=None):\n        \"\"\"Get interface information all or by interface type\"\"\"\n        xml_str = CE_NC_GET_INT_STATISTICS % ''\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        intfs_info = root.find(\"data/ifm/interfaces\")\n        if not intfs_info:\n            return\n        intf_name = ''\n        flag = False\n        for eles in intfs_info:\n            if eles.tag == \"interface\":\n                for ele in eles:\n                    if ele.tag in [\"ifName\", \"ifDynamicInfo\", \"ifStatistics\", \"ifClearedStat\"]:\n                        if ele.tag == \"ifName\":\n                            intf_name = ele.text.lower()\n                            if intf_type:\n                                if get_interface_type(intf_name) != intf_type.lower():\n                                    break\n                                else:\n                                    flag = True\n                            self.init_interface_data(intf_name)\n                            if is_ethernet_port(intf_name):\n                                self.get_port_info(intf_name)\n                        if ele.tag == \"ifDynamicInfo\":\n                            self.get_intf_dynamic_info(ele, intf_name)\n                        elif ele.tag == \"ifStatistics\":\n                            self.get_intf_statistics_info(ele, intf_name)\n                        elif ele.tag == \"ifClearedStat\":\n                            self.get_intf_cleared_stat(ele, intf_name)\n        if intf_type and not flag:\n            self.module.fail_json(\n                msg='Error: %s interface type does not exist.' % intf_type.upper())\n    def get_interface_info(self):\n        \"\"\"Get interface information\"\"\"\n        xml_str = CE_NC_GET_INT_STATISTICS % self.interface.upper()\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            self.module.fail_json(\n                msg='Error: %s interface does not exist.' % self.interface.upper())\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        intf_info = root.find(\"data/ifm/interfaces/interface\")\n        if intf_info:\n            for eles in intf_info:\n                if eles.tag in [\"ifDynamicInfo\", \"ifStatistics\", \"ifClearedStat\"]:\n                    if eles.tag == \"ifDynamicInfo\":\n                        self.get_intf_dynamic_info(eles, self.interface)\n                    elif eles.tag == \"ifStatistics\":\n                        self.get_intf_statistics_info(eles, self.interface)\n                    elif eles.tag == \"ifClearedStat\":\n                        self.get_intf_cleared_stat(eles, self.interface)\n    def init_interface_data(self, intf_name):\n        \"\"\"Init interface data\"\"\"\n        # init link status data\n        self.result[intf_name] = dict()\n        self.result[intf_name]['Current physical state'] = 'down'\n        self.result[intf_name]['Current link state'] = 'down'\n        self.result[intf_name]['Current IPv4 state'] = 'down'\n        self.result[intf_name]['Current IPv6 state'] = 'down'\n        self.result[intf_name]['Inbound octets(bytes)'] = '--'\n        self.result[intf_name]['Inbound unicast(pkts)'] = '--'\n        self.result[intf_name]['Inbound multicast(pkts)'] = '--'\n        self.result[intf_name]['Inbound broadcast(pkts)'] = '--'\n        self.result[intf_name]['Inbound error(pkts)'] = '--'\n        self.result[intf_name]['Inbound drop(pkts)'] = '--'\n        self.result[intf_name]['Inbound rate(byte/sec)'] = '--'\n        self.result[intf_name]['Inbound rate(pkts/sec)'] = '--'\n        self.result[intf_name]['Outbound octets(bytes)'] = '--'\n        self.result[intf_name]['Outbound unicast(pkts)'] = '--'\n        self.result[intf_name]['Outbound multicast(pkts)'] = '--'\n        self.result[intf_name]['Outbound broadcast(pkts)'] = '--'\n        self.result[intf_name]['Outbound error(pkts)'] = '--'\n        self.result[intf_name]['Outbound drop(pkts)'] = '--'\n        self.result[intf_name]['Outbound rate(byte/sec)'] = '--'\n        self.result[intf_name]['Outbound rate(pkts/sec)'] = '--'\n        self.result[intf_name]['Speed'] = '--'\n    def get_port_info(self, interface):\n        \"\"\"Get port information\"\"\"\n        if_type = get_interface_type(interface)\n        if if_type == 'meth':\n            xml_str = CE_NC_GET_PORT_SPEED % interface.lower().replace('meth', 'MEth')\n        else:\n            xml_str = CE_NC_GET_PORT_SPEED % interface.upper()\n        con_obj = get_nc_config(self.module, xml_str)\n        if \"<data/>\" in con_obj:\n            return\n        xml_str = con_obj.replace('\\r', '').replace('\\n', '').\\\n            replace('xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"', \"\").\\\n            replace('xmlns=\"http://www.huawei.com/netconf/vrp\"', \"\")\n        # get link status information\n        root = ElementTree.fromstring(xml_str)\n        port_info = root.find(\"data/devm/ports/port\")\n        if port_info:\n            for eles in port_info:\n                if eles.tag == \"ethernetPort\":\n                    for ele in eles:\n                        if ele.tag == 'speed':\n                            self.result[interface]['Speed'] = ele.text\n    def get_link_status(self):\n        \"\"\"Get link status information\"\"\"\n        if self.param_type == INTERFACE_FULL_NAME:\n            self.init_interface_data(self.interface)\n            self.get_interface_info()\n            if is_ethernet_port(self.interface):\n                self.get_port_info(self.interface)\n        elif self.param_type == INTERFACE_TYPE:\n            self.get_all_interface_info(self.interface)\n        else:\n            self.get_all_interface_info()\n    def get_intf_param_type(self):\n        \"\"\"Get the type of input interface parameter\"\"\"\n", "answers": ["        if self.interface == 'all':"], "length": 1718, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "ac75f42af7295a6d31f508d44bcc5ac42fd665147ac86554"}
{"input": "", "context": "/**\n * ***************************************************************************** Copyright (c) 2004,\n * 2006 Subclipse project and others. All rights reserved. This program and the accompanying\n * materials are made available under the terms of the Eclipse Public License v1.0 which accompanies\n * this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html\n *\n * <p>Contributors: Subclipse project committers - initial API and implementation\n * ****************************************************************************\n */\npackage org.tigris.subversion.subclipse.ui.settings;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.eclipse.core.resources.IResource;\nimport org.tigris.subversion.subclipse.core.ISVNLocalResource;\nimport org.tigris.subversion.subclipse.core.ISVNRemoteResource;\nimport org.tigris.subversion.subclipse.core.SVNException;\nimport org.tigris.subversion.subclipse.core.resources.SVNWorkspaceRoot;\nimport org.tigris.subversion.subclipse.ui.Policy;\nimport org.tigris.subversion.subclipse.ui.util.LinkList;\nimport org.tigris.subversion.svnclientadapter.ISVNProperty;\nimport org.tigris.subversion.svnclientadapter.SVNUrl;\npublic class ProjectProperties {\n  protected String label = \"Issue Number:\"; // $NON-NLS-1$\n  protected String message;\n  protected boolean number = false;\n  protected String url;\n  protected boolean warnIfNoIssue = false;\n  protected boolean append = true;\n  protected String logregex;\n  private static final String URL = \"://\"; // $NON-NLS-1$\n  private static final List<String> propertyFilterList = new ArrayList<String>();\n  static {\n    propertyFilterList.add(\"bugtraq:message\");\n    propertyFilterList.add(\"bugtraq:label\");\n    propertyFilterList.add(\"bugtraq:url\");\n    propertyFilterList.add(\"bugtraq:number\");\n    propertyFilterList.add(\"bugtraq:warnifnoissue\");\n    propertyFilterList.add(\"bugtraq:append\");\n    propertyFilterList.add(\"bugtraq:logregex\");\n  }\n  public ProjectProperties() {\n    super();\n  }\n  public boolean isAppend() {\n    return append;\n  }\n  public void setAppend(boolean append) {\n    this.append = append;\n  }\n  public String getLabel() {\n    return label;\n  }\n  public void setLabel(String label) {\n    this.label = label;\n  }\n  public String getMessage() {\n    return message;\n  }\n  public void setMessage(String message) {\n    this.message = message;\n  }\n  public boolean isNumber() {\n    return number;\n  }\n  public void setNumber(boolean number) {\n    this.number = number;\n  }\n  public String getUrl() {\n    return url;\n  }\n  public void setUrl(String url) {\n    this.url = url;\n  }\n  public boolean isWarnIfNoIssue() {\n    return warnIfNoIssue;\n  }\n  public void setWarnIfNoIssue(boolean warnIfNoIssue) {\n    this.warnIfNoIssue = warnIfNoIssue;\n  }\n  public String getLogregex() {\n    return logregex;\n  }\n  public void setLogregex(String logregex) {\n    this.logregex = logregex;\n  }\n  public String getResolvedMessage(String issue) {\n    if (message == null || issue == null) return null;\n    return message.replace(\"%BUGID%\", issue); // $NON-NLS-1$\n  }\n  public String getResolvedUrl(String issue) {\n    if (url == null || issue == null) return null;\n    return url.replace(\"%BUGID%\", issue); // $NON-NLS-1$\n  }\n  // Retrieve hyperlink ranges and url's from commit message.\n  public LinkList getLinkList(String commitMessage) {\n    ArrayList links = new ArrayList();\n    ArrayList urls = new ArrayList();\n    ArrayList texts = new ArrayList();\n    String bugID = \"%BUGID%\"; // $NON-NLS-1$\n    if (logregex != null) {\n      String[] resplit = logregex.split(\"\\n\");\n      String re1 = resplit[0].trim();\n      String re2 = resplit.length > 1 ? resplit[1].trim() : null;\n      Pattern pre1 = Pattern.compile(re1);\n      Matcher matcher1 = pre1.matcher(commitMessage);\n      if (re2 == null) {\n        while (matcher1.find()) {\n          for (int i = 0; i < matcher1.groupCount(); i++) {\n            int range[] = {matcher1.start(i + 1), matcher1.end(i + 1) - matcher1.start(i + 1)};\n            String url = getResolvedUrl(matcher1.group(i + 1));\n            if ((url != null) && (url.trim().length() > 0)) {\n              links.add(range);\n              urls.add(url);\n              texts.add(matcher1.group(i + 1));\n            }\n          }\n        }\n      } else {\n        Pattern pre2 = Pattern.compile(re2);\n        while (matcher1.find()) {\n          Matcher matcher2 = pre2.matcher(matcher1.group());\n          while (matcher2.find()) {\n            for (int i = 0; i < matcher2.groupCount(); i++) {\n              int range[] = {\n                matcher2.start(i + 1) + matcher1.start(),\n                matcher2.end(i + 1) - matcher2.start(i + 1)\n              };\n              String url = getResolvedUrl(matcher2.group(i + 1));\n              if ((url != null) && (url.trim().length() > 0)) {\n                links.add(range);\n                urls.add(url);\n                texts.add(matcher2.group(i + 1));\n              }\n            }\n          }\n        }\n      }\n    } else if (message != null) {\n      int index = message.indexOf(bugID);\n      if (index != -1) {\n        String remainder = null;\n        if (message.length() > index + bugID.length())\n          remainder = message.substring(index + bugID.length());\n        else remainder = \"\";\n        String tag = message.substring(0, index);\n        index = commitMessage.indexOf(tag);\n        if (index != -1) {\n          index = index + tag.length();\n          int start = index;\n          StringBuffer issue = new StringBuffer();\n          while (index < commitMessage.length()) {\n            if (commitMessage.substring(index, index + 1).equals(\",\")) { // $NON-NLS-1$\n              int range[] = {start, issue.length()};\n              String url = getResolvedUrl(issue.toString());\n              if ((url != null) && (url.trim().length() > 0)) {\n                links.add(range);\n                urls.add(url);\n              }\n              start = index + 1;\n              issue = new StringBuffer();\n            } else {\n              if (commitMessage.substring(index, index + 1).equals(\"\\n\")\n                  || commitMessage.substring(index, index + 1).equals(\"\\r\"))\n                break; //$NON-NLS-1$ //$NON-NLS-2$\n              if (commitMessage.substring(index).trim().equals(remainder.trim())) break;\n              if (commitMessage.substring(index).startsWith(remainder + \"\\n\")) break;\n              if (commitMessage.substring(index, index + 1).equals(\" \")) {\n                int lineIndex = commitMessage.indexOf(\"\\n\", index);\n                if (lineIndex == -1) lineIndex = commitMessage.indexOf(\"\\r\", index);\n                if (lineIndex != -1) {\n                  if (commitMessage.substring(index, lineIndex - 1).trim().length() == 0) break;\n                }\n              }\n              issue.append(commitMessage.substring(index, index + 1));\n            }\n            index++;\n          }\n          int range[] = {start, issue.length()};\n          String url = getResolvedUrl(issue.toString());\n          if ((url != null) && (url.trim().length() > 0)) {\n            links.add(range);\n            urls.add(url);\n            texts.add(issue.toString());\n          }\n        }\n      }\n    }\n    LinkList urlLinks = getUrls(commitMessage);\n    int[][] urlRanges = urlLinks.getLinkRanges();\n    String[] urlUrls = urlLinks.getUrls();\n    for (int i = 0; i < urlRanges.length; i++) {\n      links.add(urlRanges[i]);\n      urls.add(urlUrls[i]);\n    }\n    int[][] linkRanges = new int[links.size()][2];\n    links.toArray(linkRanges);\n    String[] urlArray = new String[urls.size()];\n    urls.toArray(urlArray);\n    String[] textArray = new String[texts.size()];\n    texts.toArray(textArray);\n    LinkList linkList = new LinkList(linkRanges, urlArray, textArray);\n    return linkList;\n  }\n  public static LinkList getUrls(String s) {\n    int max = 0;\n    int i = -1;\n    if (s != null) {\n      max = s.length();\n      i = s.indexOf(URL);\n    }\n    ArrayList linkRanges = new ArrayList();\n    ArrayList links = new ArrayList();\n    while (i != -1) {\n      while (i != -1) {\n        if (Character.isWhitespace(s.charAt(i))\n            || s.substring(i, i + 1).equals(\"\\n\")) { // $NON-NLS-1$\n          i++;\n          break;\n        }\n        i--;\n      }\n      int start = (i < 0) ? 0 : i;\n      // look for the first whitespace character\n      boolean found = false;\n      i += URL.length();\n      while (!found && i < max) {\n        found =\n            (Character.isWhitespace(s.charAt(i))\n                || s.substring(i, i + 1).equals(\"\\n\")); // $NON-NLS-1$\n        i++;\n      }\n      if (i != max) i--;\n      linkRanges.add(new int[] {start, i - start});\n      links.add(s.substring(start, i));\n      i = s.indexOf(URL, i);\n    }\n    return new LinkList(\n        (int[][]) linkRanges.toArray(new int[linkRanges.size()][2]),\n        (String[]) links.toArray(new String[links.size()]),\n        null);\n  }\n  // Return error message if there are any problems with the issue that was entered.\n  public String validateIssue(String issue) {\n    if (number) {\n      if (!hasOnlyDigits(issue)) return Policy.bind(\"CommitDialog.number\", label); // $NON-NLS-1$\n    }\n    return null;\n  }\n  // Helper method to test for all numerics and commas.\n  private boolean hasOnlyDigits(String s) {\n", "answers": ["    for (int i = 0; i < s.length(); i++)"], "length": 939, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e7f7901dba75ce27695abf8291df5b472f155e4b7cf57569"}
{"input": "", "context": "#region AuthorHeader\n//\n//\tAuction version 2.1, by Xanthos and Arya\n//\n//  Based on original ideas and code by Arya\n//\n#endregion AuthorHeader\nusing System;\nusing System.IO;\nusing Server;\nnamespace Arya.Auction\n{\n\t/// <summary>\n\t/// Summary description for AuctionLog.\n\t/// </summary>\n\tpublic class AuctionLog\n\t{\n\t\tprivate static StreamWriter m_Writer;\n\t\tprivate static bool m_Enabled = false;\n\t\tpublic static void Initialize()\n\t\t{\n\t\t\tif ( AuctionSystem.Running && AuctionConfig.EnableLogging )\n\t\t\t{\n\t\t\t\t// Create the log writer\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tstring folder = Path.Combine( Core.BaseDirectory, @\"Logs\\Auction\" );\n\t\t\t\t\tif ( ! Directory.Exists( folder ) )\n\t\t\t\t\t\tDirectory.CreateDirectory( folder );\n\t\t\t\t\tstring name = string.Format( \"{0}.txt\", DateTime.UtcNow.ToLongDateString() );\n\t\t\t\t\tstring file = Path.Combine( folder, name );\n\t\t\t\t\tm_Writer = new StreamWriter( file, true );\n\t\t\t\t\tm_Writer.AutoFlush = true;\n\t\t\t\t\tm_Writer.WriteLine( \"###############################\" );\n\t\t\t\t\tm_Writer.WriteLine( \"# {0} - {1}\", DateTime.UtcNow.ToShortDateString(), DateTime.UtcNow.ToShortTimeString() );\n\t\t\t\t\tm_Writer.WriteLine();\n\t\t\t\t\t\n\t\t\t\t\tm_Enabled = true;\n\t\t\t\t}\n\t\t\t\tcatch ( Exception err )\n\t\t\t\t{\n\t\t\t\t\tConsole.WriteLine( \"Couldn't initialize auction system log. Reason:\" );\n\t\t\t\t\tConsole.WriteLine( err.ToString() );\n\t\t\t\t\tm_Enabled = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records the creation of a new auction item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The new auction</param>\n\t\tpublic static void WriteNewAuction( AuctionItem auction )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"## New Auction : {0}\", auction.ID );\n\t\t\t\tm_Writer.WriteLine( \"# {0}\", auction.ItemName );\n\t\t\t\tm_Writer.WriteLine( \"# Created on {0} at {1}\", DateTime.UtcNow.ToShortDateString(), DateTime.UtcNow.ToShortTimeString() );\n\t\t\t\tm_Writer.WriteLine( \"# Owner : {0} [{1}] Account: {2}\", auction.Owner.Name, auction.Owner.Serial.ToString(), auction.Account.Username );\n\t\t\t\tm_Writer.WriteLine( \"# Expires on {0} at {1}\", auction.EndTime.ToShortDateString(), auction.EndTime.ToShortTimeString() );\n\t\t\t\tm_Writer.WriteLine( \"# Starting Bid: {0}. Reserve: {1}. Buy Now: {2}\",\n\t\t\t\t\tauction.MinBid, auction.Reserve, auction.AllowBuyNow ? auction.BuyNow.ToString() : \"Disabled\" );\n\t\t\t\tm_Writer.WriteLine( \"# Owner Description : {0}\", auction.Description );\n\t\t\t\tm_Writer.WriteLine( \"# Web Link : {0}\", auction.WebLink != null ? auction.WebLink : \"N/A\" );\n\t\t\t\n\t\t\t\tif ( auction.Creature )\n\t\t\t\t{\n\t\t\t\t\t// Selling a pet\n\t\t\t\t\tm_Writer.WriteLine( \"#### Selling 1 Creature\" );\n\t\t\t\t\tm_Writer.WriteLine( \"# Type : {0}. Serial : {1}. Name : {2} Hue : {3}\", auction.Pet.GetType().Name, auction.Pet.Serial.ToString(), auction.Pet.Name != null ? auction.Pet.Name : \"Unnamed\", auction.Pet.Hue );\n\t\t\t\t\tm_Writer.WriteLine( \"# Statuette Serial : {0}\", auction.Item.Serial.ToString() );\n\t\t\t\t\tm_Writer.WriteLine( \"# Properties: {0}\", auction.Items[ 0 ].Properties );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Selling items\n\t\t\t\t\tm_Writer.WriteLine( \"#### Selling {0} Items\", auction.ItemCount );\n\t\t\t\t\tfor ( int i = 0; i < auction.ItemCount; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tAuctionItem.ItemInfo info = auction.Items[ i ];\n\t\t\t\t\t\tm_Writer.WriteLine( \"# {0}. {1} [{2}] Type {3} Hue {4}\", i, info.Name, info.Item.Serial, info.Item.GetType().Name, info.Item.Hue );\n\t\t\t\t\t\tm_Writer.WriteLine( \"Properties: {0}\", info.Properties );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tm_Writer.WriteLine();\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes the current highest bid in an auction\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction corresponding to the bid</param>\n\t\tpublic static void WriteBid( AuctionItem auction )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"> [{0}] Bid Amount : {1}, Mobile : {2} [{3}] Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tauction.HighestBidValue.ToString(\"#,0\" ),\n\t\t\t\t\tauction.HighestBidder.Name,\n\t\t\t\t\tauction.HighestBidder.Serial.ToString(),\n\t\t\t\t\t( auction.HighestBidder.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Changes the\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction switching to pending</param>\n\t\t/// <param name=\"reason\">The reason why the auction is set to pending</param>\n\t\tpublic static void WritePending( AuctionItem auction, string reason )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer.WriteLine( \"] [{0}] Becoming Pending on {1} at {2}. Reason : {3}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tDateTime.UtcNow.ToShortDateString(),\n\t\t\t\t\tDateTime.UtcNow.ToShortTimeString(),\n\t\t\t\t\treason );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Writes the end of the auction to the log\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction ending</param>\n\t\t/// <param name=\"reason\">The AuctionResult stating why the auction is ending</param>\n\t\t/// <param name=\"m\">The Mobile forcing the end of the auction (can be null)</param>\n\t\t/// <param name=\"comments\">Additional comments on the ending (can be null)</param>\n\t\tpublic static void WriteEnd( AuctionItem auction, AuctionResult reason, Mobile m, string comments )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"## Ending Auction {0}\", auction.ID.ToString() );\n\t\t\t\tm_Writer\t.WriteLine( \"# Status : {0}\", reason.ToString() );\n\t\t\t\tif ( m != null )\n\t\t\t\t\tm_Writer\t.WriteLine( \"# Ended by {0} [{1}], {2}, Account : {3}\",\n\t\t\t\t\t\tm.Name, m.Serial.ToString(), m.AccessLevel.ToString(), ( m.Account as Server.Accounting.Account ).Username );\n\t\t\t\tif ( comments != null )\n\t\t\t\t\tm_Writer\t.WriteLine( \"# Comments : {0}\", comments );\n\t\t\t\tm_Writer\t.WriteLine();\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member viewing an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction item</param>\n\t\t/// <param name=\"m\">The mobile viewing the item</param>\n\t\tpublic static void WriteViewItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Vieweing item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member returning an item\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction</param>\n\t\t/// <param name=\"m\">The mobile returning the item</param>\n\t\tpublic static void WriteReturnItem( AuctionItem auction, Mobile m )\n\t\t{\n\t\t\tif ( !m_Enabled || m_Writer == null )\n\t\t\t\treturn;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tm_Writer\t.WriteLine( \"} Returning item [{0}] Mobile: {1} [2], {3}, Account : {4}\",\n\t\t\t\t\tauction.ID.ToString(),\n\t\t\t\t\tm.Name,\n\t\t\t\t\tm.Serial.ToString(),\n\t\t\t\t\tm.AccessLevel.ToString(),\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "length": 805, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "641865af25c8de94ab830220ebc7d004999bbdc21b3bcb43"}
{"input": "", "context": "package no.ntnu.medisn.egenvar;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport javax.swing.JOptionPane;\n/**\n ************************************************************************\n * Copyright (C) 2008 Ian Donaldson This file is part of iRefIndex: iRefIndex: A\n * consolidated protein interaction database with provenance iRefIndex is free\n * software: you can redistribute it and/or modify it under the terms of the GNU\n * General Public License as published by the Free Software Foundation, either\n * version 3 of the License, or any later version. This program is distributed\n * in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even\n * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details. You should have received\n * a copy of the GNU General Public License along with this program. If not, see\n * <http://www.gnu.org/licenses/>. PROGRAM: iRefIndex. AUTHORS: Sabry Razick and\n * Ian Donaldson DESCRIPTION: This software collects, consolidates, analayzes\n * and distributes biomolecular interaction data. See http://irefindex.uio.no\n * for more details. REVISION/CONTRIBUTION NOTES: July 10, 2008 Release 1.1.\n * CONTACT: Ian Donaldson Biotechnology Centre of Oslo, P.O. Box 1125, Blindern,\n * 0317, Oslo, Norway. ian.donaldson@biotek.uio.no http://iRefIndex.uio.no\n * PUBLICATION TO CITE:PMID=18823568 iRefIndex: A consolidated protein\n * interaction database with provenance Sabry Razick, George Magklaras and Ian M\n * Donaldson, BMC Bioinformatics. 2008 Sep 30;9:405\n *\n */\npublic class PathFinder10 {\n    private ArrayList<ArrayList<Integer>> selected_patth_ll;\n    private ArrayList<ArrayList<Integer>> optimal_pathe_ll;\n    private ArrayList<Integer> targets_nehgbours_l;\n    private ArrayList<Integer> garbage_sead_l;\n    int c_min = 999999999;\n    private HashMap<Integer, ArrayList<Integer>> nodemap_bkup;\n    public static boolean negetived = false;\n    private boolean colpseHubs;\n    private boolean expand;\n    private int maximum_distance = 99;\n    private final int MAX_SIGNIFICANT_HUB_CUT_OFF = 999;\n    private int numberOfLargehubs = 0;\n    private double avgOfHubs = 0;\n    private final int WARNING_HUB_MARGIN = 2294;\n    private final int WARNING_HUB_size = 200;\n    private int ignor_bigHub_lastDecision = 0;\n    public static boolean force_kill_path = false;\n    private boolean revers_recomended = false;\n    private static boolean firstResult_returned = false;\n    public PathFinder10() {\n        selected_patth_ll = new ArrayList<ArrayList<Integer>>(100);\n        optimal_pathe_ll = new ArrayList<ArrayList<Integer>>(100);\n        targets_nehgbours_l = new ArrayList<Integer>(100);\n        garbage_sead_l = new ArrayList<Integer>();\n        ignor_bigHub_lastDecision = 0;\n        numberOfLargehubs = 0;\n        avgOfHubs = 0;\n        force_kill_path = false;\n    }\n    public void reSet() {\n        selected_patth_ll = new ArrayList<ArrayList<Integer>>(100);\n        optimal_pathe_ll = new ArrayList<ArrayList<Integer>>(100);\n        targets_nehgbours_l = new ArrayList<Integer>(100);\n        garbage_sead_l = new ArrayList<Integer>();\n        ignor_bigHub_lastDecision = 0;\n        numberOfLargehubs = 0;\n        avgOfHubs = 0;\n        force_kill_path = false;\n    }\n    public static void main(String[] args) {\n    }\n    public ArrayList<ArrayList<String>> getPaths(HashMap<String, ArrayList<String>> connection_map, String start, String stop, int hubColLimit) {\n        ArrayList<String> key_l = new ArrayList<String>(connection_map.keySet());\n        HashMap<Integer, ArrayList<Integer>> transformed_map = new HashMap<Integer, ArrayList<Integer>>();\n        int start_int = -1;\n        int stop_int = -1;\n        for (int i = 0; i < key_l.size(); i++) {\n            ArrayList<String> c_nodes_l = connection_map.get(key_l.get(i));\n            if (c_nodes_l != null) {\n                ArrayList<Integer> trans_nodes_l = new ArrayList<Integer>(c_nodes_l.size());\n                for (int j = 0; j < c_nodes_l.size(); j++) {\n                    int tr_val = key_l.indexOf(c_nodes_l.get(j));\n                    if (tr_val >= 0) {\n                        if (!trans_nodes_l.contains(tr_val)) {\n                            trans_nodes_l.add(tr_val);\n                        }\n                    } else {\n                        key_l.add(c_nodes_l.get(j));\n                        tr_val = key_l.indexOf(c_nodes_l.get(j));\n                        if (!trans_nodes_l.contains(tr_val)) {\n                            trans_nodes_l.add(tr_val);\n                        }\n                    }\n                }\n                transformed_map.put(i, trans_nodes_l);\n            }\n        }\n        for (int i = 0; i < key_l.size(); i++) {\n            if (start.equals(key_l.get(i))) {\n                start_int = i;\n            } else if (stop.equals(key_l.get(i))) {\n                stop_int = i;\n            }\n        }\n        ArrayList<Integer> transformed_map_key_list = new ArrayList<Integer>(transformed_map.keySet());\n        for (int i = 0; i < transformed_map_key_list.size(); i++) {\n            ArrayList<Integer> neigb_list = transformed_map.get(transformed_map_key_list.get(i));\n            for (int j = 0; j < neigb_list.size(); j++) {\n                if (transformed_map.get(neigb_list.get(j)) == null) {\n                    ArrayList<Integer> tmp = new ArrayList<Integer>(1);\n                    tmp.add(transformed_map_key_list.get(i));\n                    transformed_map.put(neigb_list.get(j), tmp);\n//                    neigb_list.add(neigb_list.get(j));\n                } else {\n                    if (!transformed_map.get(neigb_list.get(j)).contains(transformed_map_key_list.get(i))) {\n                        transformed_map.get(neigb_list.get(j)).add(transformed_map_key_list.get(i));\n                    }\n                }\n            }\n        }\n        if (start.equals(stop)) {\n            ArrayList<ArrayList<String>> dummy_ll = new ArrayList<ArrayList<String>>(1);\n            ArrayList<String> dummy_l = new ArrayList<String>(1);\n            dummy_l.add(start);\n            dummy_ll.add(dummy_l);\n            return dummy_ll;\n        } else {\n            ArrayList<Integer> avoid_l = new ArrayList<Integer>(1);\n            int hub_cutoff = 999;\n            boolean blok_superErode_neighbors = true;\n            find_REDUNT_(transformed_map, start_int, stop_int, hubColLimit, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n            ArrayList<ArrayList<String>> selected_patth_string_ll = new ArrayList<ArrayList<String>>(selected_patth_ll.size());\n            for (int i = 0; i < selected_patth_ll.size(); i++) {\n                ArrayList<Integer> c_list = selected_patth_ll.get(i);\n                ArrayList<String> c_trans_list = new ArrayList<String>(c_list.size());\n                for (int j = 0; j < c_list.size(); j++) {\n                    c_trans_list.add(key_l.get(c_list.get(j)));\n                }\n                selected_patth_string_ll.add(c_trans_list);\n            }\n            return selected_patth_string_ll;\n        }\n    }\n    public ArrayList<ArrayList<Integer>> getPaths(int[][] edges, int start, int stop, int hubColLimit, boolean negetived, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int maximum_distance, int hub_cutoff, boolean blok_superErode_neighbors) {\n        reSet();\n        this.maximum_distance = maximum_distance;\n//        this.minimum_distance = minimum_distance;\n        this.colpseHubs = colpseHubs;\n        this.expand = expand;\n        PathFinder10.negetived = negetived;\n        if (negetived) {\n            start = start * (-1);\n            stop = stop * (-1);\n        }\n        if (start == stop) {\n            ArrayList<ArrayList<Integer>> dummy_ll = new ArrayList<ArrayList<Integer>>(1);\n            ArrayList<Integer> dummy_l = new ArrayList<Integer>(1);\n            dummy_l.add(start);\n            dummy_ll.add(dummy_l);\n            return dummy_ll;\n        } else {\n            find_REDUNT(edges, start, stop, hubColLimit, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n            if (negetived) {\n                ArrayList<ArrayList<Integer>> selected_patth_negated_ll = new ArrayList<ArrayList<Integer>>(selected_patth_ll.size());\n                for (int i = 0; i < selected_patth_ll.size(); i++) {\n                    ArrayList<Integer> tmp = selected_patth_ll.remove(i);\n                    ArrayList<Integer> negatedt_l = new ArrayList<Integer>(tmp.size());\n                    for (int j = 0; j < tmp.size(); j++) {\n                        negatedt_l.add(tmp.get(j) * (-1));\n                    }\n                    selected_patth_negated_ll.add(negatedt_l);\n                }\n                return selected_patth_negated_ll;\n            } else {\n                return selected_patth_ll;\n            }\n        }\n    }\n    public HashMap<Integer, ArrayList<Integer>> find_REDUNT(int[][] edges, int start, int stop, int hub_threshld, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int hub_cutoff, boolean blok_superErode_neighbors) {\n        HashMap<Integer, ArrayList<Integer>> nodemap = GetNodemap(edges, true);\n        return find_REDUNT_(nodemap, start, stop, hub_threshld, colpseHubs, expand, avoid_l, hub_cutoff, blok_superErode_neighbors);\n    }\n    public HashMap<Integer, ArrayList<Integer>> find_REDUNT_(HashMap<Integer, ArrayList<Integer>> nodemap, int start, int stop, int hub_threshld, boolean colpseHubs, boolean expand, ArrayList<Integer> avoid_l, int hub_cutoff, boolean blok_superErode_neighbors) {\n        if (nodemap.containsKey(start) && nodemap.containsKey(stop)) {\n            for (int i = 0; i < avoid_l.size(); i++) {\n                nodemap.remove(avoid_l.get(i));\n            }\n            if (hub_cutoff < MAX_SIGNIFICANT_HUB_CUT_OFF) {\n                ArrayList<Integer> map_keys = new ArrayList<Integer>(nodemap.keySet());\n                for (int i = 0; i < map_keys.size(); i++) {\n                    if (nodemap.get(map_keys.get(i)).size() >= hub_cutoff) { //&& !nodemap.get(map_keys.get(i)).contains(start) && !nodemap.get(map_keys.get(i)).contains(stop)\n                        if (map_keys.get(i) != start && map_keys.get(i) != stop && !(nodemap.get(map_keys.get(i)).contains(start)) && !(nodemap.get(map_keys.get(i)).contains(stop))) {\n                            nodemap.remove(map_keys.get(i));\n                        }\n                    }\n                }\n            }\n            resolve(nodemap, start, stop, hub_threshld, true, colpseHubs, blok_superErode_neighbors);\n            if (expand && !force_kill_path) {\n                expand_collapsed(hub_threshld);\n            }\n            return null;\n        }\n        return null;\n    }\n    private void resolve(HashMap<Integer, ArrayList<Integer>> nodemap, Integer start, Integer stop, int hub_threshld, boolean initial, boolean colpseHubs, boolean blok_superErode_neighbors) {\n        //System.out.println(\"Path filling initializing. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n        revers_recomended = false;\n        if (!force_kill_path) {\n            //System.out.println(\"Path filling erosion step 1. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n            nodemap = eroder(nodemap, start, stop);\n        }\n        //System.out.println(\"Size of sub-network after erosion step 1=\" + nodemap.size() );\n        if (!force_kill_path) {\n            //System.out.println(\"Analysing for alternative starting points=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n            nodemap = stratStopReversalCheck(nodemap, start, stop);\n        }\n        int original_start = start;\n        int original_stop = stop;\n        if (revers_recomended) {\n            start = stop;\n            stop = original_start;\n        }\n        //System.out.println(\"Size of sub-network after step 2=\" + nodemap.size() );\n        //System.out.println(\"number of hubs larger than 200 connections=\" + numberOfLargehubs );\n        if (ignor_bigHub_lastDecision == 0 && (numberOfLargehubs > WARNING_HUB_MARGIN)) {\n            Object[] possibleValues = {\"1) Avoid this hubs and locate a path\", \"2) Proceed with current operation using existing settings\", \"3) Quit, change parameters and search again\"};\n//            if (selectedValue.contains(\"1)\")) {\n//                ignor_bigHub_lastDecision = 1;\n//            } else if (selectedValue.contains(\"2)\")) {\n            ignor_bigHub_lastDecision = 2;\n//            } else {\n//                ignor_bigHub_lastDecision = 3;\n//            }\n        }\n        if (ignor_bigHub_lastDecision == 1) {\n            ignor_bigHub_lastDecision = 2;\n            ArrayList<Integer> map_keys = new ArrayList<Integer>(nodemap.keySet());\n            for (int i = 0; i < map_keys.size(); i++) {\n                if (nodemap.get(map_keys.get(i)).size() >= WARNING_HUB_size) {\n                    if (map_keys.get(i) != start && map_keys.get(i) != stop && !(nodemap.get(map_keys.get(i)).contains(start)) && !(nodemap.get(map_keys.get(i)).contains(stop))) {\n                        nodemap.remove(map_keys.get(i));\n                    }\n                }\n            }\n            nodemap = stratStopReversalCheck(nodemap, start, stop);\n        }\n        if (ignor_bigHub_lastDecision == 0 || ignor_bigHub_lastDecision == 1 || ignor_bigHub_lastDecision == 2) {\n            if (!force_kill_path) {\n                //System.out.println(\"Path filling supper erosion step 4. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n                nodemap = superErode_values(nodemap);\n            }\n            if (!force_kill_path) {\n                //System.out.println(\"Path filling neighbour trimming step 5. size of network=\" + nodemap.size() + \" start=\" + start + \" stop=\" + stop);\n                nodemap = superErode_neighbors(nodemap, start, stop);\n            }\n            if (initial && !force_kill_path) {\n                nodemap_bkup = safecopyMap(nodemap);\n            }\n            if (!force_kill_path) {\n                start = original_start;\n                stop = original_stop;\n                ArrayList<Integer> maxs = findHub(nodemap, start, stop, hub_threshld);\n                boolean removed = maxs.remove(start);\n                removed = maxs.remove(stop);\n                ArrayList<Integer> sead_l = new ArrayList<Integer>();\n                ArrayList<Integer> utilized_sead_l = new ArrayList<Integer>();\n                sead_l.add(start);\n                ArrayList<ArrayList<Integer>> patth_ll = new ArrayList<ArrayList<Integer>>(500);\n                patth_ll.add(new ArrayList(sead_l));\n                boolean complete = false;\n                int rounds = 0;\n                while (!complete || force_kill_path) {\n                    rounds++;\n                    complete = true;\n                    int init_size = sead_l.size();\n                    ArrayList<Integer> tmpsead_l = new ArrayList<Integer>(50);\n                    if (colpseHubs && !force_kill_path) {\n                        ArrayList<Integer> maxs_cl = new ArrayList<Integer>(maxs);\n                        if (sead_l != null) {\n                            maxs_cl.retainAll(sead_l);\n                            if (maxs_cl.size() > 0) {\n                                //System.out.println(\"Collapsing hubs . size of network=\" + nodemap.size() + \" Hubs =\" + maxs_cl.size());\n                                collapHubs(nodemap, maxs_cl, start, stop, hub_threshld);\n                                maxs.removeAll(maxs_cl);\n                            }\n                        }\n                    }\n                    for (int j = 0; (j < sead_l.size() && !force_kill_path); j++) {\n                        Integer c_sead = sead_l.get(j);\n                        ArrayList<Integer> sead_partnn_l = null;\n                        if (!force_kill_path) {\n", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "length": 1426, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e6b1d5e9d123fc27b813342bb2b6767d2f8e9b9671110766"}
{"input": "", "context": "#region License\n// Copyright (c) 2006-2007, ClearCanvas Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without modification, \n// are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice, \n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright notice, \n//      this list of conditions and the following disclaimer in the documentation \n//      and/or other materials provided with the distribution.\n//    * Neither the name of ClearCanvas Inc. nor the names of its contributors \n//      may be used to endorse or promote products derived from this software without \n//      specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" \n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, \n// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, \n// OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE \n// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) \n// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \n// OF SUCH DAMAGE.\n#endregion\nnamespace Macro.ImageViewer.Tools.Volume.VTK.View.WinForms\n{\n\tpartial class TissueControl\n\t{\n\t\t/// <summary> \n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\t\t/// <summary> \n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>\n\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\t\t#region Component Designer generated code\n\t\t/// <summary> \n\t\t/// Required method for Designer support - do not modify \n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tthis._visibleCheckBox = new System.Windows.Forms.CheckBox();\n\t\t\tthis._presetComboBox = new System.Windows.Forms.ComboBox();\n\t\t\tthis._presetLabel = new System.Windows.Forms.Label();\n\t\t\tthis._windowLabel = new System.Windows.Forms.Label();\n\t\t\tthis._levelLabel = new System.Windows.Forms.Label();\n\t\t\tthis._opacityLabel = new System.Windows.Forms.Label();\n\t\t\tthis._opacityControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._windowControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._levelControl = new Macro.Desktop.View.WinForms.TrackBarUpDown();\n\t\t\tthis._surfaceRenderingRadio = new System.Windows.Forms.RadioButton();\n\t\t\tthis._volumeRenderingRadio = new System.Windows.Forms.RadioButton();\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// _visibleCheckBox\n\t\t\t// \n\t\t\tthis._visibleCheckBox.AutoSize = true;\n\t\t\tthis._visibleCheckBox.Location = new System.Drawing.Point(17, 13);\n\t\t\tthis._visibleCheckBox.Name = \"_visibleCheckBox\";\n\t\t\tthis._visibleCheckBox.Size = new System.Drawing.Size(56, 17);\n\t\t\tthis._visibleCheckBox.TabIndex = 0;\n\t\t\tthis._visibleCheckBox.Text = \"Visible\";\n\t\t\tthis._visibleCheckBox.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// _presetComboBox\n\t\t\t// \n\t\t\tthis._presetComboBox.FormattingEnabled = true;\n\t\t\tthis._presetComboBox.Location = new System.Drawing.Point(99, 104);\n\t\t\tthis._presetComboBox.Name = \"_presetComboBox\";\n\t\t\tthis._presetComboBox.Size = new System.Drawing.Size(156, 21);\n\t\t\tthis._presetComboBox.TabIndex = 1;\n\t\t\t// \n\t\t\t// _presetLabel\n\t\t\t// \n\t\t\tthis._presetLabel.AutoSize = true;\n\t\t\tthis._presetLabel.Location = new System.Drawing.Point(12, 107);\n\t\t\tthis._presetLabel.Name = \"_presetLabel\";\n\t\t\tthis._presetLabel.Size = new System.Drawing.Size(37, 13);\n\t\t\tthis._presetLabel.TabIndex = 6;\n\t\t\tthis._presetLabel.Text = \"Preset\";\n\t\t\t// \n\t\t\t// _windowLabel\n\t\t\t// \n\t\t\tthis._windowLabel.AutoSize = true;\n\t\t\tthis._windowLabel.Location = new System.Drawing.Point(12, 199);\n\t\t\tthis._windowLabel.Name = \"_windowLabel\";\n\t\t\tthis._windowLabel.Size = new System.Drawing.Size(46, 13);\n\t\t\tthis._windowLabel.TabIndex = 7;\n\t\t\tthis._windowLabel.Text = \"Window\";\n\t\t\t// \n\t\t\t// _levelLabel\n\t\t\t// \n\t\t\tthis._levelLabel.AutoSize = true;\n\t\t\tthis._levelLabel.Location = new System.Drawing.Point(12, 248);\n\t\t\tthis._levelLabel.Name = \"_levelLabel\";\n\t\t\tthis._levelLabel.Size = new System.Drawing.Size(33, 13);\n\t\t\tthis._levelLabel.TabIndex = 8;\n\t\t\tthis._levelLabel.Text = \"Level\";\n\t\t\t// \n\t\t\t// _opacityLabel\n\t\t\t// \n\t\t\tthis._opacityLabel.AutoSize = true;\n\t\t\tthis._opacityLabel.Location = new System.Drawing.Point(12, 152);\n\t\t\tthis._opacityLabel.Name = \"_opacityLabel\";\n\t\t\tthis._opacityLabel.Size = new System.Drawing.Size(43, 13);\n\t\t\tthis._opacityLabel.TabIndex = 9;\n\t\t\tthis._opacityLabel.Text = \"Opacity\";\n\t\t\t// \n\t\t\t// _opacityControl\n\t\t\t// \n\t\t\tthis._opacityControl.AutoSize = true;\n\t\t\tthis._opacityControl.DecimalPlaces = 2;\n\t\t\tthis._opacityControl.Location = new System.Drawing.Point(89, 143);\n\t\t\tthis._opacityControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._opacityControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._opacityControl.Name = \"_opacityControl\";\n\t\t\tthis._opacityControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._opacityControl.TabIndex = 10;\n\t\t\tthis._opacityControl.TrackBarIncrements = 100;\n\t\t\tthis._opacityControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _windowControl\n\t\t\t// \n\t\t\tthis._windowControl.AutoSize = true;\n\t\t\tthis._windowControl.DecimalPlaces = 0;\n\t\t\tthis._windowControl.Location = new System.Drawing.Point(89, 191);\n\t\t\tthis._windowControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._windowControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._windowControl.Name = \"_windowControl\";\n\t\t\tthis._windowControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._windowControl.TabIndex = 11;\n\t\t\tthis._windowControl.TrackBarIncrements = 100;\n\t\t\tthis._windowControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _levelControl\n\t\t\t// \n\t\t\tthis._levelControl.AutoSize = true;\n\t\t\tthis._levelControl.DecimalPlaces = 0;\n\t\t\tthis._levelControl.Location = new System.Drawing.Point(89, 239);\n\t\t\tthis._levelControl.Maximum = new decimal(new int[] {\n            100,\n            0,\n            0,\n            0});\n\t\t\tthis._levelControl.Minimum = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\tthis._levelControl.Name = \"_levelControl\";\n\t\t\tthis._levelControl.Size = new System.Drawing.Size(256, 42);\n\t\t\tthis._levelControl.TabIndex = 12;\n\t\t\tthis._levelControl.TrackBarIncrements = 100;\n\t\t\tthis._levelControl.Value = new decimal(new int[] {\n            0,\n            0,\n            0,\n            0});\n\t\t\t// \n\t\t\t// _surfaceRenderingRadio\n\t\t\t// \n\t\t\tthis._surfaceRenderingRadio.AutoCheck = false;\n\t\t\tthis._surfaceRenderingRadio.AutoSize = true;\n\t\t\tthis._surfaceRenderingRadio.Location = new System.Drawing.Point(17, 43);\n\t\t\tthis._surfaceRenderingRadio.Name = \"_surfaceRenderingRadio\";\n\t\t\tthis._surfaceRenderingRadio.Size = new System.Drawing.Size(114, 17);\n\t\t\tthis._surfaceRenderingRadio.TabIndex = 13;\n\t\t\tthis._surfaceRenderingRadio.TabStop = true;\n\t\t\tthis._surfaceRenderingRadio.Text = \"Surface Rendering\";\n\t\t\tthis._surfaceRenderingRadio.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// _volumeRenderingRadio\n\t\t\t// \n\t\t\tthis._volumeRenderingRadio.AutoCheck = false;\n\t\t\tthis._volumeRenderingRadio.AutoSize = true;\n\t\t\tthis._volumeRenderingRadio.Location = new System.Drawing.Point(17, 66);\n\t\t\tthis._volumeRenderingRadio.Name = \"_volumeRenderingRadio\";\n\t\t\tthis._volumeRenderingRadio.Size = new System.Drawing.Size(112, 17);\n\t\t\tthis._volumeRenderingRadio.TabIndex = 14;\n\t\t\tthis._volumeRenderingRadio.TabStop = true;\n\t\t\tthis._volumeRenderingRadio.Text = \"Volume Rendering\";\n\t\t\tthis._volumeRenderingRadio.UseVisualStyleBackColor = true;\n\t\t\t// \n\t\t\t// TissueControl\n\t\t\t// \n\t\t\tthis.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;\n\t\t\tthis.Controls.Add(this._volumeRenderingRadio);\n\t\t\tthis.Controls.Add(this._surfaceRenderingRadio);\n\t\t\tthis.Controls.Add(this._visibleCheckBox);\n\t\t\tthis.Controls.Add(this._presetLabel);\n\t\t\tthis.Controls.Add(this._presetComboBox);\n\t\t\tthis.Controls.Add(this._opacityLabel);\n\t\t\tthis.Controls.Add(this._opacityControl);\n\t\t\tthis.Controls.Add(this._windowLabel);\n\t\t\tthis.Controls.Add(this._windowControl);\n\t\t\tthis.Controls.Add(this._levelLabel);\n\t\t\tthis.Controls.Add(this._levelControl);\n\t\t\tthis.Name = \"TissueControl\";\n", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "length": 825, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "163ba9ab3a8720b6b3e391e3fd85f582977e28ed27e2a9c2"}
{"input": "", "context": "\"\"\"\nConvert human-editable CSV files into JSON files, used by the web application.\n\"\"\"\nimport json\nimport csv\nfrom io import StringIO\nfrom datetime import datetime\n################################################################################\n# CONFIG \n# behavior categories to include in the JSON file\ncategories = set(('G', 'M', 'W', 'C', 'F', 'H', 'I', 'P', 'V',)) #'A', 'L', 'O', 'E', 'S'\n# time of first GPS point\nfirstGPStime = datetime(2014,1,24,5,36,14)\n# seconds between each GPS point\nintervalseconds = 60\nclass InFileNames:\n    observations = 'behavior observation codes.csv'\n    translations = 'behavior code translations.csv'\n    mediafeatures = 'media features.json'\n    gpstrack = 'GPS track.csv'\n    pictures = 'pictures.csv'\n    textbubbles = 'text bubbles.csv'\n    videos = 'videos.csv'\nclass OutFileNames:\n    behavior = 'behavior.json' # observations + translations\n    behaviorcsv = 'behavior observation data.csv'\n    media = 'media.js' # pictures, videos, text, media features\ntourIntro = {\n    'loc': [10.5142232962, -85.3693762701],\n    'note': 'intro',\n    'data': [],\n    'time': '05:30:00',\n    }\ntourStart = {\n    'loc': [10.5142232962, -85.3693762701],\n    'note': 'start',\n    'data': [],\n    'time': '05:30:00',\n    }\n    \ntourEnd = {\n    'loc': [10.5143646989, -85.3639992792], #[10.5148555432, -85.3643822484], \n    'note': 'end',\n    'data': [],\n    'time': '18:10:43',\n    }\n# monkey patch json encoder to format floats\nfrom json import encoder\nencoder.FLOAT_REPR = lambda o: format(o, '.5f')\n    \n################################################################################\n# GPS track\nwith open(InFileNames.gpstrack) as f:\n    reader = csv.reader(f, skipinitialspace=True)\n    GPStrack = [(float(lat[:9]), float(lon[:10])) for (lat,lon) in list(reader)[1:]]\ndef parsetime(timestr):\n    \"\"\"\n    Get the time from a string, ignore the date.\n    (Return a datetime with the date of the first GPS point.)\n    \"\"\"\n    \n    # take out the date (get only the last space-separated part)\n    timestr = timestr.split()[-1]\n    time = datetime.strptime(timestr, '%H:%M:%S').time()\n    \n    return datetime.combine(firstGPStime.date(), time)\ndef getTimeInterval(time):\n    \"\"\"\n    Get start and end points on the GPS track, of the time interval containing \"time\".\n    \"\"\"\n    \n    index = int((time - firstGPStime).total_seconds() / intervalseconds)\n    interval = GPStrack[index:index+2]\n    \n    if len(interval) == 2:\n        return interval\n    \n    # if the time is past the last GPS point, return an interval with just the last GPS point    \n    else:\n        return (GPStrack[-1], GPStrack[-1])\ndef getGPSCoords(time):\n    \"\"\"\n    Get a geographical point along Winslow Homer's GPS track, by linear interpolation\n    \"\"\"\n    \n    # get start and stop\n    start, stop = getTimeInterval(time)\n    \n    timediff = (time - firstGPStime).total_seconds()\n    proportion = (timediff % intervalseconds) / float(intervalseconds)\n    \n    latdelta = (stop[0] - start[0])\n    lat = (proportion * latdelta) + start[0]\n    \n    londelta = (stop[1] - start[1])\n    lon = (proportion * londelta) + start[1]\n    \n    return (lat, lon)\ndef loadTranslationsFile():\n    \"\"\"\n    Load the translations file, return a list of dicts with the fields in the file\n    \"\"\"\n    \n    with open(InFileNames.translations) as f:\n        reader = csv.DictReader(f, skipinitialspace=True)\n        return list(reader)\ndef loadObservationFile(translations=None):\n    \"\"\" \n    Load the observations file, return a list with a dict for each observation\n    record, and a set with all of the unique behavior codes.\n    \n    \n    \"\"\"\n    \n    # ordered list of observations in file\n    observations = [] \n    \n    # set of codes we've seen\n    codes = set() \n    \n    \n    with open(InFileNames.observations) as f:\n        reader = csv.DictReader(f, skipinitialspace=True)\n        \n        for line in reader:  \n            # look up GPS coordinates from timestamp\n            line['loc'] = getGPSCoords(parsetime(line['timestamp']))\n        \n            # add a 'time' field without the date, to display to user\n            line['time'] = line['timestamp'].split()[1]\n        \n            observations.append(line)\n            codes.add(line['code'])\n    \n    \n    return observations, codes\n    \n    \n    \ndef filterObservationsTranslations():\n    \"\"\" \n    Return (observations, translations) list containing the intersection \n    (inner join) of the observations and translations, and only in the \n    configured categories.\n    \"\"\"\n    \n    translations = loadTranslationsFile()\n    observations, obs_code_set = loadObservationFile()\n    \n       \n    # Find codes that occur in the observations, and are in the right categories.\n    # Make a {code : translation-fields} 2-dimensional dict.\n    translations_dict = {\n        t['code'] : t\n        for t in translations\n        if  (t['code'] in obs_code_set)  and  (t['category'].upper() in categories)   }\n    \n    \n    # Find observations that have a translation.\n    observations = list(filter(lambda o: o['code'] in translations_dict, observations))\n    \n    \n    return observations, translations_dict\n    \n    \n    \n    \n    \ndef writeBehaviorJSON(observations, translations_dict, tourlist):\n    \"\"\"\n    Write behavior JSON file, with observations and translations joined.\n    \"\"\"\n    #observations, translations_dict = filterObservationsTranslations()\n    \n    # join together observations with translations\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "length": 609, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "a9b4285cd9b366f640dd9663e9dd44dfdc153065ee32a6d8"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n#!/usr/bin/env python\n#\n# Gramps - a GTK+/GNOME based genealogy program\n#\n# Copyright (C) 2000-2007  Donald N. Allingham\n# Copyright (C) 2007       Johan Gonqvist <johan.gronqvist@gmail.com>\n# Copyright (C) 2007-2009  Gary Burton <gary.burton@zen.co.uk>\n# Copyright (C) 2007-2009  Stephane Charette <stephanecharette@gmail.com>\n# Copyright (C) 2008-2009  Brian G. Matherly\n# Copyright (C) 2008       Jason M. Simanek <jason@bohemianalps.com>\n# Copyright (C) 2008-2011  Rob G. Healey <robhealey1@gmail.com>\n# Copyright (C) 2010       Doug Blank <doug.blank@gmail.com>\n# Copyright (C) 2010       Jakim Friant\n# Copyright (C) 2010-2017  Serge Noiraud\n# Copyright (C) 2011       Tim G L Lyons\n# Copyright (C) 2013       Benny Malengier\n# Copyright (C) 2016       Allen Crider\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\"\"\"\nNarrative Web Page generator.\nClasse:\n    StatisticsPage\n\"\"\"\n#------------------------------------------------\n# python modules\n#------------------------------------------------\nfrom decimal import getcontext\nimport logging\n#------------------------------------------------\n# Gramps module\n#------------------------------------------------\nfrom gramps.gen.const import GRAMPS_LOCALE as glocale\nfrom gramps.gen.lib import (Person, Family, Event, Place, Source,\n                            Citation, Repository)\nfrom gramps.gen.plug.report import Bibliography\nfrom gramps.gen.utils.file import media_path_full\nfrom gramps.plugins.lib.libhtml import Html\n#------------------------------------------------\n# specific narrative web import\n#------------------------------------------------\nfrom gramps.plugins.webreport.basepage import BasePage\nfrom gramps.plugins.webreport.common import FULLCLEAR\nLOG = logging.getLogger(\".NarrativeWeb\")\ngetcontext().prec = 8\n_ = glocale.translation.sgettext\nclass StatisticsPage(BasePage):\n    \"\"\"\n    Create one page for statistics\n    \"\"\"\n    def __init__(self, report, title, step):\n        \"\"\"\n        @param: report        -- The instance of the main report class\n                                 for this report\n        @param: title         -- Is the title of the web page\n        \"\"\"\n        import posixpath\n        BasePage.__init__(self, report, title)\n        self.bibli = Bibliography()\n        self.uplink = False\n        self.report = report\n        # set the file name and open file\n        output_file, sio = self.report.create_file(\"statistics\")\n        addressbookpage, head, body = self.write_header(_(\"Statistics\"))\n        (males,\n         females,\n         unknown) = self.get_gender(report.database.iter_person_handles())\n        step()\n        mobjects = report.database.get_number_of_media()\n        npersons = report.database.get_number_of_people()\n        nfamilies = report.database.get_number_of_families()\n        nsurnames = len(set(report.database.surname_list))\n        notfound = []\n        total_media = 0\n        mbytes = \"0\"\n        chars = 0\n        for media in report.database.iter_media():\n            total_media += 1\n            fullname = media_path_full(report.database, media.get_path())\n            try:\n                chars += posixpath.getsize(fullname)\n                length = len(str(chars))\n                if chars <= 999999:\n                    mbytes = _(\"less than 1\")\n                else:\n                    mbytes = str(chars)[:(length-6)]\n            except OSError:\n                notfound.append(media.get_path())\n        with Html(\"div\", class_=\"content\", id='EventDetail') as section:\n            section += Html(\"h3\", self._(\"Database overview\"), inline=True)\n        body += section\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec11:\n            sec11 += Html(\"h4\", self._(\"Individuals\"), inline=True)\n        body += sec11\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec1:\n            sec1 += Html(\"br\", self._(\"Number of individuals\") + self.colon +\n                         \"%d\" % npersons, inline=True)\n            sec1 += Html(\"br\", self._(\"Males\") + self.colon +\n                         \"%d\" % males, inline=True)\n            sec1 += Html(\"br\", self._(\"Females\") + self.colon +\n                         \"%d\" % females, inline=True)\n            sec1 += Html(\"br\", self._(\"Individuals with unknown gender\") +\n                         self.colon + \"%d\" % unknown, inline=True)\n        body += sec1\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec2:\n            sec2 += Html(\"h4\", self._(\"Family Information\"), inline=True)\n            sec2 += Html(\"br\", self._(\"Number of families\") + self.colon +\n                         \"%d\" % nfamilies, inline=True)\n            sec2 += Html(\"br\", self._(\"Unique surnames\") + self.colon +\n                         \"%d\" % nsurnames, inline=True)\n        body += sec2\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec3:\n            sec3 += Html(\"h4\", self._(\"Media Objects\"), inline=True)\n            sec3 += Html(\"br\",\n                         self._(\"Total number of media object references\") +\n                         self.colon + \"%d\" % total_media, inline=True)\n            sec3 += Html(\"br\", self._(\"Number of unique media objects\") +\n                         self.colon + \"%d\" % mobjects, inline=True)\n            sec3 += Html(\"br\", self._(\"Total size of media objects\") +\n                         self.colon +\n                         \"%8s %s\" % (mbytes, self._(\"Megabyte|MB\")),\n                         inline=True)\n            sec3 += Html(\"br\", self._(\"Missing Media Objects\") +\n                         self.colon + \"%d\" % len(notfound), inline=True)\n        body += sec3\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec4:\n            sec4 += Html(\"h4\", self._(\"Miscellaneous\"), inline=True)\n            sec4 += Html(\"br\", self._(\"Number of events\") + self.colon +\n                         \"%d\" % report.database.get_number_of_events(),\n                         inline=True)\n            sec4 += Html(\"br\", self._(\"Number of places\") + self.colon +\n                         \"%d\" % report.database.get_number_of_places(),\n                         inline=True)\n            nsources = report.database.get_number_of_sources()\n            sec4 += Html(\"br\", self._(\"Number of sources\") +\n                         self.colon + \"%d\" % nsources,\n                         inline=True)\n            ncitations = report.database.get_number_of_citations()\n            sec4 += Html(\"br\", self._(\"Number of citations\") +\n                         self.colon + \"%d\" % ncitations,\n                         inline=True)\n            nrepo = report.database.get_number_of_repositories()\n            sec4 += Html(\"br\", self._(\"Number of repositories\") +\n                         self.colon + \"%d\" % nrepo,\n                         inline=True)\n        body += sec4\n        (males,\n         females,\n         unknown) = self.get_gender(self.report.bkref_dict[Person].keys())\n        origin = \" :<br/>\" + report.filter.get_name(self.rlocale)\n        with Html(\"div\", class_=\"content\", id='EventDetail') as section:\n            section += Html(\"h3\",\n                            self._(\"Narrative web content report for\") + origin,\n                            inline=True)\n        body += section\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec5:\n            sec5 += Html(\"h4\", self._(\"Individuals\"), inline=True)\n            sec5 += Html(\"br\", self._(\"Number of individuals\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Person]),\n                         inline=True)\n            sec5 += Html(\"br\", self._(\"Males\") + self.colon +\n                         \"%d\" % males, inline=True)\n            sec5 += Html(\"br\", self._(\"Females\") + self.colon +\n                         \"%d\" % females, inline=True)\n            sec5 += Html(\"br\", self._(\"Individuals with unknown gender\") +\n                         self.colon + \"%d\" % unknown, inline=True)\n        body += sec5\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec6:\n            sec6 += Html(\"h4\", self._(\"Family Information\"), inline=True)\n            sec6 += Html(\"br\", self._(\"Number of families\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Family]),\n                         inline=True)\n        body += sec6\n        with Html(\"div\", class_=\"content\", id='subsection narrative') as sec7:\n            sec7 += Html(\"h4\", self._(\"Miscellaneous\"), inline=True)\n            sec7 += Html(\"br\", self._(\"Number of events\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Event]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of places\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Place]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of sources\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Source]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of citations\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Citation]),\n                         inline=True)\n            sec7 += Html(\"br\", self._(\"Number of repositories\") + self.colon +\n                         \"%d\" % len(self.report.bkref_dict[Repository]),\n                         inline=True)\n        body += sec7\n        # add fullclear for proper styling\n        # and footer section to page\n", "answers": ["        footer = self.write_footer(None)"], "length": 960, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "eed31a60b2b619d0d6e7f0a366fbd64a29d110c6a51d5a73"}
{"input": "", "context": "#!/usr/bin/env python\n'''\nFly Helicopter in SITL\nAP_FLAKE8_CLEAN\n'''\nfrom __future__ import print_function\nfrom arducopter import AutoTestCopter\nfrom common import AutoTest\nfrom common import NotAchievedException, AutoTestTimeoutException\nfrom pymavlink import mavutil\nfrom pysim import vehicleinfo\nclass AutoTestHelicopter(AutoTestCopter):\n    sitl_start_loc = mavutil.location(40.072842, -105.230575, 1586, 0)     # Sparkfun AVC Location\n    def vehicleinfo_key(self):\n        return 'Helicopter'\n    def log_name(self):\n        return \"HeliCopter\"\n    def default_frame(self):\n        return \"heli\"\n    def sitl_start_location(self):\n        return self.sitl_start_loc\n    def default_speedup(self):\n        '''Heli seems to be race-free'''\n        return 100\n    def is_heli(self):\n        return True\n    def rc_defaults(self):\n        ret = super(AutoTestHelicopter, self).rc_defaults()\n        ret[8] = 1000\n        ret[3] = 1000 # collective\n        return ret\n    @staticmethod\n    def get_position_armable_modes_list():\n        '''filter THROW mode out of armable modes list; Heli is special-cased'''\n        ret = AutoTestCopter.get_position_armable_modes_list()\n        ret = filter(lambda x : x != \"THROW\", ret)\n        return ret\n    def loiter_requires_position(self):\n        self.progress(\"Skipping loiter-requires-position for heli; rotor runup issues\")\n    def get_collective_out(self):\n        servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)\n        chan_pwm = (servo.servo1_raw + servo.servo2_raw + servo.servo3_raw)/3.0\n        return chan_pwm\n    def rotor_runup_complete_checks(self):\n        # Takeoff and landing in Loiter\n        TARGET_RUNUP_TIME = 10\n        self.zero_throttle()\n        self.change_mode('LOITER')\n        self.wait_ready_to_arm()\n        self.arm_vehicle()\n        servo = self.mav.recv_match(type='SERVO_OUTPUT_RAW', blocking=True)\n        coll = servo.servo1_raw\n        coll = coll + 50\n        self.set_parameter(\"H_RSC_RUNUP_TIME\", TARGET_RUNUP_TIME)\n        self.progress(\"Initiate Runup by putting some throttle\")\n        self.set_rc(8, 2000)\n        self.set_rc(3, 1700)\n        self.progress(\"Collective threshold PWM %u\" % coll)\n        tstart = self.get_sim_time()\n        self.progress(\"Wait that collective PWM pass threshold value\")\n        servo = self.mav.recv_match(condition='SERVO_OUTPUT_RAW.servo1_raw>%u' % coll, blocking=True)\n        runup_time = self.get_sim_time() - tstart\n        self.progress(\"Collective is now at PWM %u\" % servo.servo1_raw)\n        self.mav.wait_heartbeat()\n        if runup_time < TARGET_RUNUP_TIME:\n            self.zero_throttle()\n            self.set_rc(8, 1000)\n            self.disarm_vehicle()\n            self.mav.wait_heartbeat()\n            raise NotAchievedException(\"Takeoff initiated before runup time complete %u\" % runup_time)\n        self.progress(\"Runup time %u\" % runup_time)\n        self.zero_throttle()\n        self.set_rc(8, 1000)\n        self.land_and_disarm()\n        self.mav.wait_heartbeat()\n    # fly_avc_test - fly AVC mission\n    def fly_avc_test(self):\n        # Arm\n        self.change_mode('STABILIZE')\n        self.wait_ready_to_arm()\n        self.arm_vehicle()\n        self.progress(\"Raising rotor speed\")\n        self.set_rc(8, 2000)\n        # upload mission from file\n        self.progress(\"# Load copter_AVC2013_mission\")\n        # load the waypoint count\n        num_wp = self.load_mission(\"copter_AVC2013_mission.txt\", strict=False)\n        if not num_wp:\n            raise NotAchievedException(\"load copter_AVC2013_mission failed\")\n        self.progress(\"Fly AVC mission from 1 to %u\" % num_wp)\n        self.set_current_waypoint(1)\n        # wait for motor runup\n        self.delay_sim_time(20)\n        # switch into AUTO mode and raise throttle\n        self.change_mode('AUTO')\n        self.set_rc(3, 1500)\n        # fly the mission\n        self.wait_waypoint(0, num_wp-1, timeout=500)\n        # set throttle to minimum\n        self.zero_throttle()\n        # wait for disarm\n        self.wait_disarmed()\n        self.progress(\"MOTORS DISARMED OK\")\n        self.progress(\"Lowering rotor speed\")\n        self.set_rc(8, 1000)\n        self.progress(\"AVC mission completed: passed!\")\n    def takeoff(self,\n                alt_min=30,\n                takeoff_throttle=1700,\n                require_absolute=True,\n                mode=\"STABILIZE\",\n                timeout=120):\n        \"\"\"Takeoff get to 30m altitude.\"\"\"\n        self.progress(\"TAKEOFF\")\n        self.change_mode(mode)\n        if not self.armed():\n            self.wait_ready_to_arm(require_absolute=require_absolute, timeout=timeout)\n            self.zero_throttle()\n            self.arm_vehicle()\n        self.progress(\"Raising rotor speed\")\n        self.set_rc(8, 2000)\n        self.progress(\"wait for rotor runup to complete\")\n        self.wait_servo_channel_value(8, 1660, timeout=10)\n        if mode == 'GUIDED':\n            self.user_takeoff(alt_min=alt_min)\n        else:\n            self.set_rc(3, takeoff_throttle)\n        self.wait_for_alt(alt_min=alt_min, timeout=timeout)\n        self.hover()\n        self.progress(\"TAKEOFF COMPLETE\")\n    def fly_each_frame(self):\n        vinfo = vehicleinfo.VehicleInfo()\n        vinfo_options = vinfo.options[self.vehicleinfo_key()]\n        known_broken_frames = {\n        }\n        for frame in sorted(vinfo_options[\"frames\"].keys()):\n            self.start_subtest(\"Testing frame (%s)\" % str(frame))\n            if frame in known_broken_frames:\n                self.progress(\"Actually, no I'm not - it is known-broken (%s)\" %\n                              (known_broken_frames[frame]))\n                continue\n            frame_bits = vinfo_options[\"frames\"][frame]\n            print(\"frame_bits: %s\" % str(frame_bits))\n            if frame_bits.get(\"external\", False):\n                self.progress(\"Actually, no I'm not - it is an external simulation\")\n                continue\n            model = frame_bits.get(\"model\", frame)\n            # the model string for Callisto has crap in it.... we\n            # should really have another entry in the vehicleinfo data\n            # to carry the path to the JSON.\n            actual_model = model.split(\":\")[0]\n            defaults = self.model_defaults_filepath(actual_model)\n            if type(defaults) != list:\n                defaults = [defaults]\n            self.customise_SITL_commandline(\n                [\"--defaults\", ','.join(defaults), ],\n                model=model,\n                wipe=True,\n            )\n            self.takeoff(10)\n            self.do_RTL()\n            self.set_rc(8, 1000)\n    def hover(self):\n        self.progress(\"Setting hover collective\")\n        self.set_rc(3, 1500)\n    def fly_heli_poshold_takeoff(self):\n        \"\"\"ensure vehicle stays put until it is ready to fly\"\"\"\n        self.context_push()\n        ex = None\n        try:\n            self.set_parameter(\"PILOT_TKOFF_ALT\", 700)\n            self.change_mode('POSHOLD')\n            self.zero_throttle()\n            self.set_rc(8, 1000)\n            self.wait_ready_to_arm()\n            # Arm\n            self.arm_vehicle()\n            self.progress(\"Raising rotor speed\")\n            self.set_rc(8, 2000)\n            self.progress(\"wait for rotor runup to complete\")\n            self.wait_servo_channel_value(8, 1660, timeout=10)\n            self.delay_sim_time(20)\n            # check we are still on the ground...\n            m = self.mav.recv_match(type='GLOBAL_POSITION_INT', blocking=True)\n            max_relalt_mm = 1000\n", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "length": 577, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "afc69ae78edec70b690890e285882cf26620106e9a4ecc3d"}
{"input": "", "context": "#region Copyright & License Information\n/*\n * Copyright 2007-2014 The OpenRA Developers (see AUTHORS)\n * This file is part of OpenRA, which is free software. It is made\n * available to you under the terms of the GNU General Public License\n * as published by the Free Software Foundation. For more information,\n * see COPYING.\n */\n#endregion\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing OpenRA.Traits;\nnamespace OpenRA.Network\n{\n\tstatic class UnitOrders\n\t{\n\t\tstatic Player FindPlayerByClient(this World world, Session.Client c)\n\t\t{\n\t\t\t/* TODO: this is still a hack.\n\t\t\t * the cases we're trying to avoid are the extra players on the host's client -- Neutral, other MapPlayers,..*/\n\t\t\treturn world.Players.FirstOrDefault(\n\t\t\t\tp => (p.ClientIndex == c.Index && p.PlayerReference.Playable));\n\t\t}\n\t\tpublic static void ProcessOrder(OrderManager orderManager, World world, int clientId, Order order)\n\t\t{\n\t\t\tif (world != null)\n\t\t\t{\n\t\t\t\tif (!world.WorldActor.TraitsImplementing<IValidateOrder>().All(vo =>\n\t\t\t\t\tvo.OrderValidation(orderManager, world, clientId, order)))\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (order.OrderString)\n\t\t\t{\n\t\t\t\tcase \"Chat\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar player = world != null ? world.FindPlayerByClient(client) : null;\n\t\t\t\t\t\t\tvar suffix = (player != null && player.WinState == WinState.Lost) ? \" (Dead)\" : \"\";\n\t\t\t\t\t\t\tsuffix = client.IsObserver ? \" (Spectator)\" : suffix;\n\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + suffix, order.TargetString);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tGame.AddChatLine(Color.White, \"(player {0})\".F(clientId), order.TargetString);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"Message\": // Server message\n\t\t\t\t\t\tGame.AddChatLine(Color.White, \"Server\", order.TargetString);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Disconnected\": /* reports that the target player disconnected */\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t\tclient.State = Session.ClientState.Disconnected;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"TeamChat\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (world == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (orderManager.LocalClient != null && client.Team == orderManager.LocalClient.Team)\n\t\t\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + \" (Team)\",\n\t\t\t\t\t\t\t\t\t\torder.TargetString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar player = world.FindPlayerByClient(client);\n\t\t\t\t\t\t\t\tif (player == null) return;\n\t\t\t\t\t\t\t\tif ((world.LocalPlayer != null && player.Stances[world.LocalPlayer] == Stance.Ally) || player.WinState == WinState.Lost)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar suffix = player.WinState == WinState.Lost ? \" (Dead)\" : \" (Team)\";\n\t\t\t\t\t\t\t\t\tGame.AddChatLine(client.Color.RGB, client.Name + suffix, order.TargetString);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"StartGame\":\n\t\t\t\t\t{\n\t\t\t\t\t\tGame.AddChatLine(Color.White, \"Server\", \"The game has started.\");\n\t\t\t\t\t\tGame.StartGame(orderManager.LobbyInfo.GlobalSettings.Map, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"PauseGame\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar client = orderManager.LobbyInfo.ClientWithIndex(clientId);\n\t\t\t\t\t\tif (client != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar pause = order.TargetString == \"Pause\";\n\t\t\t\t\t\t\tif (orderManager.World.Paused != pause && !world.LobbyInfo.IsSinglePlayer)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pausetext = \"The game is {0} by {1}\".F(pause ? \"paused\" : \"un-paused\", client.Name);\n\t\t\t\t\t\t\t\tGame.AddChatLine(Color.White, \"\", pausetext);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\torderManager.World.Paused = pause;\n\t\t\t\t\t\t\torderManager.World.PredictedPaused = pause;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"HandshakeRequest\":\n\t\t\t\t\t{\n\t\t\t\t\t\t// TODO: Switch to the server's mod if we have it\n\t\t\t\t\t\t// Otherwise send the handshake with our current settings and let the server reject us\n\t\t\t\t\t\tvar mod = Game.modData.Manifest.Mod;\n\t\t\t\t\t\tvar info = new Session.Client()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName = Game.Settings.Player.Name,\n\t\t\t\t\t\t\tPreferredColor = Game.Settings.Player.Color,\n\t\t\t\t\t\t\tColor = Game.Settings.Player.Color,\n\t\t\t\t\t\t\tCountry = \"random\",\n\t\t\t\t\t\t\tSpawnPoint = 0,\n\t\t\t\t\t\t\tTeam = 0,\n\t\t\t\t\t\t\tState = Session.ClientState.Invalid\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar response = new HandshakeResponse()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tClient = info,\n\t\t\t\t\t\t\tMod = mod.Id,\n\t\t\t\t\t\t\tVersion = mod.Version,\n\t\t\t\t\t\t\tPassword = orderManager.Password\n\t\t\t\t\t\t};\n\t\t\t\t\t\torderManager.IssueOrder(Order.HandshakeResponse(response.Serialize()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"ServerError\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.ServerError = order.TargetString;\n\t\t\t\t\t\torderManager.AuthenticationFailed = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"AuthenticationError\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.ServerError = order.TargetString;\n\t\t\t\t\t\torderManager.AuthenticationFailed = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncInfo\":\n\t\t\t\t\t{\n\t\t\t\t\t\torderManager.LobbyInfo = Session.Deserialize(order.TargetString);\n\t\t\t\t\t\tSetOrderLag(orderManager);\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbyClients\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar clients = new List<Session.Client>();\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n\t\t\t\t\t\t\tif (strings[0] == \"Client\")\n\t\t\t\t\t\t\t\tclients.Add(Session.Client.Deserialize(node.Value));\n\t\t\t\t\t\t}\n\t\t\t\t\t\torderManager.LobbyInfo.Clients = clients;\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbySlots\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar slots = new Dictionary<string, Session.Slot>();\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n\t\t\t\t\t\t\tif (strings[0] == \"Slot\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar slot = Session.Slot.Deserialize(node.Value);\n\t\t\t\t\t\t\t\tslots.Add(slot.PlayerReference, slot);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\torderManager.LobbyInfo.Slots = slots;\n\t\t\t\t\t\tGame.SyncLobbyInfo();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tcase \"SyncLobbyGlobalSettings\":\n\t\t\t\t\t{\n\t\t\t\t\t\tvar nodes = MiniYaml.FromString(order.TargetString);\n\t\t\t\t\t\tforeach (var node in nodes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar strings = node.Key.Split('@');\n", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "length": 591, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "a236838dfe66d927229ed6bf16cacdca43cf1adcd2053b02"}
{"input": "", "context": "package de.uvwxy.packsock;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\n/**\n * A class to simplify the transmission of binary data or strings with a tiny packet header. Its payload size is limited\n * by BUFFER_SIZE.\n * \n * @author Paul Smith code@uvwxy.de\n * \n */\npublic class PackSock {\n\t// 64 Kb packet size should be enough?\n\tprivate static final int BUFFER_SIZE = 1024 * 64;\n\tprivate static final int BYTES_TO_READ_FOR_SIZE = 4;\n\tprivate static final int BYTES_TO_READ_FOR_TYPE = 1;\n\tprivate byte[] buffer = new byte[BUFFER_SIZE];\n\tprivate int buffer_pointer = 0;\n\tprivate int bytes_to_read_for_payload = -1;\n\tprivate int bytes_read_size = 0;\n\tprivate int bytes_read_type = 0;\n\tprivate int bytes_read_payload = 0;\n\tprivate String serverIpAddress;\n\tprivate int connectionPort;\n\tprivate InetAddress serverAddress;\n\tprivate SocketReadState state = SocketReadState.READ_NOTHING;\n\tprivate static ServerSocket serverListener;\n\tprivate boolean isServer = false;\n\tprivate Socket clientSocket;\n\tprivate Socket serverSocket;\n\tprivate BufferedInputStream sock_in;\n\tprivate BufferedOutputStream sock_out;\n\tprivate Packet bufferedPacket = null;\n\tprivate IServerConnectedHook hook = null;\n\tprivate long socketID = System.currentTimeMillis();\n\tprivate class ListenThread implements Runnable {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\ttry {\n\t\t\t\t\tserverSocket = serverListener.accept();\n\t\t\t\t} catch (SocketException se) {\n\t\t\t\t\t// TODO: has been killed by serverListener.close() or other reason\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsock_in = new BufferedInputStream(serverSocket.getInputStream());\n\t\t\t\tsock_out = new BufferedOutputStream(serverSocket.getOutputStream());\n\t\t\t\tif (hook != null)\n\t\t\t\t\thook.onServerAcceptedConnection();\n\t\t\t} catch (IOException e) {\n\t\t\t\tSystem.out.println(\"Socket input/output stream broken..\");\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Initialize this <code>PackSock</code> as a client socket.\n\t * \n\t * @param port\n\t * @throws IOException\n\t */\n\tpublic PackSock(int port, IServerConnectedHook hook) throws IOException {\n\t\tisServer = true;\n\t\tthis.hook = hook;\n\t\tif (serverListener == null) {\n\t\t\tserverListener = new ServerSocket(port);\n\t\t\tthis.connectionPort = port;\n\t\t}\n\t\tif (port != this.connectionPort) {\n\t\t\tthis.connectionPort = port;\n\t\t\t// This does _not_ close previously connected sockets:\n\t\t\tserverListener.close();\n\t\t\tserverListener = new ServerSocket(port);\n\t\t}\n\t}\n\t/**\n\t * Initialize this <code>PackSock</code> as a server socket.\n\t * \n\t * @param serverIpAddress\n\t * @param port\n\t */\n\tpublic PackSock(String serverIpAddress, int port) {\n\t\tthis.serverIpAddress = serverIpAddress;\n\t\tthis.connectionPort = port;\n\t}\n\t/**\n\t * Sets this socket into listen mode with a background Thread accepting the connection.\n\t * \n\t * @throws IOException\n\t */\n\tpublic void listen() throws IOException {\n\t\tif (!isServer)\n\t\t\treturn;\n\t\tThread listener = new Thread(new ListenThread());\n\t\tlistener.start();\n\t}\n\t/**\n\t * Tries to connect this socket to the given host as client.\n\t * \n\t * @throws Exception\n\t */\n\tpublic void connect() throws Exception {\n\t\tif (isServer)\n\t\t\treturn;\n\t\tserverAddress = InetAddress.getByName(serverIpAddress);\n\t\tif (clientSocket != null)\n\t\t\tif (clientSocket.isConnected())\n\t\t\t\tclientSocket.close();\n\t\tclientSocket = new Socket(serverAddress, connectionPort);\n\t\tclientSocket.setSoTimeout(0);\n\t\tclientSocket.setKeepAlive(true);\n\t\tclientSocket.setTcpNoDelay(true);\n\t\tsock_in = new BufferedInputStream(clientSocket.getInputStream());\n\t\tsock_out = new BufferedOutputStream(clientSocket.getOutputStream());\n\t\treturn;\n\t}\n\t/**\n\t * This method takes the given <code>Packet</code> and sends it through the existing connection.\n\t * \n\t * @param p\n\t *            the <code>Packet</code> to send. <code>null</code> is not sent.\n\t * @throws IOException\n\t */\n\tpublic void sendPacket(Packet p) throws IOException, SocketException {\n\t\tif (p == null || sock_out == null) {\n\t\t\t// should throw exception here!\n\t\t\treturn;\n\t\t}\n\t\tsock_out.write(p.getPayloadLengthBytes());\n\t\tsock_out.write(p.getTypeByte());\n\t\tsock_out.write(p.getPayloadAsBytes());\n\t\t// make sure stream is written out to the target stream\n\t\tsock_out.flush();\n\t}\n\t/**\n\t * This function will block until a <code>Packet</code> is received. This function will not return <code>null</code>\n\t * .\n\t * \n\t * @return\n\t * @throws IOException\n\t */\n\tpublic Packet blockingReadSocketForPacket() throws IOException {\n\t\tPacket buf = null;\n\t\twhile (buf == null)\n\t\t\tbuf = tryReadSocketForPacket();\n\t\treturn buf;\n\t}\n\t/**\n\t * This function will try to read packet data from the socket. If not enough data has been received so far\n\t * <code>null</code> is returned. Once an entire packet is read from the buffer the <code>Packet</code> is returned.\n\t * returned.\n\t * \n\t * @throws IOException\n\t */\n\tpublic Packet tryReadSocketForPacket() throws IOException, SocketException {\n\t\tif (sock_in == null) {\n\t\t\treturn null;\n\t\t}\n\t\tswitch (state) {\n\t\tcase READ_PACKET:\n\t\t\t// reset everything\n\t\t\tbytes_read_size = 0;\n\t\t\tbytes_read_type = 0;\n\t\t\tbytes_read_payload = 0;\n\t\t\tbuffer_pointer = 0;\n\t\tcase READ_NOTHING:\n\t\t\tbufferedPacket = new Packet();\n\t\tcase READING_SIZE:\n\t\t\t// read maximal 4 bytes of size field\n\t\t\tbytes_read_size += sock_in.read(buffer, buffer_pointer, BYTES_TO_READ_FOR_SIZE - bytes_read_size);\n\t\t\tbuffer_pointer += bytes_read_size;\n\t\t\tif (bytes_read_size == BYTES_TO_READ_FOR_SIZE) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte[] src = buffer;\n\t\t\t\tint srcOffset = buffer_pointer - 4;\n\t\t\t\tint byteCount = 4;\n\t\t\t\t// reassemble integer\n\t\t\t\tByteBuffer b = ByteBuffer.allocate(4).put(src, srcOffset, byteCount);\n\t\t\t\tb.position(0);\n\t\t\t\tint size = b.getInt();\n\t\t\t\t// set bytes_to_read_payload\n\t\t\t\tbytes_to_read_for_payload = size;\n\t\t\t\tstate = SocketReadState.READING_TYPE;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase READING_TYPE:\n\t\t\tbytes_read_type += sock_in.read(buffer, buffer_pointer, BYTES_TO_READ_FOR_TYPE - bytes_read_type);\n\t\t\tbuffer_pointer += bytes_read_type;\n\t\t\tif (bytes_read_type == BYTES_TO_READ_FOR_TYPE) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte type = buffer[buffer_pointer - 1];\n\t\t\t\tbufferedPacket.setT(type);\n\t\t\t\tstate = SocketReadState.READING_PAYLOAD;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase READING_PAYLOAD:\n\t\t\tint bytesCurrentlyRead = sock_in.read(buffer, buffer_pointer, bytes_to_read_for_payload\n\t\t\t\t\t- bytes_read_payload);\n\t\t\tbytes_read_payload += bytesCurrentlyRead;\n\t\t\tbuffer_pointer += bytesCurrentlyRead;\n\t\t\tif (bytes_read_payload == bytes_to_read_for_payload) {\n\t\t\t\t// now we have everything!\n\t\t\t\tbyte[] src = buffer;\n\t\t\t\tint srcOffset = buffer_pointer - bytes_to_read_for_payload;\n\t\t\t\tint byteCount = bytes_to_read_for_payload;\n\t\t\t\tbyte[] buf = new byte[byteCount];\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "length": 783, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "da7e49792f3a2d27863309727df4e926e397b98ea5c7a30e"}
{"input": "", "context": "/*******************************************************************************\n * Copyright (c) 2010 Oak Ridge National Laboratory.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n ******************************************************************************/\npackage org.csstudio.opibuilder.runmode;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.logging.Level;\nimport org.csstudio.opibuilder.OPIBuilderPlugin;\nimport org.csstudio.opibuilder.model.DisplayModel;\nimport org.csstudio.opibuilder.util.SingleSourceHelper;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.eclipse.core.runtime.Platform;\nimport org.eclipse.draw2d.geometry.Rectangle;\nimport org.eclipse.e4.core.contexts.IEclipseContext;\nimport org.eclipse.e4.ui.model.application.MApplication;\nimport org.eclipse.e4.ui.model.application.ui.advanced.MPlaceholder;\nimport org.eclipse.e4.ui.model.application.ui.basic.MPart;\nimport org.eclipse.e4.ui.workbench.modeling.EModelService;\nimport org.eclipse.osgi.util.NLS;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.IActionBars;\nimport org.eclipse.ui.IEditorInput;\nimport org.eclipse.ui.IElementFactory;\nimport org.eclipse.ui.IMemento;\nimport org.eclipse.ui.IPersistableElement;\nimport org.eclipse.ui.IViewSite;\nimport org.eclipse.ui.PartInitException;\nimport org.eclipse.ui.PlatformUI;\nimport org.eclipse.ui.WorkbenchException;\nimport org.eclipse.ui.XMLMemento;\nimport org.eclipse.ui.part.ViewPart;\n/** RCP 'View' for display runtime\n *\n *  <p>Similar to an RCP editor it is associated to an 'input',\n *  but provides only a view to that *.opi, executing its content.\n *\n *  <p>Being a 'View' allows save/restore within a 'Perspective'.\n *\n *  <p>RCP distinguishes instances via their secondary view ID.\n *  Each instances has a memento for storing arbitrary data,\n *  which we use for the 'input' (*.opi path and macros).\n *\n *  <p>Secondary view IDs must be unique, they can't simply increment\n *  from \"1\" each time CSS is started because then a view with a previously\n *  used secondary ID will show the old content.\n *\n *  <p>RCP only triggers <code>saveState</code> for views that are currently\n *  visible, typically on exit.\n *  This view will write the memento info directly to the underlying E4 model\n *  whenever the input changes.\n *\n *  @author Xihui Chen - Original author\n *  @author Kay Kasemir\n */\n@SuppressWarnings(\"nls\")\npublic class OPIView extends ViewPart implements IOPIRuntime\n{\n    /** View ID registered in plugin.xml for use as a 'default' view.\n     *\n     *  <p>For views to be displayed in designated\n     *  OPIRunnerPerspective.Position,\n     *  that Position.name() is added to the basic ID\n     */\n    public static final String ID = \"org.csstudio.opibuilder.opiView\";\n    /** Debug option, see .options file at plugin root */\n    public static final boolean debug = \"true\".equalsIgnoreCase(Platform.getDebugOption(OPIBuilderPlugin.PLUGIN_ID + \"/views\"));\n    /** Memento tags */\n    private static final String TAG_INPUT = \"input\",\n                                TAG_FACTORY_ID = \"factory_id\",\n                                TAG_MEMENTO = \"memento\";\n    protected OPIRuntimeDelegate opiRuntimeDelegate;\n    private IViewSite site;\n    private IEditorInput input;\n    private OPIRuntimeToolBarDelegate opiRuntimeToolBarDelegate;\n    private static boolean openFromPerspective = false;\n    public OPIView()\n    {\n        opiRuntimeDelegate = new OPIRuntimeDelegate(this);\n    }\n    /** @return Unique secondary view ID for this instance of CSS */\n    public static String createSecondaryID()\n    {\n        return UUID.randomUUID().toString();\n    }\n    @Override\n    public void dispose()\n    {\n        if (opiRuntimeDelegate != null)\n        {\n            opiRuntimeDelegate.dispose();\n            opiRuntimeDelegate = null;\n        }\n        if (opiRuntimeToolBarDelegate != null)\n        {\n            opiRuntimeToolBarDelegate.dispose();\n            opiRuntimeToolBarDelegate = null;\n        }\n        super.dispose();\n    }\n    @Override\n    public void init(final IViewSite site, IMemento memento) throws PartInitException\n    {\n        super.init(site, memento);\n        this.site = site;\n        if (debug)\n            System.out.println(site.getId() + \":\" + site.getSecondaryId() + \" opened \" +\n                               (memento == null ? \", no memento\" : \"with memento\"));\n        if (memento == null) {\n            memento = findMementoFromPlaceholder();\n        }\n        if (memento == null) {\n            return;\n        }\n        // Load previously displayed input from memento\n        final String  factoryID = memento.getString(TAG_FACTORY_ID);\n        if (factoryID == null)\n        {\n            OPIBuilderPlugin.getLogger().log(Level.WARNING, toString() + \" has memento with empty factory ID\");\n            return;\n        }\n        final IMemento inputMem = memento.getChild(TAG_INPUT);\n        final IElementFactory factory = PlatformUI.getWorkbench().getElementFactory(factoryID);\n        if (factory == null)\n            throw new PartInitException(NLS.bind(\n                    \"Cannot instantiate input element factory {0} for OPIView\",\n                    factoryID));\n        final IAdaptable element = factory.createElement(inputMem);\n        if (!(element instanceof IEditorInput))\n            throw new PartInitException(\"Instead of IEditorInput, \" + factoryID + \" returned \" + element);\n        // Set input, but don't persist to memento because we just read it from memento\n        setOPIInput((IEditorInput)element, false);\n    }\n    /**\n     * Retrieve memento persisted in MPlaceholder if present.\n     * @return memento persisted in the placeholder.\n     */\n    private IMemento findMementoFromPlaceholder()\n    {\n        IMemento memento = null;\n        MPlaceholder placeholder = findPlaceholder();\n        if (placeholder != null) {\n            if (placeholder.getPersistedState().containsKey(TAG_MEMENTO))\n            {\n                String mementoString = placeholder.getPersistedState().get(TAG_MEMENTO);\n                memento = loadMemento(mementoString);\n            }\n        }\n        return memento;\n    }\n    /**\n     * Create memento from string.\n     * @param mementoString\n     * @return\n     */\n    private IMemento loadMemento(String mementoString)\n    {\n        StringReader reader = new StringReader(mementoString);\n        try\n        {\n            return XMLMemento.createReadRoot(reader);\n        }\n        catch (WorkbenchException e)\n        {\n            OPIBuilderPlugin.getLogger().log(Level.WARNING, \"Failed to load memento\", e);\n            return null;\n        }\n    }\n    /**\n     * Find the MPlaceholder corresponding to this MPart in the MPerspective.  This\n     * may have persisted information relevant to loading this OPIView.\n     * @return corresponding placeholder\n     */\n    private MPlaceholder findPlaceholder()\n    {\n        //do not remove casting - RAP 3.0 still needs it\n        final IEclipseContext localContext = (IEclipseContext)getViewSite().getService(IEclipseContext.class);\n        final MPart part = localContext.get(MPart.class);\n        final EModelService service = (EModelService)PlatformUI.getWorkbench().getService(EModelService.class);\n        final IEclipseContext globalContext = (IEclipseContext)PlatformUI.getWorkbench().getService(IEclipseContext.class);\n        final MApplication app = globalContext.get(MApplication.class);\n        final List<MPlaceholder> phs = service.findElements(app, null, MPlaceholder.class, null);\n        for (MPlaceholder ph : phs)\n        {\n            if (ph.getRef() == part)\n            {\n                return ph;\n            }\n        }\n        return null;\n    }\n    /** @param input Display file that this view should execute\n     *  @param persist Persist the input to memento?\n     */\n    public void setOPIInput(final IEditorInput input, final boolean persist) throws PartInitException\n    {\n        if (debug)\n        {\n            final IViewSite view = getViewSite();\n            System.out.println(view.getId() + \":\" + view.getSecondaryId() + \" displays \" + input.getName());\n        }\n        this.input = input;\n        setTitleToolTip(input.getToolTipText());\n        opiRuntimeDelegate.init(site, input);\n", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "length": 813, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "e83d8e6549baa04775753f6402e0715161e3d39fda558112"}
{"input": "", "context": "// License: GPL. For details, see LICENSE file.\npackage org.openstreetmap.josm.gui.widgets;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Toolkit;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport javax.accessibility.Accessible;\nimport javax.swing.ComboBoxEditor;\nimport javax.swing.ComboBoxModel;\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JComboBox;\nimport javax.swing.JList;\nimport javax.swing.plaf.basic.ComboPopup;\nimport javax.swing.text.JTextComponent;\n/**\n * Class overriding each {@link JComboBox} in JOSM to control consistently the number of displayed items at once.<br>\n * This is needed because of the default Java behaviour that may display the top-down list off the screen (see #7917).\n *\n * @since 5429\n */\npublic class JosmComboBox extends JComboBox {\n    /**\n     * The default prototype value used to compute the maximum number of elements to be displayed at once before\n     * displaying a scroll bar\n     */\n    public static final String DEFAULT_PROTOTYPE_DISPLAY_VALUE = \"Prototype display value\";\n    /**\n     * Creates a <code>JosmComboBox</code> with a default data model.\n     * The default data model is an empty list of objects.\n     * Use <code>addItem</code> to add items. By default the first item\n     * in the data model becomes selected.\n     *\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox() {\n        this(DEFAULT_PROTOTYPE_DISPLAY_VALUE);\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> with a default data model and\n     * the specified prototype display value.\n     * The default data model is an empty list of objects.\n     * Use <code>addItem</code> to add items. By default the first item\n     * in the data model becomes selected.\n     *\n     * @param prototypeDisplayValue the <code>Object</code> used to compute\n     *      the maximum number of elements to be displayed at once before\n     *      displaying a scroll bar\n     *\n     * @see DefaultComboBoxModel\n     * @since 5450\n     */\n    public JosmComboBox(Object prototypeDisplayValue) {\n        super();\n        init(prototypeDisplayValue);\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> that takes its items from an\n     * existing <code>ComboBoxModel</code>. Since the\n     * <code>ComboBoxModel</code> is provided, a combo box created using\n     * this constructor does not create a default combo box model and\n     * may impact how the insert, remove and add methods behave.\n     *\n     * @param aModel the <code>ComboBoxModel</code> that provides the\n     *      displayed list of items\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox(ComboBoxModel aModel) {\n        super(aModel);\n        List<Object> list = new ArrayList<Object>(aModel.getSize());\n        for (int i = 0; i<aModel.getSize(); i++) {\n            list.add(aModel.getElementAt(i));\n        }\n        init(findPrototypeDisplayValue(list));\n    }\n    /**\n     * Creates a <code>JosmComboBox</code> that contains the elements\n     * in the specified array. By default the first item in the array\n     * (and therefore the data model) becomes selected.\n     *\n     * @param items  an array of objects to insert into the combo box\n     * @see DefaultComboBoxModel\n     */\n    public JosmComboBox(Object[] items) {\n        super(items);\n        init(findPrototypeDisplayValue(Arrays.asList(items)));\n    }\n    /**\n     * Finds the prototype display value to use among the given possible candidates.\n     * @param possibleValues The possible candidates that will be iterated.\n     * @return The value that needs the largest display height on screen.\n     * @since 5558\n     */\n    protected Object findPrototypeDisplayValue(Collection<?> possibleValues) {\n        Object result = null;\n        int maxHeight = -1;\n        if (possibleValues != null) {\n            // Remind old prototype to restore it later\n            Object oldPrototype = getPrototypeDisplayValue();\n            // Get internal JList to directly call the renderer\n            JList list = getList();\n            try {\n                // Index to give to renderer\n                int i = 0;\n                for (Object value : possibleValues) {\n                    if (value != null) {\n                        // With a \"classic\" renderer, we could call setPrototypeDisplayValue(value) + getPreferredSize()\n                        // but not with TaggingPreset custom renderer that return a dummy height if index is equal to -1\n                        // So we explicitely call the renderer by simulating a correct index for the current value\n                        Component c = getRenderer().getListCellRendererComponent(list, value, i, true, true);\n                        if (c != null) {\n                            // Get the real preferred size for the current value\n                            Dimension dim = c.getPreferredSize();\n                            if (dim.height > maxHeight) {\n                                // Larger ? This is our new prototype\n                                maxHeight = dim.height;\n                                result = value;\n                            }\n                        }\n                    }\n                    i++;\n                }\n            } finally {\n                // Restore original prototype\n                setPrototypeDisplayValue(oldPrototype);\n            }\n        }\n        return result;\n    }\n    protected final JList getList() {\n        for (int i = 0; i < getUI().getAccessibleChildrenCount(this); i++) {\n            Accessible child = getUI().getAccessibleChild(this, i);\n            if (child instanceof ComboPopup) {\n                return ((ComboPopup)child).getList();\n            }\n        }\n        return null;\n    }\n    protected void init(Object prototype) {\n        if (prototype != null) {\n            setPrototypeDisplayValue(prototype);\n            int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;\n            // Compute maximum number of visible items based on the preferred size of the combo box.\n            // This assumes that items have the same height as the combo box, which is not granted by the look and feel\n            int maxsize = (screenHeight/getPreferredSize().height) / 2;\n            // If possible, adjust the maximum number of items with the real height of items\n            // It is not granted this works on every platform (tested OK on Windows)\n            JList list = getList();\n            if (list != null) {\n                if (list.getPrototypeCellValue() != prototype) {\n                    list.setPrototypeCellValue(prototype);\n                }\n                int height = list.getFixedCellHeight();\n                if (height > 0) {\n                    maxsize = (screenHeight/height) / 2;\n                }\n            }\n            setMaximumRowCount(Math.max(getMaximumRowCount(), maxsize));\n        }\n        // Handle text contextual menus for editable comboboxes\n        ContextMenuHandler handler = new ContextMenuHandler();\n        addPropertyChangeListener(\"editable\", handler);\n        addPropertyChangeListener(\"editor\", handler);\n    }\n    protected class ContextMenuHandler extends MouseAdapter implements PropertyChangeListener {\n        private JTextComponent component;\n        private PopupMenuLauncher launcher;\n        @Override public void propertyChange(PropertyChangeEvent evt) {\n            if (evt.getPropertyName().equals(\"editable\")) {\n                if (evt.getNewValue().equals(true)) {\n                    enableMenu();\n                } else {\n                    disableMenu();\n                }\n            } else if (evt.getPropertyName().equals(\"editor\")) {\n                disableMenu();\n                if (isEditable()) {\n                    enableMenu();\n                }\n            }\n        }\n        private void enableMenu() {\n            if (launcher == null) {\n                ComboBoxEditor editor = getEditor();\n                if (editor != null) {\n                    Component editorComponent = editor.getEditorComponent();\n                    if (editorComponent instanceof JTextComponent) {\n                        component = (JTextComponent) editorComponent;\n                        component.addMouseListener(this);\n                        launcher = TextContextualPopupMenu.enableMenuFor(component);\n                    }\n                }\n            }\n        }\n        private void disableMenu() {\n            if (launcher != null) {\n                TextContextualPopupMenu.disableMenuFor(component, launcher);\n                launcher = null;\n                component.removeMouseListener(this);\n                component = null;\n            }\n        }\n        @Override public void mousePressed(MouseEvent e) { processEvent(e); }\n        @Override public void mouseReleased(MouseEvent e) { processEvent(e); }\n        private void processEvent(MouseEvent e) {\n", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "length": 933, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "114d27bc1c5c375830eed8e2d634b216f42f616f439cecb8"}
{"input": "", "context": "import json\nfrom django.core.management import call_command\nfrom django.test import TestCase\nfrom bulk_adding.models import RawPeople\nfrom candidates.tests.uk_examples import UK2015ExamplesMixin\nfrom official_documents.models import OfficialDocument\nfrom parties.tests.factories import PartyFactory\nfrom parties.tests.fixtures import DefaultPartyFixtures\nfrom sopn_parsing.models import ParsedSOPN\nfrom sopn_parsing.helpers import parse_tables\nfrom ynr.apps.sopn_parsing.management.commands.sopn_parsing_parse_tables import (\n    Command as ParseTablesCommand,\n)\nfrom unittest import skipIf\nfrom pandas import Index, Series\nfrom sopn_parsing.tests import should_skip_pdf_tests\nclass TestSOPNHelpers(DefaultPartyFixtures, UK2015ExamplesMixin, TestCase):\n    def setUp(self):\n        PartyFactory(ec_id=\"PP85\", name=\"UK Independence Party (UKIP)\")\n    @skipIf(should_skip_pdf_tests(), \"Required PDF libs not installed\")\n    def test_basic_parsing(self):\n        self.assertFalse(RawPeople.objects.exists())\n        doc = OfficialDocument.objects.create(\n            ballot=self.dulwich_post_ballot,\n            document_type=OfficialDocument.NOMINATION_PAPER,\n            source_url=\"example.com\",\n            relevant_pages=\"all\",\n        )\n        dataframe = json.dumps(\n            {\n                \"0\": {\n                    \"0\": \"Name of \\nCandidate\",\n                    \"1\": \"BRADBURY \\nAndrew John\",\n                    \"2\": \"COLLINS \\nDave\",\n                    \"3\": \"HARVEY \\nPeter John\",\n                    \"4\": \"JENNER \\nMelanie\",\n                },\n                \"1\": {\n                    \"0\": \"Home Address\",\n                    \"1\": \"10 Fowey Close, \\nShoreham by Sea, \\nWest Sussex, \\nBN43 5HE\",\n                    \"2\": \"51 Old Fort Road, \\nShoreham by Sea, \\nBN43 5RL\",\n                    \"3\": \"76 Harbour Way, \\nShoreham by Sea, \\nSussex, \\nBN43 5HH\",\n                    \"4\": \"9 Flag Square, \\nShoreham by Sea, \\nWest Sussex, \\nBN43 5RZ\",\n                },\n                \"2\": {\n                    \"0\": \"Description (if \\nany)\",\n                    \"1\": \"Green Party\",\n                    \"2\": \"Independent\",\n                    \"3\": \"UK Independence \\nParty (UKIP)\",\n                    \"4\": \"Labour Party\",\n                },\n                \"3\": {\n                    \"0\": \"Name of \\nProposer\",\n                    \"1\": \"Tiffin Susan J\",\n                    \"2\": \"Loader Jocelyn C\",\n                    \"3\": \"Hearne James H\",\n                    \"4\": \"O`Connor Lavinia\",\n                },\n                \"4\": {\n                    \"0\": \"Reason \\nwhy no \\nlonger \\nnominated\\n*\",\n                    \"1\": \"\",\n                    \"2\": \"\",\n                    \"3\": \"\",\n                    \"4\": \"\",\n                },\n            }\n        )\n        ParsedSOPN.objects.create(\n            sopn=doc, raw_data=dataframe, status=\"unparsed\"\n        )\n        call_command(\"sopn_parsing_parse_tables\")\n        self.assertEqual(RawPeople.objects.count(), 1)\n        raw_people = RawPeople.objects.get()\n        self.assertEqual(\n            raw_people.data,\n            [\n                {\"name\": \"Andrew John Bradbury\", \"party_id\": \"PP63\"},\n                {\"name\": \"Dave Collins\", \"party_id\": \"ynmp-party:2\"},\n                {\"name\": \"Peter John Harvey\", \"party_id\": \"PP85\"},\n                {\"name\": \"Melanie Jenner\", \"party_id\": \"PP53\"},\n            ],\n        )\nclass TestParseTablesUnitTests(TestCase):\n    def get_two_name_field_cases(self):\n        # this could be updated with more combinations as we come across them\n        return [\n            {\n                \"name_fields\": [\"candidate surname\", \"candidate forename\"],\n                \"row\": {\n                    \"candidate surname\": \"BAGSHAW\",\n                    \"candidate forename\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\n                    \"candidate forename\",\n                    \"candidate surname\",\n                ],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"surname\", \"other names\"],\n                \"row\": {\n                    \"surname\": \"BAGSHAW\",\n                    \"other names\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\"other names\", \"surname\"],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"last name\", \"other names\"],\n                \"row\": {\n                    \"last name\": \"BAGSHAW\",\n                    \"other names\": \"Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\"other names\", \"last name\"],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n            {\n                \"name_fields\": [\"candidate forename\", \"candidate surname\"],\n                \"row\": {\n                    \"candidate forename\": \"Elaine Sheila\",\n                    \"candidate surname\": \"BAGSHAW\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n                \"ordered_name_fields\": [\n                    \"candidate forename\",\n                    \"candidate surname\",\n                ],\n                \"expected_name\": \"Elaine Sheila Bagshaw\",\n            },\n        ]\n    def get_single_name_field_cases(self):\n        return [\n            {\n                \"name_fields\": [\"name of candidate\"],\n                \"row\": {\n                    \"name of candidate\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\n London \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"names of candidate\"],\n                \"row\": {\n                    \"names of candidate\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"candidate name\"],\n                \"row\": {\n                    \"candidate name\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"surname\"],\n                \"row\": {\n                    \"surname\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"candidates surname\"],\n                \"row\": {\n                    \"candidates surname\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n            {\n                \"name_fields\": [\"other name\"],\n                \"row\": {\n                    \"other name\": \"BAGSHAW Elaine Sheila\",\n                    \"home address\": \"1 Foo Street \\nLondon \\nE14 6FW\",\n                    \"description\": \"London Liberal \\nDemocrats\",\n                    \"reason why no longer nominated\": \"\",\n                },\n            },\n        ]\n    def test_get_name_single_field(self):\n        for case in self.get_single_name_field_cases():\n            row = Series(case[\"row\"])\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                assert len(case[\"name_fields\"]) == 1\n                name = parse_tables.get_name(row=row, name_fields=name_fields)\n                assert name == \"Elaine Sheila Bagshaw\"\n    def test_get_name_two_fields(self):\n        for case in self.get_two_name_field_cases():\n            row = Series(case[\"row\"])\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                assert len(case[\"name_fields\"]) == 2\n                name = parse_tables.get_name(row=row, name_fields=name_fields)\n                assert name == case[\"expected_name\"]\n    def test_get_name_fields_single(self):\n        for case in self.get_single_name_field_cases():\n            row = Index(case[\"row\"])\n            with self.subTest(row=row):\n                name_fields = parse_tables.get_name_fields(row=row)\n                assert len(name_fields) == 1\n                assert name_fields == case[\"name_fields\"]\n    def test_get_name_fields_two(self):\n        for case in self.get_two_name_field_cases():\n            row = Index(case[\"row\"])\n            with self.subTest(row=row):\n                name_fields = parse_tables.get_name_fields(row=row)\n                assert len(name_fields) == 2\n                assert name_fields == case[\"name_fields\"]\n    def test_get_name_fields_raises_error(self):\n        row = Index({\"foo\": \"Bar\"})\n        with self.assertRaises(ValueError):\n            parse_tables.get_name_fields(row=row)\n    def test_order_name_fields(self):\n        for case in self.get_two_name_field_cases():\n            name_fields = case[\"name_fields\"]\n            with self.subTest(name_fields=name_fields):\n                result = parse_tables.order_name_fields(name_fields)\n                assert result == case[\"ordered_name_fields\"]\n    def test_clean_name_replaces_backticks(self):\n        name = parse_tables.clean_name(\"D`SOUZA\")\n        assert \"`\" not in name\n        assert \"'\" in name\n    def test_clean_name_replaces_newlines(self):\n        name = parse_tables.clean_name(\n            \"A Very Long Name That Splits \\nOver Lines\"\n        )\n        assert \"\\n\" not in name\n    def test_clean_name_capitalized_last_and_titalized(self):\n        name = parse_tables.clean_name(\"SMITH John\")\n        assert name == \"John Smith\"\n    def test_clean_last_names(self):\n        name = parse_tables.clean_last_names([\"MACDONALD\", \"John\"])\n        assert name == \"MacDonald\"\n    def test_clean_name_two_word_surnames(self):\n        names = [\n            (\"EDE COOPER \\nPalmer\", \"Palmer Ede Cooper\"),\n            (\"VAN DULKEN \\nRichard Michael\", \"Richard Michael Van Dulken\"),\n            (\"ARMSTRONG LILLEY \\nLynne\", \"Lynne Armstrong Lilley\"),\n            (\n                \" D`SOUZA  Aaron Anthony Jose \\nHasan\",\n                \"Aaron Anthony Jose Hasan D'Souza\",\n            ),\n            (\"Michael James Collins\", \"Michael James Collins\"),\n            (\"   Michael    James    Collins   \", \"Michael James Collins\"),\n            (\"DAVE Nitesh Pravin\", \"Nitesh Pravin Dave\"),\n            (\"DAVE\\nNitesh Pravin\", \"Nitesh Pravin Dave\"),\n            (\"COOKE Anne-Marie\", \"Anne-Marie Cooke\"),\n            (\"COOKE\\nAnne-Marie\", \"Anne-Marie Cooke\"),\n            (\"BROOKES-\\nDUNCAN\\nKaty\", \"Katy Brookes-Duncan\"),\n            (\"HOUNSOME\\nJohn\", \"John Hounsome\"),\n            (\"O`CONNELL \\nStephen John\", \"Stephen John O'Connell\"),\n", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "length": 919, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "471d9cb59a1c21652129c86006d9d0c5592f5e0867def0cb"}
{"input": "", "context": "\"\"\"\nThis module provides an abstraction for working with XModuleDescriptors\nthat are stored in a database an accessible using their Location as an identifier\n\"\"\"\nimport logging\nimport re\nimport json\nimport datetime\nfrom uuid import uuid4\nfrom pytz import UTC\nfrom collections import namedtuple, defaultdict\nimport collections\nfrom contextlib import contextmanager\nimport functools\nimport threading\nfrom operator import itemgetter\nfrom sortedcontainers import SortedListWithKey\nfrom abc import ABCMeta, abstractmethod\nfrom contracts import contract, new_contract\nfrom xblock.plugin import default_select\nfrom .exceptions import InvalidLocationError, InsufficientSpecificationError\nfrom xmodule.errortracker import make_error_tracker\nfrom xmodule.assetstore import AssetMetadata\nfrom opaque_keys.edx.keys import CourseKey, UsageKey, AssetKey\nfrom opaque_keys.edx.locations import Location  # For import backwards compatibility\nfrom opaque_keys import InvalidKeyError\nfrom opaque_keys.edx.locations import SlashSeparatedCourseKey\nfrom xblock.runtime import Mixologist\nfrom xblock.core import XBlock\nlog = logging.getLogger('edx.modulestore')\nnew_contract('CourseKey', CourseKey)\nnew_contract('AssetKey', AssetKey)\nnew_contract('AssetMetadata', AssetMetadata)\nnew_contract('XBlock', XBlock)\nLIBRARY_ROOT = 'library.xml'\nCOURSE_ROOT = 'course.xml'\nclass ModuleStoreEnum(object):\n    \"\"\"\n    A class to encapsulate common constants that are used with the various modulestores.\n    \"\"\"\n    class Type(object):\n        \"\"\"\n        The various types of modulestores provided\n        \"\"\"\n        split = 'split'\n        mongo = 'mongo'\n        xml = 'xml'\n    class RevisionOption(object):\n        \"\"\"\n        Revision constants to use for Module Store operations\n        Note: These values are passed into store APIs and only used at run time\n        \"\"\"\n        # both DRAFT and PUBLISHED versions are queried, with preference to DRAFT versions\n        draft_preferred = 'rev-opt-draft-preferred'\n        # only DRAFT versions are queried and no PUBLISHED versions\n        draft_only = 'rev-opt-draft-only'\n        # # only PUBLISHED versions are queried and no DRAFT versions\n        published_only = 'rev-opt-published-only'\n        # all revisions are queried\n        all = 'rev-opt-all'\n    class Branch(object):\n        \"\"\"\n        Branch constants to use for stores, such as Mongo, that have only 2 branches: DRAFT and PUBLISHED\n        Note: These values are taken from server configuration settings, so should not be changed without alerting DevOps\n        \"\"\"\n        draft_preferred = 'draft-preferred'\n        published_only = 'published-only'\n    class BranchName(object):\n        \"\"\"\n        Branch constants to use for stores, such as Split, that have named branches\n        \"\"\"\n        draft = 'draft-branch'\n        published = 'published-branch'\n        library = 'library'\n    class UserID(object):\n        \"\"\"\n        Values for user ID defaults\n        \"\"\"\n        # Note: we use negative values here to (try to) not collide\n        # with user identifiers provided by actual user services.\n        # user ID to use for all management commands\n        mgmt_command = -1\n        # user ID to use for primitive commands\n        primitive_command = -2\n        # user ID to use for tests that do not have a django user available\n        test = -3\n    class SortOrder(object):\n        \"\"\"\n        Values for sorting asset metadata.\n        \"\"\"\n        ascending = 1\n        descending = 2\nclass BulkOpsRecord(object):\n    \"\"\"\n    For handling nesting of bulk operations\n    \"\"\"\n    def __init__(self):\n        self._active_count = 0\n    @property\n    def active(self):\n        \"\"\"\n        Return whether this bulk write is active.\n        \"\"\"\n        return self._active_count > 0\n    def nest(self):\n        \"\"\"\n        Record another level of nesting of this bulk write operation\n        \"\"\"\n        self._active_count += 1\n    def unnest(self):\n        \"\"\"\n        Record the completion of a level of nesting of the bulk write operation\n        \"\"\"\n        self._active_count -= 1\n    @property\n    def is_root(self):\n        \"\"\"\n        Return whether the bulk write is at the root (first) level of nesting\n        \"\"\"\n        return self._active_count == 1\nclass ActiveBulkThread(threading.local):\n    \"\"\"\n    Add the expected vars to the thread.\n    \"\"\"\n    def __init__(self, bulk_ops_record_type, **kwargs):\n        super(ActiveBulkThread, self).__init__(**kwargs)\n        self.records = defaultdict(bulk_ops_record_type)\nclass BulkOperationsMixin(object):\n    \"\"\"\n    This implements the :meth:`bulk_operations` modulestore semantics which handles nested invocations\n    In particular, it implements :meth:`_begin_bulk_operation` and\n    :meth:`_end_bulk_operation` to provide the external interface\n    Internally, this mixin records the set of all active bulk operations (keyed on the active course),\n    and only writes those values when :meth:`_end_bulk_operation` is called.\n    If a bulk write operation isn't active, then the changes are immediately written to the underlying\n    mongo_connection.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super(BulkOperationsMixin, self).__init__(*args, **kwargs)\n        self._active_bulk_ops = ActiveBulkThread(self._bulk_ops_record_type)\n    @contextmanager\n    def bulk_operations(self, course_id, emit_signals=True):\n        \"\"\"\n        A context manager for notifying the store of bulk operations. This affects only the current thread.\n        In the case of Mongo, it temporarily disables refreshing the metadata inheritance tree\n        until the bulk operation is completed.\n        \"\"\"\n        try:\n            self._begin_bulk_operation(course_id)\n            yield\n        finally:\n            self._end_bulk_operation(course_id, emit_signals)\n    # the relevant type of bulk_ops_record for the mixin (overriding classes should override\n    # this variable)\n    _bulk_ops_record_type = BulkOpsRecord\n    def _get_bulk_ops_record(self, course_key, ignore_case=False):\n        \"\"\"\n        Return the :class:`.BulkOpsRecord` for this course.\n        \"\"\"\n        if course_key is None:\n            return self._bulk_ops_record_type()\n        # Retrieve the bulk record based on matching org/course/run (possibly ignoring case)\n        if ignore_case:\n            for key, record in self._active_bulk_ops.records.iteritems():\n                # Shortcut: check basic equivalence for cases where org/course/run might be None.\n                if key == course_key or (\n                    key.org.lower() == course_key.org.lower() and\n                    key.course.lower() == course_key.course.lower() and\n                    key.run.lower() == course_key.run.lower()\n                ):\n                    return record\n        return self._active_bulk_ops.records[course_key.for_branch(None)]\n    @property\n    def _active_records(self):\n        \"\"\"\n        Yield all active (CourseLocator, BulkOpsRecord) tuples.\n        \"\"\"\n        for course_key, record in self._active_bulk_ops.records.iteritems():\n            if record.active:\n                yield (course_key, record)\n    def _clear_bulk_ops_record(self, course_key):\n        \"\"\"\n        Clear the record for this course\n        \"\"\"\n        del self._active_bulk_ops.records[course_key.for_branch(None)]\n    def _start_outermost_bulk_operation(self, bulk_ops_record, course_key):\n        \"\"\"\n        The outermost nested bulk_operation call: do the actual begin of the bulk operation.\n        Implementing classes must override this method; otherwise, the bulk operations are a noop\n        \"\"\"\n        pass\n    def _begin_bulk_operation(self, course_key):\n        \"\"\"\n        Begin a bulk operation on course_key.\n        \"\"\"\n        bulk_ops_record = self._get_bulk_ops_record(course_key)\n        # Increment the number of active bulk operations (bulk operations\n        # on the same course can be nested)\n        bulk_ops_record.nest()\n        # If this is the highest level bulk operation, then initialize it\n        if bulk_ops_record.is_root:\n            self._start_outermost_bulk_operation(bulk_ops_record, course_key)\n    def _end_outermost_bulk_operation(self, bulk_ops_record, course_key, emit_signals=True):\n        \"\"\"\n        The outermost nested bulk_operation call: do the actual end of the bulk operation.\n        Implementing classes must override this method; otherwise, the bulk operations are a noop\n        \"\"\"\n        pass\n    def _end_bulk_operation(self, course_key, emit_signals=True):\n        \"\"\"\n        End the active bulk operation on course_key.\n        \"\"\"\n        # If no bulk op is active, return\n        bulk_ops_record = self._get_bulk_ops_record(course_key)\n        if not bulk_ops_record.active:\n            return\n        bulk_ops_record.unnest()\n        # If this wasn't the outermost context, then don't close out the\n        # bulk operation.\n        if bulk_ops_record.active:\n            return\n        self._end_outermost_bulk_operation(bulk_ops_record, course_key, emit_signals)\n        self._clear_bulk_ops_record(course_key)\n    def _is_in_bulk_operation(self, course_key, ignore_case=False):\n        \"\"\"\n        Return whether a bulk operation is active on `course_key`.\n        \"\"\"\n        return self._get_bulk_ops_record(course_key, ignore_case).active\nclass EditInfo(object):\n    \"\"\"\n    Encapsulates the editing info of a block.\n    \"\"\"\n    def __init__(self, **kwargs):\n        self.from_storable(kwargs)\n        # For details, see caching_descriptor_system.py get_subtree_edited_by/on.\n        self._subtree_edited_on = kwargs.get('_subtree_edited_on', None)\n        self._subtree_edited_by = kwargs.get('_subtree_edited_by', None)\n    def to_storable(self):\n        \"\"\"\n        Serialize to a Mongo-storable format.\n        \"\"\"\n        return {\n            'previous_version': self.previous_version,\n            'update_version': self.update_version,\n            'source_version': self.source_version,\n            'edited_on': self.edited_on,\n            'edited_by': self.edited_by,\n            'original_usage': self.original_usage,\n            'original_usage_version': self.original_usage_version,\n        }\n    def from_storable(self, edit_info):\n        \"\"\"\n        De-serialize from Mongo-storable format to an object.\n        \"\"\"\n        # Guid for the structure which previously changed this XBlock.\n        # (Will be the previous value of 'update_version'.)\n        self.previous_version = edit_info.get('previous_version', None)\n        # Guid for the structure where this XBlock got its current field values.\n        # May point to a structure not in this structure's history (e.g., to a draft\n        # branch from which this version was published).\n        self.update_version = edit_info.get('update_version', None)\n        self.source_version = edit_info.get('source_version', None)\n        # Datetime when this XBlock's fields last changed.\n        self.edited_on = edit_info.get('edited_on', None)\n        # User ID which changed this XBlock last.\n        self.edited_by = edit_info.get('edited_by', None)\n        self.original_usage = edit_info.get('original_usage', None)\n        self.original_usage_version = edit_info.get('original_usage_version', None)\n    def __str__(self):\n        return (\"EditInfo(previous_version={0.previous_version}, \"\n                \"update_version={0.update_version}, \"\n                \"source_version={0.source_version}, \"\n                \"edited_on={0.edited_on}, \"\n                \"edited_by={0.edited_by}, \"\n                \"original_usage={0.original_usage}, \"\n                \"original_usage_version={0.original_usage_version}, \"\n                \"_subtree_edited_on={0._subtree_edited_on}, \"\n                \"_subtree_edited_by={0._subtree_edited_by})\").format(self)\nclass BlockData(object):\n    \"\"\"\n    Wrap the block data in an object instead of using a straight Python dictionary.\n    Allows the storing of meta-information about a structure that doesn't persist along with\n    the structure itself.\n    \"\"\"\n    def __init__(self, **kwargs):\n        # Has the definition been loaded?\n        self.definition_loaded = False\n        self.from_storable(kwargs)\n    def to_storable(self):\n        \"\"\"\n        Serialize to a Mongo-storable format.\n        \"\"\"\n        return {\n            'fields': self.fields,\n            'block_type': self.block_type,\n            'definition': self.definition,\n            'defaults': self.defaults,\n            'edit_info': self.edit_info.to_storable()\n        }\n    def from_storable(self, block_data):\n        \"\"\"\n        De-serialize from Mongo-storable format to an object.\n        \"\"\"\n        # Contains the Scope.settings and 'children' field values.\n        # 'children' are stored as a list of (block_type, block_id) pairs.\n        self.fields = block_data.get('fields', {})\n        # XBlock type ID.\n        self.block_type = block_data.get('block_type', None)\n        # DB id of the record containing the content of this XBlock.\n        self.definition = block_data.get('definition', None)\n        # Scope.settings default values copied from a template block (used e.g. when\n        # blocks are copied from a library to a course)\n        self.defaults = block_data.get('defaults', {})\n        # EditInfo object containing all versioning/editing data.\n        self.edit_info = EditInfo(**block_data.get('edit_info', {}))\n    def __str__(self):\n        return (\"BlockData(fields={0.fields}, \"\n                \"block_type={0.block_type}, \"\n                \"definition={0.definition}, \"\n                \"definition_loaded={0.definition_loaded}, \"\n                \"defaults={0.defaults}, \"\n                \"edit_info={0.edit_info})\").format(self)\nnew_contract('BlockData', BlockData)\nclass IncorrectlySortedList(Exception):\n    \"\"\"\n    Thrown when calling find() on a SortedAssetList not sorted by filename.\n    \"\"\"\n    pass\nclass SortedAssetList(SortedListWithKey):\n    \"\"\"\n    List of assets that is sorted based on an asset attribute.\n    \"\"\"\n    def __init__(self, **kwargs):\n        self.filename_sort = False\n        key_func = kwargs.get('key', None)\n        if key_func is None:\n            kwargs['key'] = itemgetter('filename')\n            self.filename_sort = True\n        super(SortedAssetList, self).__init__(**kwargs)\n    @contract(asset_id=AssetKey)\n    def find(self, asset_id):\n        \"\"\"\n        Find the index of a particular asset in the list. This method is only functional for lists\n        sorted by filename. If the list is sorted on any other key, find() raises a\n        Returns: Index of asset, if found. None if not found.\n        \"\"\"\n        # Don't attempt to find an asset by filename in a list that's not sorted by filename.\n        if not self.filename_sort:\n            raise IncorrectlySortedList()\n        # See if this asset already exists by checking the external_filename.\n        # Studio doesn't currently support using multiple course assets with the same filename.\n        # So use the filename as the unique identifier.\n        idx = None\n        idx_left = self.bisect_left({'filename': asset_id.path})\n        idx_right = self.bisect_right({'filename': asset_id.path})\n        if idx_left != idx_right:\n            # Asset was found in the list.\n            idx = idx_left\n        return idx\n    @contract(asset_md=AssetMetadata)\n    def insert_or_update(self, asset_md):\n        \"\"\"\n        Insert asset metadata if asset is not present. Update asset metadata if asset is already present.\n        \"\"\"\n        metadata_to_insert = asset_md.to_storable()\n        asset_idx = self.find(asset_md.asset_id)\n        if asset_idx is None:\n            # Add new metadata sorted into the list.\n            self.add(metadata_to_insert)\n        else:\n            # Replace existing metadata.\n            self[asset_idx] = metadata_to_insert\nclass ModuleStoreAssetBase(object):\n    \"\"\"\n    The methods for accessing assets and their metadata\n    \"\"\"\n    def _find_course_asset(self, asset_key):\n        \"\"\"\n        Returns same as _find_course_assets plus the index to the given asset or None. Does not convert\n        to AssetMetadata; thus, is internal.\n        Arguments:\n            asset_key (AssetKey): what to look for\n        Returns:\n            Tuple of:\n            - AssetMetadata[] for all assets of the given asset_key's type\n            - the index of asset in list (None if asset does not exist)\n        \"\"\"\n        course_assets = self._find_course_assets(asset_key.course_key)\n        all_assets = SortedAssetList(iterable=[])\n        # Assets should be pre-sorted, so add them efficiently without sorting.\n        # extend() will raise a ValueError if the passed-in list is not sorted.\n        all_assets.extend(course_assets.setdefault(asset_key.block_type, []))\n        idx = all_assets.find(asset_key)\n        return course_assets, idx\n    @contract(asset_key='AssetKey')\n    def find_asset_metadata(self, asset_key, **kwargs):\n        \"\"\"\n        Find the metadata for a particular course asset.\n        Arguments:\n            asset_key (AssetKey): key containing original asset filename\n        Returns:\n            asset metadata (AssetMetadata) -or- None if not found\n        \"\"\"\n        course_assets, asset_idx = self._find_course_asset(asset_key)\n        if asset_idx is None:\n            return None\n        mdata = AssetMetadata(asset_key, asset_key.path, **kwargs)\n        all_assets = course_assets[asset_key.asset_type]\n        mdata.from_storable(all_assets[asset_idx])\n        return mdata\n    @contract(\n        course_key='CourseKey', asset_type='None | basestring',\n        start='int | None', maxresults='int | None', sort='tuple(str,(int,>=1,<=2))|None'\n    )\n    def get_all_asset_metadata(self, course_key, asset_type, start=0, maxresults=-1, sort=None, **kwargs):\n        \"\"\"\n        Returns a list of asset metadata for all assets of the given asset_type in the course.\n        Args:\n            course_key (CourseKey): course identifier\n            asset_type (str): the block_type of the assets to return. If None, return assets of all types.\n            start (int): optional - start at this asset number. Zero-based!\n            maxresults (int): optional - return at most this many, -1 means no limit\n            sort (array): optional - None means no sort\n                (sort_by (str), sort_order (str))\n                sort_by - one of 'uploadDate' or 'displayname'\n                sort_order - one of SortOrder.ascending or SortOrder.descending\n        Returns:\n            List of AssetMetadata objects.\n        \"\"\"\n        course_assets = self._find_course_assets(course_key)\n        # Determine the proper sort - with defaults of ('displayname', SortOrder.ascending).\n        key_func = None\n        sort_order = ModuleStoreEnum.SortOrder.ascending\n        if sort:\n", "answers": ["            if sort[0] == 'uploadDate':"], "length": 1853, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "f3072fdefd4e8da2e7e9faf48cffb40392217553f43722a7"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nnamespace Mirror\n{\n    public class SyncListString : SyncList<string>\n    {\n        protected override void SerializeItem(NetworkWriter writer, string item) => writer.WriteString(item);\n        protected override string DeserializeItem(NetworkReader reader) => reader.ReadString();\n    }\n    public class SyncListFloat : SyncList<float>\n    {\n        protected override void SerializeItem(NetworkWriter writer, float item) => writer.WriteSingle(item);\n        protected override float DeserializeItem(NetworkReader reader) => reader.ReadSingle();\n    }\n    public class SyncListInt : SyncList<int>\n    {\n        protected override void SerializeItem(NetworkWriter writer, int item) => writer.WritePackedInt32(item);\n        protected override int DeserializeItem(NetworkReader reader) => reader.ReadPackedInt32();\n    }\n    public class SyncListUInt : SyncList<uint>\n    {\n        protected override void SerializeItem(NetworkWriter writer, uint item) => writer.WritePackedUInt32(item);\n        protected override uint DeserializeItem(NetworkReader reader) => reader.ReadPackedUInt32();\n    }\n    public class SyncListBool : SyncList<bool>\n    {\n        protected override void SerializeItem(NetworkWriter writer, bool item) => writer.WriteBoolean(item);\n        protected override bool DeserializeItem(NetworkReader reader) => reader.ReadBoolean();\n    }\n    // Original UNET name is SyncListStruct and original Weaver weavers anything\n    // that contains the name 'SyncListStruct', without considering the name-\n    // space.\n    [EditorBrowsable(EditorBrowsableState.Never), Obsolete(\"Use SyncList<MyStruct> instead\")]\n    public class SyncListSTRUCT<T> : SyncList<T> where T : struct\n    {\n        public T GetItem(int i) => base[i];\n    }\n    [EditorBrowsable(EditorBrowsableState.Never)]\n    public abstract class SyncList<T> : IList<T>, IReadOnlyList<T>, SyncObject\n    {\n        public delegate void SyncListChanged(Operation op, int itemIndex, T oldItem, T newItem);\n        readonly IList<T> objects;\n        readonly IEqualityComparer<T> comparer;\n        public int Count => objects.Count;\n        public bool IsReadOnly { get; private set; }\n        public event SyncListChanged Callback;\n        public enum Operation : byte\n        {\n            OP_ADD,\n            OP_CLEAR,\n            OP_INSERT,\n            [Obsolete(\"Lists now pass OP_REMOVEAT\")]\n            OP_REMOVE,\n            OP_REMOVEAT,\n            OP_SET,\n            [Obsolete(\"Lists now use OP_SET instead of OP_DIRTY\")]\n            OP_DIRTY\n        }\n        struct Change\n        {\n            internal Operation operation;\n            internal int index;\n            internal T item;\n        }\n        readonly List<Change> changes = new List<Change>();\n        // how many changes we need to ignore\n        // this is needed because when we initialize the list,\n        // we might later receive changes that have already been applied\n        // so we need to skip them\n        int changesAhead;\n        protected virtual void SerializeItem(NetworkWriter writer, T item) { }\n        protected virtual T DeserializeItem(NetworkReader reader) => default;\n        protected SyncList(IEqualityComparer<T> comparer = null)\n        {\n            this.comparer = comparer ?? EqualityComparer<T>.Default;\n            objects = new List<T>();\n        }\n        protected SyncList(IList<T> objects, IEqualityComparer<T> comparer = null)\n        {\n            this.comparer = comparer ?? EqualityComparer<T>.Default;\n            this.objects = objects;\n        }\n        public bool IsDirty => changes.Count > 0;\n        // throw away all the changes\n        // this should be called after a successfull sync\n        public void Flush() => changes.Clear();\n        void AddOperation(Operation op, int itemIndex, T oldItem, T newItem)\n        {\n            if (IsReadOnly)\n            {\n                throw new InvalidOperationException(\"Synclists can only be modified at the server\");\n            }\n            Change change = new Change\n            {\n                operation = op,\n                index = itemIndex,\n                item = newItem\n            };\n            changes.Add(change);\n            Callback?.Invoke(op, itemIndex, oldItem, newItem);\n        }\n        public void OnSerializeAll(NetworkWriter writer)\n        {\n            // if init,  write the full list content\n            writer.WritePackedUInt32((uint)objects.Count);\n            for (int i = 0; i < objects.Count; i++)\n            {\n                T obj = objects[i];\n                SerializeItem(writer, obj);\n            }\n            // all changes have been applied already\n            // thus the client will need to skip all the pending changes\n            // or they would be applied again.\n            // So we write how many changes are pending\n            writer.WritePackedUInt32((uint)changes.Count);\n        }\n        public void OnSerializeDelta(NetworkWriter writer)\n        {\n            // write all the queued up changes\n            writer.WritePackedUInt32((uint)changes.Count);\n            for (int i = 0; i < changes.Count; i++)\n            {\n                Change change = changes[i];\n                writer.WriteByte((byte)change.operation);\n                switch (change.operation)\n                {\n                    case Operation.OP_ADD:\n                        SerializeItem(writer, change.item);\n                        break;\n                    case Operation.OP_CLEAR:\n                        break;\n                    case Operation.OP_REMOVEAT:\n                        writer.WritePackedUInt32((uint)change.index);\n                        break;\n                    case Operation.OP_INSERT:\n                    case Operation.OP_SET:\n                        writer.WritePackedUInt32((uint)change.index);\n                        SerializeItem(writer, change.item);\n                        break;\n                }\n            }\n        }\n        public void OnDeserializeAll(NetworkReader reader)\n        {\n            // This list can now only be modified by synchronization\n            IsReadOnly = true;\n            // if init,  write the full list content\n            int count = (int)reader.ReadPackedUInt32();\n            objects.Clear();\n            changes.Clear();\n            for (int i = 0; i < count; i++)\n            {\n                T obj = DeserializeItem(reader);\n                objects.Add(obj);\n            }\n            // We will need to skip all these changes\n            // the next time the list is synchronized\n            // because they have already been applied\n            changesAhead = (int)reader.ReadPackedUInt32();\n        }\n        public void OnDeserializeDelta(NetworkReader reader)\n        {\n            // This list can now only be modified by synchronization\n            IsReadOnly = true;\n            int changesCount = (int)reader.ReadPackedUInt32();\n            for (int i = 0; i < changesCount; i++)\n            {\n                Operation operation = (Operation)reader.ReadByte();\n                // apply the operation only if it is a new change\n                // that we have not applied yet\n                bool apply = changesAhead == 0;\n                int index = 0;\n                T oldItem = default;\n                T newItem = default;\n                switch (operation)\n                {\n                    case Operation.OP_ADD:\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            index = objects.Count;\n                            objects.Add(newItem);\n                        }\n                        break;\n                    case Operation.OP_CLEAR:\n                        if (apply)\n                        {\n                            objects.Clear();\n                        }\n                        break;\n                    case Operation.OP_INSERT:\n                        index = (int)reader.ReadPackedUInt32();\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            objects.Insert(index, newItem);\n                        }\n                        break;\n                    case Operation.OP_REMOVEAT:\n                        index = (int)reader.ReadPackedUInt32();\n                        if (apply)\n                        {\n                            oldItem = objects[index];\n                            objects.RemoveAt(index);\n                        }\n                        break;\n                    case Operation.OP_SET:\n                        index = (int)reader.ReadPackedUInt32();\n                        newItem = DeserializeItem(reader);\n                        if (apply)\n                        {\n                            oldItem = objects[index];\n                            objects[index] = newItem;\n                        }\n                        break;\n                }\n                if (apply)\n                {\n                    Callback?.Invoke(operation, index, oldItem, newItem);\n                }\n                // we just skipped this change\n                else\n                {\n                    changesAhead--;\n                }\n            }\n        }\n        public void Add(T item)\n        {\n            objects.Add(item);\n            AddOperation(Operation.OP_ADD, objects.Count - 1, default, item);\n        }\n        public void Clear()\n        {\n            objects.Clear();\n            AddOperation(Operation.OP_CLEAR, 0, default, default);\n        }\n        public bool Contains(T item) => IndexOf(item) >= 0;\n        public void CopyTo(T[] array, int index) => objects.CopyTo(array, index);\n        public int IndexOf(T item)\n        {\n            for (int i = 0; i < objects.Count; ++i)\n                if (comparer.Equals(item, objects[i]))\n                    return i;\n            return -1;\n        }\n        public int FindIndex(Predicate<T> match)\n        {\n            for (int i = 0; i < objects.Count; ++i)\n                if (match(objects[i]))\n                    return i;\n            return -1;\n        }\n        public void Insert(int index, T item)\n        {\n            objects.Insert(index, item);\n            AddOperation(Operation.OP_INSERT, index, default, item);\n        }\n        public bool Remove(T item)\n        {\n            int index = IndexOf(item);\n            bool result = index >= 0;\n            if (result)\n            {\n                RemoveAt(index);\n            }\n            return result;\n        }\n        public void RemoveAt(int index)\n        {\n            T oldItem = objects[index];\n            objects.RemoveAt(index);\n            AddOperation(Operation.OP_REMOVEAT, index, oldItem, default);\n        }\n        public T this[int i]\n        {\n            get => objects[i];\n            set\n            {\n                if (!comparer.Equals(objects[i], value))\n                {\n                    T oldItem = objects[i];\n                    objects[i] = value;\n                    AddOperation(Operation.OP_SET, i, oldItem, value);\n                }\n            }\n        }\n        public Enumerator GetEnumerator() => new Enumerator(this);\n        IEnumerator<T> IEnumerable<T>.GetEnumerator() => new Enumerator(this);\n        IEnumerator IEnumerable.GetEnumerator() => new Enumerator(this);\n        // default Enumerator allocates. we need a custom struct Enumerator to\n        // not allocate on the heap.\n        // (System.Collections.Generic.List<T> source code does the same)\n        //\n        // benchmark:\n        //   uMMORPG with 800 monsters, Skills.GetHealthBonus() which runs a\n        //   foreach on skills SyncList:\n        //      before: 81.2KB GC per frame\n        //      after:     0KB GC per frame\n        // => this is extremely important for MMO scale networking\n        public struct Enumerator : IEnumerator<T>\n        {\n            readonly SyncList<T> list;\n            int index;\n            public T Current { get; private set; }\n            public Enumerator(SyncList<T> list)\n            {\n                this.list = list;\n", "answers": ["                index = -1;"], "length": 1053, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "c3473f752e488d5fcb55350bb590bda3a33c09fd69d308d1"}
{"input": "", "context": "# unionrepo.py - repository class for viewing union of repository changesets\n#\n# Derived from bundlerepo.py\n# Copyright 2006, 2007 Benoit Boissinot <bboissin@gmail.com>\n# Copyright 2013 Unity Technologies, Mads Kiilerich <madski@unity3d.com>\n#\n# This software may be used and distributed according to the terms of the\n# GNU General Public License version 2 or any later version.\n\"\"\"Repository class for \"in-memory pull\" of one local repository to another,\nallowing operations like diff and log with revsets.\n\"\"\"\nfrom node import nullid\nfrom i18n import _\nimport os\nimport util, mdiff, cmdutil, scmutil\nimport localrepo, changelog, manifest, filelog, revlog\nclass unionrevlog(revlog.revlog):\n    def __init__(self, opener, indexfile, revlog2, linkmapper):\n        # How it works:\n        # To retrieve a revision, we just need to know the node id so we can\n        # look it up in revlog2.\n        #\n        # To differentiate a rev in the second revlog from a rev in the revlog,\n        # we check revision against repotiprev.\n        opener = scmutil.readonlyvfs(opener)\n        revlog.revlog.__init__(self, opener, indexfile)\n        self.revlog2 = revlog2\n        n = len(self)\n        self.repotiprev = n - 1\n        self.bundlerevs = set() # used by 'bundle()' revset expression\n        for rev2 in self.revlog2:\n            rev = self.revlog2.index[rev2]\n            # rev numbers - in revlog2, very different from self.rev\n            _start, _csize, _rsize, _base, linkrev, p1rev, p2rev, node = rev\n            if linkmapper is None: # link is to same revlog\n                assert linkrev == rev2 # we never link back\n                link = n\n            else: # rev must be mapped from repo2 cl to unified cl by linkmapper\n                link = linkmapper(linkrev)\n            if node in self.nodemap:\n                # this happens for the common revlog revisions\n                self.bundlerevs.add(self.nodemap[node])\n                continue\n            p1node = self.revlog2.node(p1rev)\n            p2node = self.revlog2.node(p2rev)\n            e = (None, None, None, None,\n                 link, self.rev(p1node), self.rev(p2node), node)\n            self.index.insert(-1, e)\n            self.nodemap[node] = n\n            self.bundlerevs.add(n)\n            n += 1\n    def _chunk(self, rev):\n        if rev <= self.repotiprev:\n            return revlog.revlog._chunk(self, rev)\n        return self.revlog2._chunk(self.node(rev))\n    def revdiff(self, rev1, rev2):\n        \"\"\"return or calculate a delta between two revisions\"\"\"\n        if rev1 > self.repotiprev and rev2 > self.repotiprev:\n            return self.revlog2.revdiff(\n                self.revlog2.rev(self.node(rev1)),\n                self.revlog2.rev(self.node(rev2)))\n        elif rev1 <= self.repotiprev and rev2 <= self.repotiprev:\n            return self.baserevdiff(rev1, rev2)\n        return mdiff.textdiff(self.revision(self.node(rev1)),\n                              self.revision(self.node(rev2)))\n    def revision(self, nodeorrev):\n        \"\"\"return an uncompressed revision of a given node or revision\n        number.\n        \"\"\"\n        if isinstance(nodeorrev, int):\n            rev = nodeorrev\n            node = self.node(rev)\n        else:\n            node = nodeorrev\n            rev = self.rev(node)\n        if node == nullid:\n            return \"\"\n        if rev > self.repotiprev:\n            text = self.revlog2.revision(node)\n            self._cache = (node, rev, text)\n        else:\n            text = self.baserevision(rev)\n            # already cached\n        return text\n    def baserevision(self, nodeorrev):\n        # Revlog subclasses may override 'revision' method to modify format of\n        # content retrieved from revlog. To use unionrevlog with such class one\n        # needs to override 'baserevision' and make more specific call here.\n        return revlog.revlog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        # Exists for the same purpose as baserevision.\n        return revlog.revlog.revdiff(self, rev1, rev2)\n    def addrevision(self, text, transaction, link, p1=None, p2=None, d=None):\n        raise NotImplementedError\n    def addgroup(self, revs, linkmapper, transaction):\n        raise NotImplementedError\n    def strip(self, rev, minlink):\n        raise NotImplementedError\n    def checksize(self):\n        raise NotImplementedError\nclass unionchangelog(unionrevlog, changelog.changelog):\n    def __init__(self, opener, opener2):\n        changelog.changelog.__init__(self, opener)\n        linkmapper = None\n        changelog2 = changelog.changelog(opener2)\n        unionrevlog.__init__(self, opener, self.indexfile, changelog2,\n                             linkmapper)\n    def baserevision(self, nodeorrev):\n        # Although changelog doesn't override 'revision' method, some extensions\n        # may replace this class with another that does. Same story with\n        # manifest and filelog classes.\n        return changelog.changelog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return changelog.changelog.revdiff(self, rev1, rev2)\nclass unionmanifest(unionrevlog, manifest.manifest):\n    def __init__(self, opener, opener2, linkmapper):\n        manifest.manifest.__init__(self, opener)\n        manifest2 = manifest.manifest(opener2)\n        unionrevlog.__init__(self, opener, self.indexfile, manifest2,\n                             linkmapper)\n    def baserevision(self, nodeorrev):\n        return manifest.manifest.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return manifest.manifest.revdiff(self, rev1, rev2)\nclass unionfilelog(unionrevlog, filelog.filelog):\n    def __init__(self, opener, path, opener2, linkmapper, repo):\n        filelog.filelog.__init__(self, opener, path)\n        filelog2 = filelog.filelog(opener2, path)\n        unionrevlog.__init__(self, opener, self.indexfile, filelog2,\n                             linkmapper)\n        self._repo = repo\n    def baserevision(self, nodeorrev):\n        return filelog.filelog.revision(self, nodeorrev)\n    def baserevdiff(self, rev1, rev2):\n        return filelog.filelog.revdiff(self, rev1, rev2)\n    def _file(self, f):\n        self._repo.file(f)\nclass unionpeer(localrepo.localpeer):\n    def canpush(self):\n        return False\nclass unionrepository(localrepo.localrepository):\n    def __init__(self, ui, path, path2):\n        localrepo.localrepository.__init__(self, ui, path)\n        self.ui.setconfig('phases', 'publish', False, 'unionrepo')\n        self._url = 'union:%s+%s' % (util.expandpath(path),\n                                     util.expandpath(path2))\n        self.repo2 = localrepo.localrepository(ui, path2)\n    @localrepo.unfilteredpropertycache\n    def changelog(self):\n        return unionchangelog(self.sopener, self.repo2.sopener)\n    def _clrev(self, rev2):\n        \"\"\"map from repo2 changelog rev to temporary rev in self.changelog\"\"\"\n        node = self.repo2.changelog.node(rev2)\n        return self.changelog.rev(node)\n    @localrepo.unfilteredpropertycache\n    def manifest(self):\n        return unionmanifest(self.sopener, self.repo2.sopener,\n                             self._clrev)\n    def url(self):\n        return self._url\n    def file(self, f):\n        return unionfilelog(self.sopener, f, self.repo2.sopener,\n                            self._clrev, self)\n    def close(self):\n        self.repo2.close()\n    def cancopy(self):\n        return False\n    def peer(self):\n        return unionpeer(self)\n    def getcwd(self):\n        return os.getcwd() # always outside the repo\ndef instance(ui, path, create):\n    if create:\n        raise util.Abort(_('cannot create new union repository'))\n    parentpath = ui.config(\"bundle\", \"mainreporoot\", \"\")\n    if not parentpath:\n        # try to find the correct path to the working directory repo\n        parentpath = cmdutil.findrepo(os.getcwd())\n        if parentpath is None:\n            parentpath = ''\n    if parentpath:\n        # Try to make the full path relative so we get a nice, short URL.\n        # In particular, we don't want temp dir names in test outputs.\n        cwd = os.getcwd()\n        if parentpath == cwd:\n            parentpath = ''\n        else:\n            cwd = os.path.join(cwd,'')\n            if parentpath.startswith(cwd):\n", "answers": ["                parentpath = parentpath[len(cwd):]"], "length": 795, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "ccc7e6259fdffd163ebd0d5779c4ced9624d7b3d215079cf"}
{"input": "", "context": "#\n# Copyright (c) 2015-2018 Canonical, Ltd.\n#\n# This file is part of Talisker\n# (see http://github.com/canonical-ols/talisker).\n#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n#\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\nfrom __future__ import division\nfrom __future__ import absolute_import\nfrom builtins import *  # noqa\nfrom collections import OrderedDict\nfrom contextlib import contextmanager\nimport logging\nimport logging.handlers\nimport numbers\nimport sys\nimport time\nfrom talisker.context import Context, ContextId\nfrom talisker.util import (\n    get_errno_fields,\n    module_cache,\n    module_dict,\n)\n__all__ = [\n    'configure',\n    'configure_test_logging',\n    'logging_context',\n]\nlogging_globals = module_dict()\ndef set_global_extra(extra):\n    if 'extra' not in logging_globals:\n        logging_globals['extra'] = OrderedDict()\n    logging_globals['extra'].update(extra)\ndef reset_logging():\n    \"\"\"Reset logging config\"\"\"\n    # avoid unclosed file resource warning\n    for handler in logging.getLogger().handlers:\n        if getattr(handler, '_debug_handler', False):\n            handler.stream.close()\n    logging.getLogger().handlers = []\nNOISY_LOGS = {\n    'requests': logging.WARNING,\n}\nclass LoggingContextProxy():\n    def __getattr__(self, attr):\n        return getattr(Context.logging, attr)\n    @contextmanager\n    def __call__(self, extra=None, **kwargs):\n        with Context.logging(extra, **kwargs):\n            yield\nlogging_context = LoggingContextProxy()\n# backwards compat aliases\ndef set_logging_context(*args, **kwargs):\n    Context.logging.push(*args, **kwargs)\nextra_logging = logging_context\ndef add_talisker_handler(level, handler, formatter=None):\n    if formatter is None:\n        formatter = StructuredFormatter()\n    handler.setFormatter(formatter)\n    handler.setLevel(level)\n    handler._talisker_handler = True\n    logging.getLogger().addHandler(handler)\ndef set_logger_class():\n    logging.setLoggerClass(StructuredLogger)\n    logging.getLogger().setLevel(logging.NOTSET)\n@module_cache\ndef get_talisker_handler():\n    handler = logging.StreamHandler()\n    handler._root_talisker = True\n    return handler\ndef configure(config):  # pragma: no cover\n    \"\"\"Configure default logging setup for our services.\n    This is basically:\n     - log to stderr\n     - output hybrid logfmt structured format\n     - maybe configure debug logging\n    \"\"\"\n    # avoid duplicate logging\n    if logging_globals.get('configured'):\n        return\n    set_logger_class()\n    formatter = StructuredFormatter()\n    if config.colour:\n        formatter = ColouredFormatter(style=config.colour)\n    # always INFO to stderr\n    add_talisker_handler(logging.INFO, get_talisker_handler(), formatter)\n    configure_warnings(config.devel)\n    supress_noisy_logs()\n    # defer this until logging has been set up\n    logger = logging.getLogger(__name__)\n    config_extra = {k: v.value for k, v in config.metadata().items() if v.raw}\n    if config_extra:\n        logger.info('talisker configured', extra=config_extra)\n    if config.ERRORS:\n        errors = {name: str(err) for name, err in config.ERRORS.items()}\n        logger.error('configuration errors', extra=errors)\n    if config.debuglog is not None:\n        if can_write_to_file(config.debuglog):\n            handler = logging.handlers.TimedRotatingFileHandler(\n                config.debuglog,\n                when='D',\n                interval=1,\n                backupCount=1,\n                delay=True,\n                utc=True,\n            )\n            handler._debug_handler = True\n            add_talisker_handler(logging.DEBUG, handler)\n            logger.info('enabling debug log', extra={'path': config.debuglog})\n        else:\n            logger.info('could not enable debug log, could not write to path',\n                        extra={'path': config.debuglog})\n    # sentry integration\n    import talisker.sentry  # defer to avoid logging setup\n    if talisker.sentry.enabled:\n        sentry_handler = talisker.sentry.get_log_handler()\n        add_talisker_handler(logging.ERROR, sentry_handler)\n    logging_globals['configured'] = True\ndef can_write_to_file(path):\n    try:\n        open(path, 'a').close()\n    except Exception:\n        return False\n    else:\n        return True\ndef supress_noisy_logs():\n    \"\"\"Set some custom log levels on some sub logs\"\"\"\n    for name, level in NOISY_LOGS.items():\n        logger = logging.getLogger(name)\n        logger.setLevel(level)\ndef configure_warnings(enable):\n    # never propogate warnings to root\n    warnings = logging.getLogger('py.warnings')\n    warnings.propagate = False\n    if enable:\n        warnings.addHandler(logging.StreamHandler())\ndef configure_test_logging(handler=None):\n    \"\"\"Add a handler (defaults to NullHandler) to root logger.\n    Prevents unconfigured logging from erroring, and swallows all logging,\n    which is usually what you want for unit tests.  Unit test fixtures can\n    still add their own loggers to assert against log messages if needed.\n    \"\"\"\n    set_logger_class()\n    if handler is None:\n        handler = logging.NullHandler()\n    add_talisker_handler(logging.NOTSET, handler)\n    configure_warnings(True)\ndef enable_debug_log_stderr():\n    \"\"\"Enables debug logging on stderr\n    Checks for devel mode.\"\"\"\n    logger = logging.getLogger(__name__)\n    logger.warning('setting stderr logging to DEBUG')\n    get_talisker_handler().setLevel(logging.DEBUG)\nclass StructuredLogger(logging.Logger):\n    \"\"\"A logger that handles passing 'extra' arguments to all logging calls.\n    Supports 3 sources of extra structured data:\n    1) global extra, designed to be set once at process start/\n    2) context extra, designed to be set per request or job, can cleaned up\n       afterwards.\n    3) per call extra, passed by the log call, as per normal logging\n       e.g. log.info('...', extra={...})\n    \"\"\"\n    # sadly, we must subclass and override, rather that use the new\n    # setLogRecordFactory() in 3.2+, as that does not pass the extra args\n    # through. Also, we need to support python 2.\n    def makeRecord(self, name, level, fn, lno, msg, args, exc_info,\n                   func=None, extra=None, sinfo=None):\n        # at this point we have 3 possible sources of extra kwargs\n        # - log call: extra\n        # - context : local_context.flat\n        # - global  : logging_globals['extra']\n        #\n        # In case of collisions, we append _ to the end of the name, so no data\n        # is lost. The global ones are more important, so take priority - the\n        # user supplied keys are the ones renamed if needed\n        # Also, the ordering is specific - more specific tags first\n        trailer = None\n        structured = OrderedDict()\n        try:\n            if ContextId.get(None) is None:\n                context_extra = {}\n                request_id = None\n            else:\n                context_extra = logging_context.flat\n                request_id = Context.request_id\n            global_extra = logging_globals.get('extra', {})\n            if extra:\n                trailer = extra.pop('trailer', None)\n                for k, v in extra.items():\n                    if k in context_extra or k in global_extra:\n                        k = k + '_'\n                    structured[k] = v\n            for k, v in context_extra.items():\n                if k in global_extra:\n                    k = k + '_'\n                structured[k] = v\n            structured.update(global_extra)\n            if request_id:\n                structured['request_id'] = request_id\n        except Exception:\n            # ensure unexpected error doesn't break logging completely\n            structured = extra\n        kwargs = dict(func=func, extra=structured, sinfo=sinfo)\n        # python 2 doesn't support sinfo parameter\n", "answers": ["        if sys.version_info[0] == 2:"], "length": 897, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "17f8060bda3eea4e6b94e07ca7850afadc2a42895f40a08a"}
{"input": "", "context": "using System;\nusing System.Collections;\nusing Server;\nusing Server.Gumps;\nusing Server.Mobiles;\nusing Server.Targeting;\nusing Server.ContextMenus;\nusing Server.Regions;\nusing Server.Network;\nusing System.Collections.Generic;\nusing Server.Items;\nusing Server.Targets;\nnamespace Server.Items\n{\n\tpublic class SpellweavingTrainer : Item\n\t{\n\t\tpublic override string DefaultName\n\t\t{\n\t\t\tget { return \"Spellweaving Trainer [100GP]\"; }\n\t\t}\n\t\t[Constructable]\n\t\tpublic SpellweavingTrainer() : base( 0x1F1C )\n\t\t{\n\t\t\tWeight = 1.0;\n            Movable = false;\n\t\t}\n\t\tpublic SpellweavingTrainer( Serial serial ) : base( serial )\n\t\t{\n\t\t}\n        public override void OnDoubleClick(Mobile m)\n        {\n            if (m.Skills.Spellweaving.Base <= 19.9)\n            {\n                if (m.Mana >= 4)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 4;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 39.9 && m.Skills.Spellweaving.Base >= 20)\n            {\n                if (m.Mana >= 5)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 5;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n                else\n                {\n                    m.SendMessage(\"You need 5 mana to use this item at your skill level.\");\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 59.9 && m.Skills.Spellweaving.Base >= 40)\n            {\n                if (m.Mana >= 10)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n                                m.Mana -= 10;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need 100gp in your pack to use this stone.\");\n                    }\n                    else\n                    {\n                        m.SendMessage(\"you have reached your total skills cap. Set a skill to lower to continue using me\");\n                    }\n                }\n                else\n                {\n                    m.SendMessage(\"You need 10 mana to use this item at your skill level.\");\n                }\n            }\n            if (m.Skills.Spellweaving.Base <= 79.9 && m.Skills.Spellweaving.Base >= 60)\n            {\n                if (m.Mana >= 20)\n                {\n                    if (m.SkillsTotal >= m.SkillsCap)\n                    {\n                        int toGain = 1;\n                        Skills skills = m.Skills;\n                        for (int i = 0; i < skills.Length; ++i)\n                        {\n                            Skill toLower = skills[i];\n                            if (toLower != m.Skills.Spellweaving && toLower.Lock == SkillLock.Down && toLower.BaseFixedPoint >= toGain)\n                            {\n                                toLower.BaseFixedPoint -= toGain;\n                                break;\n                            }\n                        }\n                    }\n                    if (m.SkillsTotal < m.SkillsCap)\n                    {\n                        if (m.Backpack.ConsumeTotal(typeof(Gold), 100))\n                        {\n                            if (m.Skills.Spellweaving.Base < m.Skills.Spellweaving.Cap)\n                            {\n                                m.Skills.Spellweaving.BaseFixedPoint += 1;\n", "answers": ["                                m.Mana -= 20;"], "length": 569, "dataset": "lcc_e", "language": "csharp", "all_classes": null, "_id": "4896ad1befbd50e27e04ff67bc71f68ed6b7d9842a7f38ef"}
{"input": "", "context": "\"\"\"\nStep definitions for working with Django models.\n\"\"\"\nfrom datetime import datetime\nimport re\nfrom django.core.management import call_command\nfrom django.core.management.color import no_style\nfrom django.db import connection\nfrom django.db.models.loading import get_models\nfrom django.utils.functional import curry\nfrom functools import wraps\nfrom lettuce import step\nSTEP_PREFIX = r'(?:Given|And|Then|When) '\ndef _models_generator():\n    \"\"\"\n    Build a hash of model verbose names to models\n    \"\"\"\n    for model in get_models():\n        yield (unicode(model._meta.verbose_name), model)\n        yield (unicode(model._meta.verbose_name_plural), model)\nMODELS = dict(_models_generator())\n_WRITE_MODEL = {}\ndef creates_models(model):\n    \"\"\"\n    Register a model-specific creation function. Wrapper around writes_models\n    that removes the field parameter (always a create operation).\n    \"\"\"\n    def decorated(func):\n        @wraps(func)\n        @writes_models(model)\n        def wrapped(data, field):\n            if field:\n                raise NotImplementedError(\n                    \"Must use the writes_models decorator to update models\")\n            return func(data)\n    return decorated\ndef writes_models(model):\n    \"\"\"\n    Register a model-specific create and update function.\n    \"\"\"\n    def decorated(func):\n        \"\"\"\n        Decorator for the creation function.\n        \"\"\"\n        _WRITE_MODEL[model] = func\n        return func\n    return decorated\n_MODEL_EXISTS = {}\ndef checks_existence(model):\n    \"\"\"\n    Register a model-specific existence check function.\n    \"\"\"\n    def decorated(func):\n        \"\"\"\n        Decorator for the existence function.\n        \"\"\"\n        _MODEL_EXISTS[model] = func\n        return func\n    return decorated\ndef hash_data(hash_):\n    \"\"\"\n    Convert strings from a Lettuce hash to appropriate types\n    \"\"\"\n    res = {}\n    for key, value in hash_.items():\n        if type(value) in (str, unicode):\n            if value == \"true\":\n                value = True\n            elif value == \"false\":\n                value = False\n            elif value == \"null\":\n                value = None\n            elif value.isdigit() and not re.match(\"^0[0-9]+\", value):\n                value = int(value)\n            elif re.match(r'^\\d{4}-\\d{2}-\\d{2}$', value):\n                value = datetime.strptime(value, \"%Y-%m-%d\")\n        res[key] = value\n    return res\ndef hashes_data(step):\n    \"\"\"\n    Convert strings from step hashes to appropriate types\n    \"\"\"\n    return [hash_data(hash_) for hash_ in step.hashes]\ndef get_model(model):\n    \"\"\"\n    Convert a model's verbose name to the model class. This allows us to\n    use the models verbose name in steps.\n    \"\"\"\n    name = model.lower()\n    model = MODELS.get(model, None)\n    assert model, \"Could not locate model by name '%s'\" % name\n    return model\ndef reset_sequence(model):\n    \"\"\"\n    Reset the ID sequence for a model.\n    \"\"\"\n    sql = connection.ops.sequence_reset_sql(no_style(), [model])\n    for cmd in sql:\n        connection.cursor().execute(cmd)\ndef create_models(model, data):\n    \"\"\"\n    Create models for each data hash. Wrapper around write_models.\n    \"\"\"\n    return write_models(model, data, None)\ndef write_models(model, data, field=None):\n    \"\"\"\n    Create or update models for each data hash. If field is present, it is the\n    field that is used to get the existing models out of the database to update\n    them; otherwise, new models are created.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    written = []\n    for hash_ in data:\n        if field:\n            if field not in hash_:\n                raise KeyError((\"The \\\"%s\\\" field is required for all update \"\n                                \"operations\") % field)\n            model_kwargs = {field: hash_[field]}\n            model_obj = model.objects.get(**model_kwargs)\n            for to_set, val in hash_.items():\n                setattr(model_obj, to_set, val)\n            model_obj.save()\n        else:\n            model_obj = model.objects.create(**hash_)\n        written.append(model_obj)\n    reset_sequence(model)\n    return written\ndef _dump_model(model, attrs=None):\n    \"\"\"\n    Dump the model fields for debugging.\n    \"\"\"\n    for field in model._meta.fields:\n        print '%s=%s,' % (field.name, str(getattr(model, field.name))),\n    if attrs is not None:\n        for attr in attrs:\n            print '%s=%s,' % (attr, str(getattr(model, attr))),\n    for field in model._meta.many_to_many:\n        vals = getattr(model, field.name)\n        print '%s=%s (%i),' % (\n            field.name,\n            ', '.join(map(str, vals.all())),\n            vals.count()),\n    print\ndef models_exist(model, data, queryset=None):\n    \"\"\"\n    Check whether the models defined by @data exist in the @queryset.\n    \"\"\"\n    if hasattr(data, 'hashes'):\n        data = hashes_data(data)\n    if not queryset:\n        queryset = model.objects\n    failed = 0\n    try:\n        for hash_ in data:\n            fields = {}\n            extra_attrs = {}\n", "answers": ["            for k, v in hash_.iteritems():"], "length": 546, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "7ae84ee3dc227ab3ad301914db5aa12c8e0ecb2042da37aa"}
{"input": "", "context": "## This file is part of Invenio.\n## Copyright (C) 2009, 2010, 2011 CERN.\n##\n## Invenio is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 2 of the\n## License, or (at your option) any later version.\n##\n## Invenio is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Invenio; if not, write to the Free Software Foundation, Inc.,\n## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n# pylint: disable=C0103\n\"\"\"Invenio BibEdit Administrator Interface.\"\"\"\n__revision__ = \"$Id\"\n__lastupdated__ = \"\"\"$Date: 2008/08/12 09:26:46 $\"\"\"\nimport cProfile\nimport cStringIO\nimport pstats\nfrom invenio.jsonutils import json, json_unicode_to_utf8\nfrom invenio.access_control_engine import acc_authorize_action\nfrom invenio.bibedit_engine import (perform_request_ajax,\n                                    perform_request_init,\n                                    perform_request_newticket,\n                                    perform_request_compare,\n                                    perform_request_init_template_interface,\n                                    perform_request_ajax_template_interface)\nfrom invenio.bibedit_utils import user_can_edit_record_collection\nfrom invenio.config import CFG_SITE_LANG, CFG_SITE_SECURE_URL, CFG_SITE_RECORD\nfrom invenio.messages import gettext_set_language\nfrom invenio.urlutils import redirect_to_url\nfrom invenio.webinterface_handler import WebInterfaceDirectory, wash_urlargd\nfrom invenio.webpage import page\nfrom invenio.webuser import collect_user_info, getUid, page_not_authorized\nnavtrail = (' <a class=\"navtrail\" href=\\\"%s/help/admin\\\">Admin Area</a> '\n            ) % CFG_SITE_SECURE_URL\nnavtrail_bibedit = (' <a class=\"navtrail\" href=\\\"%s/help/admin\\\">Admin Area</a> ' + \\\n                    ' &gt; <a class=\"navtrail\" href=\\\"%s/%s/edit\\\">Record Editor</a>'\n            ) % (CFG_SITE_SECURE_URL, CFG_SITE_SECURE_URL, CFG_SITE_RECORD)\ndef wrap_json_req_profiler(func):\n    def json_req_profiler(self, req, form):\n        if \"ajaxProfile\" in form:\n            profiler = cProfile.Profile()\n            return_val = profiler.runcall(func, self, req, form)\n            results = cStringIO.StringIO()\n            stats = pstats.Stats(profiler, stream=results)\n            stats.sort_stats('cumulative')\n            stats.print_stats(100)\n            json_in = json.loads(str(form['jsondata']))\n            # Deunicode all strings (Invenio doesn't have unicode\n            # support).\n            json_in = json_unicode_to_utf8(json_in)\n            json_data = json.loads(return_val)\n            json_data.update({\"profilerStats\": \"<pre style='overflow: scroll'>\" + json_in['requestType'] + results.getvalue() + \"</pre>\"})\n            return json.dumps(json_data)\n        else:\n            return func(self, req, form)\n    return json_req_profiler\nclass WebInterfaceEditPages(WebInterfaceDirectory):\n    \"\"\"Defines the set of /edit pages.\"\"\"\n    _exports = ['', 'new_ticket', 'compare_revisions', 'templates']\n    def __init__(self, recid=None):\n        \"\"\"Initialize.\"\"\"\n        self.recid = recid\n    @wrap_json_req_profiler\n    def index(self, req, form):\n        \"\"\"Handle all BibEdit requests.\n        The responsibilities of this functions is:\n        * JSON decoding and encoding.\n        * Redirection, if necessary.\n        * Authorization.\n        * Calling the appropriate function from the engine.\n        \"\"\"\n        uid = getUid(req)\n        argd = wash_urlargd(form, {'ln': (str, CFG_SITE_LANG)})\n        # If it is an Ajax request, extract any JSON data.\n        ajax_request, recid = False, None\n        if form.has_key('jsondata'):\n            json_data = json.loads(str(form['jsondata']))\n            # Deunicode all strings (Invenio doesn't have unicode\n            # support).\n            json_data = json_unicode_to_utf8(json_data)\n            ajax_request = True\n            if json_data.has_key('recID'):\n                recid = json_data['recID']\n            json_response = {'resultCode': 0, 'ID': json_data['ID']}\n        # Authorization.\n        user_info = collect_user_info(req)\n        if user_info['email'] == 'guest':\n            # User is not logged in.\n            if not ajax_request:\n                # Do not display the introductory recID selection box to guest\n                # users (as it used to be with v0.99.0):\n                dummy_auth_code, auth_message = acc_authorize_action(req,\n                                                               'runbibedit')\n                referer = '/edit/'\n                if self.recid:\n                    referer = '/%s/%s/edit/' % (CFG_SITE_RECORD, self.recid)\n                return page_not_authorized(req=req, referer=referer,\n                                           text=auth_message, navtrail=navtrail)\n            else:\n                # Session has most likely timed out.\n                json_response.update({'resultCode': 100})\n                return json.dumps(json_response)\n        elif self.recid:\n            # Handle redirects from /record/<record id>/edit\n            # generic URL.\n            redirect_to_url(req, '%s/%s/edit/#state=edit&recid=%s&recrev=%s' % (\n                    CFG_SITE_SECURE_URL, CFG_SITE_RECORD, self.recid, \"\"))\n        elif recid is not None:\n            json_response.update({'recID': recid})\n            if json_data['requestType'] == \"getRecord\":\n                # Authorize access to record.\n                if not user_can_edit_record_collection(req, recid):\n                    json_response.update({'resultCode': 101})\n                    return json.dumps(json_response)\n        # Handle request.\n        if not ajax_request:\n            # Show BibEdit start page.\n            body, errors, warnings = perform_request_init(uid, argd['ln'], req, __lastupdated__)\n            title = 'Record Editor'\n            return page(title       = title,\n                        body        = body,\n                        errors      = errors,\n                        warnings    = warnings,\n                        uid         = uid,\n                        language    = argd['ln'],\n                        navtrail    = navtrail,\n                        lastupdated = __lastupdated__,\n                        req         = req,\n                        body_css_classes = ['bibedit'])\n        else:\n            # Handle AJAX request.\n            json_response.update(perform_request_ajax(req, recid, uid,\n                                                      json_data))\n            return json.dumps(json_response)\n    def compare_revisions(self, req, form):\n        \"\"\"Handle the compare revisions request\"\"\"\n        argd = wash_urlargd(form, { \\\n                'ln': (str, CFG_SITE_LANG), \\\n                'rev1' : (str, ''), \\\n                'rev2' : (str, ''), \\\n                'recid': (int, 0)})\n        ln = argd['ln']\n        uid = getUid(req)\n        _ = gettext_set_language(ln)\n        # Checking if currently logged user has permission to perform this request\n        auth_code, auth_message = acc_authorize_action(req, 'runbibedit')\n        if auth_code != 0:\n            return page_not_authorized(req=req, referer=\"/edit\",\n                                       text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        rev1 = argd['rev1']\n        rev2 = argd['rev2']\n        ln = argd['ln']\n        body, errors, warnings = perform_request_compare(ln, recid, rev1, rev2)\n        return page(title = _(\"Comparing two record revisions\"),\n                    body =  body,\n                    errors = errors,\n                    warnings = warnings,\n                    uid = uid,\n                    language = ln,\n                    navtrail    = navtrail,\n                    lastupdated = __lastupdated__,\n                    req         = req,\n                    body_css_classes = ['bibedit'])\n    def new_ticket(self, req, form):\n        \"\"\"handle a edit/new_ticket request\"\"\"\n        argd = wash_urlargd(form, {'ln': (str, CFG_SITE_LANG), 'recid': (int, 0)})\n        ln = argd['ln']\n        _ = gettext_set_language(ln)\n        auth_code, auth_message = acc_authorize_action(req, 'runbibedit')\n        if auth_code != 0:\n", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "length": 756, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "04e295ceba60a64b82588ffaa2a96d5c35e2e469380e6944"}
{"input": "", "context": "# Copyright (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>\n# Copyright 2015 Abhijit Menon-Sen <ams@2ndQuadrant.com>\n# Copyright 2017 Toshio Kuratomi <tkuratomi@ansible.com>\n# Copyright (c) 2017 Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\nDOCUMENTATION = '''\n    connection: ssh\n    short_description: connect via ssh client binary\n    description:\n        - This connection plugin allows ansible to communicate to the target machines via normal ssh command line.\n        - Ansible does not expose a channel to allow communication between the user and the ssh process to accept\n          a password manually to decrypt an ssh key when using this connection plugin (which is the default). The\n          use of ``ssh-agent`` is highly recommended.\n    author: ansible (@core)\n    version_added: historical\n    options:\n      host:\n          description: Hostname/ip to connect to.\n          default: inventory_hostname\n          vars:\n               - name: ansible_host\n               - name: ansible_ssh_host\n      host_key_checking:\n          description: Determines if ssh should check host keys\n          type: boolean\n          ini:\n              - section: defaults\n                key: 'host_key_checking'\n              - section: ssh_connection\n                key: 'host_key_checking'\n                version_added: '2.5'\n          env:\n              - name: ANSIBLE_HOST_KEY_CHECKING\n              - name: ANSIBLE_SSH_HOST_KEY_CHECKING\n                version_added: '2.5'\n          vars:\n              - name: ansible_host_key_checking\n                version_added: '2.5'\n              - name: ansible_ssh_host_key_checking\n                version_added: '2.5'\n      password:\n          description: Authentication password for the C(remote_user). Can be supplied as CLI option.\n          vars:\n              - name: ansible_password\n              - name: ansible_ssh_pass\n              - name: ansible_ssh_password\n      ssh_args:\n          description: Arguments to pass to all ssh cli tools\n          default: '-C -o ControlMaster=auto -o ControlPersist=60s'\n          ini:\n              - section: 'ssh_connection'\n                key: 'ssh_args'\n          env:\n              - name: ANSIBLE_SSH_ARGS\n          vars:\n              - name: ansible_ssh_args\n                version_added: '2.7'\n      ssh_common_args:\n          description: Common extra args for all ssh CLI tools\n          ini:\n              - section: 'ssh_connection'\n                key: 'ssh_common_args'\n                version_added: '2.7'\n          env:\n              - name: ANSIBLE_SSH_COMMON_ARGS\n                version_added: '2.7'\n          vars:\n              - name: ansible_ssh_common_args\n      ssh_executable:\n          default: ssh\n          description:\n            - This defines the location of the ssh binary. It defaults to ``ssh`` which will use the first ssh binary available in $PATH.\n            - This option is usually not required, it might be useful when access to system ssh is restricted,\n              or when using ssh wrappers to connect to remote hosts.\n          env: [{name: ANSIBLE_SSH_EXECUTABLE}]\n          ini:\n          - {key: ssh_executable, section: ssh_connection}\n          #const: ANSIBLE_SSH_EXECUTABLE\n          version_added: \"2.2\"\n          vars:\n              - name: ansible_ssh_executable\n                version_added: '2.7'\n      sftp_executable:\n          default: sftp\n          description:\n            - This defines the location of the sftp binary. It defaults to ``sftp`` which will use the first binary available in $PATH.\n          env: [{name: ANSIBLE_SFTP_EXECUTABLE}]\n          ini:\n          - {key: sftp_executable, section: ssh_connection}\n          version_added: \"2.6\"\n          vars:\n              - name: ansible_sftp_executable\n                version_added: '2.7'\n      scp_executable:\n          default: scp\n          description:\n            - This defines the location of the scp binary. It defaults to `scp` which will use the first binary available in $PATH.\n          env: [{name: ANSIBLE_SCP_EXECUTABLE}]\n          ini:\n          - {key: scp_executable, section: ssh_connection}\n          version_added: \"2.6\"\n          vars:\n              - name: ansible_scp_executable\n                version_added: '2.7'\n      scp_extra_args:\n          description: Extra exclusive to the ``scp`` CLI\n          vars:\n              - name: ansible_scp_extra_args\n          env:\n            - name: ANSIBLE_SCP_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: scp_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      sftp_extra_args:\n          description: Extra exclusive to the ``sftp`` CLI\n          vars:\n              - name: ansible_sftp_extra_args\n          env:\n            - name: ANSIBLE_SFTP_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: sftp_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      ssh_extra_args:\n          description: Extra exclusive to the 'ssh' CLI\n          vars:\n              - name: ansible_ssh_extra_args\n          env:\n            - name: ANSIBLE_SSH_EXTRA_ARGS\n              version_added: '2.7'\n          ini:\n            - key: ssh_extra_args\n              section: ssh_connection\n              version_added: '2.7'\n      retries:\n          # constant: ANSIBLE_SSH_RETRIES\n          description: Number of attempts to connect.\n          default: 3\n          type: integer\n          env:\n            - name: ANSIBLE_SSH_RETRIES\n          ini:\n            - section: connection\n              key: retries\n            - section: ssh_connection\n              key: retries\n          vars:\n            - name: ansible_ssh_retries\n              version_added: '2.7'\n      port:\n          description: Remote port to connect to.\n          type: int\n          default: 22\n          ini:\n            - section: defaults\n              key: remote_port\n          env:\n            - name: ANSIBLE_REMOTE_PORT\n          vars:\n            - name: ansible_port\n            - name: ansible_ssh_port\n      remote_user:\n          description:\n              - User name with which to login to the remote server, normally set by the remote_user keyword.\n              - If no user is supplied, Ansible will let the ssh client binary choose the user as it normally\n          ini:\n            - section: defaults\n              key: remote_user\n          env:\n            - name: ANSIBLE_REMOTE_USER\n          vars:\n            - name: ansible_user\n            - name: ansible_ssh_user\n      pipelining:\n          default: ANSIBLE_PIPELINING\n          description:\n            - Pipelining reduces the number of SSH operations required to execute a module on the remote server,\n              by executing many Ansible modules without actual file transfer.\n            - This can result in a very significant performance improvement when enabled.\n            - However this conflicts with privilege escalation (become).\n              For example, when using sudo operations you must first disable 'requiretty' in the sudoers file for the target hosts,\n              which is why this feature is disabled by default.\n          env:\n            - name: ANSIBLE_PIPELINING\n            #- name: ANSIBLE_SSH_PIPELINING\n          ini:\n            - section: defaults\n              key: pipelining\n            #- section: ssh_connection\n            #  key: pipelining\n          type: boolean\n          vars:\n            - name: ansible_pipelining\n            - name: ansible_ssh_pipelining\n      private_key_file:\n          description:\n              - Path to private key file to use for authentication\n          ini:\n            - section: defaults\n              key: private_key_file\n          env:\n            - name: ANSIBLE_PRIVATE_KEY_FILE\n          vars:\n            - name: ansible_private_key_file\n            - name: ansible_ssh_private_key_file\n      control_path:\n        description:\n          - This is the location to save ssh's ControlPath sockets, it uses ssh's variable substitution.\n          - Since 2.3, if null, ansible will generate a unique hash. Use `%(directory)s` to indicate where to use the control dir path setting.\n        env:\n          - name: ANSIBLE_SSH_CONTROL_PATH\n        ini:\n          - key: control_path\n            section: ssh_connection\n        vars:\n          - name: ansible_control_path\n            version_added: '2.7'\n      control_path_dir:\n        default: ~/.ansible/cp\n        description:\n          - This sets the directory to use for ssh control path if the control path setting is null.\n          - Also, provides the `%(directory)s` variable for the control path setting.\n        env:\n          - name: ANSIBLE_SSH_CONTROL_PATH_DIR\n        ini:\n          - section: ssh_connection\n            key: control_path_dir\n        vars:\n          - name: ansible_control_path_dir\n            version_added: '2.7'\n      sftp_batch_mode:\n        default: 'yes'\n        description: 'TODO: write it'\n        env: [{name: ANSIBLE_SFTP_BATCH_MODE}]\n        ini:\n        - {key: sftp_batch_mode, section: ssh_connection}\n        type: bool\n        vars:\n          - name: ansible_sftp_batch_mode\n            version_added: '2.7'\n      scp_if_ssh:\n        default: smart\n        description:\n          - \"Prefered method to use when transfering files over ssh\"\n          - When set to smart, Ansible will try them until one succeeds or they all fail\n          - If set to True, it will force 'scp', if False it will use 'sftp'\n        env: [{name: ANSIBLE_SCP_IF_SSH}]\n        ini:\n        - {key: scp_if_ssh, section: ssh_connection}\n        vars:\n          - name: ansible_scp_if_ssh\n            version_added: '2.7'\n      use_tty:\n        version_added: '2.5'\n        default: 'yes'\n        description: add -tt to ssh commands to force tty allocation\n        env: [{name: ANSIBLE_SSH_USETTY}]\n        ini:\n", "answers": ["        - {key: usetty, section: ssh_connection}"], "length": 968, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "372cbea864b598e206205434a3c9016ac96913fb9e29fd56"}
{"input": "", "context": "//#############################################################################\n//#                                                                           #\n//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #\n//#                                                                           #\n//#  This program is free software: you can redistribute it and/or modify     #\n//#  it under the terms of the GNU Affero General Public License as           #\n//#  published by the Free Software Foundation, either version 3 of the       #\n//#  License, or (at your option) any later version.                          # \n//#                                                                           #\n//#  This program is distributed in the hope that it will be useful,          #\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\n//#  GNU Affero General Public License for more details.                      #\n//#                                                                           #\n//#  You should have received a copy of the GNU Affero General Public License #\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\n//#                                                                           #\n//#############################################################################\n//#EOH\n// Template ver. 1.0.2 - Last modified on 08/03/2004 10:42 by Marius Mihalec\npackage ims.dto.client;\npublic final class Wardlist\n{\n\tprivate WardlistFilter lastGetFilter = null;\n\tprivate final String serviceName = \"WARDLIST\";\n\tprivate boolean listInProgress = false;\n\t/**\n\t * Represents the Data Transfer Object Connection used for this client object.\n\t */ \n\tpublic ims.dto.Connection Connection = null;\n\t/**\n\t * Represents the filter used by the current Data Transfer Object.\n\t */ \n\tpublic WardlistFilter Filter = new WardlistFilter();\t\t\t\n\t/**\n\t * Contains the data records for the current Data Transfer Object\n\t */ \n\tpublic WardlistCollection DataCollection = new WardlistCollection();\n\t/**\n\t * Creates a new Wardlist Data Transfer Object.\n\t */ \n\tpublic Wardlist(ims.dto.Connection connection) throws ims.dto.Exception\n\t{\t\n\t\tif(connection == null)\n\t\t\tthrow new ims.dto.Exception(\"Invalid Data Transfer Object Connection\");\n\t\tthis.Connection = connection;\n\t}\n\t/**\n\t * Creates a new copy of the current Data Transfer Object\n\t */\n\tpublic Wardlist cloneObject() throws ims.dto.Exception\n\t{\n\t\tWardlist cloneObject = new Wardlist(Connection);\n\t\t\t\n\t\tif(Filter != null)\n\t\t\tcloneObject.Filter = Filter.cloneObject();\t\t\t\n\t\t\t\t\t\n\t\tif(lastGetFilter != null)\n\t\t\tcloneObject.lastGetFilter = lastGetFilter.cloneObject();\n\t\telse\n\t\t\tcloneObject.lastGetFilter = null;\n\t\t\t\t\n\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tint index = cloneObject.DataCollection.add();\n\t\t\t\n\t\t\tcloneObject.DataCollection.get(index).Rsno = DataCollection.get(x).Rsno;\n\t\t\tcloneObject.DataCollection.get(index).Hpcd = DataCollection.get(x).Hpcd;\n\t\t\tcloneObject.DataCollection.get(index).Site = DataCollection.get(x).Site;\n\t\t\tcloneObject.DataCollection.get(index).Name = DataCollection.get(x).Name;\n\t\t\tcloneObject.DataCollection.get(index).Code = DataCollection.get(x).Code;\n\t\t\tcloneObject.DataCollection.get(index).Stat = DataCollection.get(x).Stat;\n\t\t\tcloneObject.DataCollection.get(index).At01 = DataCollection.get(x).At01;\n\t\t\tcloneObject.DataCollection.get(index).Maxno = DataCollection.get(x).Maxno;\n\t\t\tcloneObject.DataCollection.get(index).Allstat = DataCollection.get(x).Allstat;\n\t\t\tcloneObject.DataCollection.get(index).__orderby = DataCollection.get(x).__orderby;\n\t\t\t\t\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\treturn cloneObject;\n\t}\t\t\n\t/**\n\t * Returns the number of records using the specified filter. This method always returns a non null result. The ID field holds the count result (when greater or equal to zero) or the error number (when less than zero).\n\t */\n\tpublic ims.dto.Result count()\n\t{\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Count\");\n\t\t\t\n\t\tint result = Connection.count(serviceName, encodeNASFilter());\n\t\tif(result >= 0)\n\t\t\treturn new ims.dto.Result(result, \"No error detected. The count result is held in the ID field\", \"DTO.Client.Wardlist.Count\");\n\t\t\t\t\n\t\treturn Connection.getLastError();\t\t\t\t\n\t}\t\t\n\t/**\n\t * Returns the list of records using the specified filter. Use maxRecords to limit the number of records returned. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result list(int maxRecords)\n\t{\n\t\tif(maxRecords <= 0)\n\t\t\treturn list();\t\t\n\t\t\t\t\n\t\treturn list(false, maxRecords);\n\t}\t\n\t/**\n\t* Returns the list of records using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result list()\n\t{\t\n\t\treturn list(true, 0);\n\t}\t\t\t\t\n\t/**\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result get()\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Get\");\n\t\t\t\n\t\tims.dto.Result result = Connection.get(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\n\t\tdecodeNASMessageWithRepeatingGroups();\t\t\n\t\t\t\n\t\treturn null;\n\t}\t\n\t/**\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result getLast()\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Get\");\n\t\t\t\n\t\tims.dto.Result result = Connection.getLast(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\n\t\tdecodeNASMessageWithRepeatingGroups();\t\n\t\t\t\n\t\treturn null;\n\t}\t\t\t\t\t\n\t/**\n\t* Performs data validation prior to update. If the result returned is not null an error occured.\n\t*/\n\tpublic ims.dto.Result getForUpdate()\n\t{\t\t\t\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.GetForUpdate\");\n\t\t\t\t\t\t\t\n\t\tif(lastGetFilter == null)\t\n\t\t\treturn new ims.dto.Result(\"Last get method failed or not called\", \"DTO.Client.Wardlist.GetForUpdate\");\n\t\t\t\n\t\tims.dto.Result result = Connection.getForUpdate(serviceName, encodeNASFilter(lastGetFilter));\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\tif(Connection.countResponseItems(Connection.getValueAt(6)) == 0)\n\t\t\treturn null;\n\t\t\t\n\t\tDataCollection.clear();\t\n\t\tdecodeNASMessageWithRepeatingGroups();\n\t\t\t\t\n\t\treturn new ims.dto.Result(\"The data was changed by another user\", \"DTO.Client.Wardlist.GetForUpdate\");\n\t}\t\t\n\t/**\n\t* Inserts a new record. This method always returns a non null result. The ID field holds the Unique ID for the inserted record (when greater than zero) or the error number (when less than zero). If the ID is zero, the record was inserted but the server did not returned the Unique ID.\n\t*/\n\tpublic ims.dto.Result insert()\n\t{\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Insert\");\n\t\t\t\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to insert\", \"DTO.Client.Wardlist.Insert\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple object insert not allowed\", \"DTO.Client.Wardlist.Insert\");\n\t\t\t\n\t\tims.dto.Result result = Connection.insert(serviceName, encodeNASMessage());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\t\t\n\t\tint recordID = 0;\n\t\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\trecordID = new Integer(Connection.getValueAt(2)).intValue();\n\t\t}\n\t\tcatch(NumberFormatException ex)\n\t\t{\n\t\t\treturn new ims.dto.Result(\"Invalid record ID returned\", \"DTO.Client.Wardlist.Insert\");\n\t\t}\n\t\t\n\t\treturn new ims.dto.Result(recordID, \"No error. The ID of the new record is in the ID field\", \"DTO.Client.Wardlist.Insert\");\n\t}\n\t/**\n\t * Executes a specific action. This method always returns a non null result.\n\t */\n\tpublic ims.dto.Result executeAction(String action)\n\t{\n\t\tif(action.length() == 0)\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"Data container is empty\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple objects are not allowed\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t\t\n\t\tims.dto.Result result = Connection.executeAction(serviceName, encodeNASMessage(), action);\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new ims.dto.Result(new Integer(Connection.getValueAt(2)).intValue(), \"No error\", \"DTO.Client.Wardlist.ExecuteAction\");\t\n\t\t}\n\t\tcatch(NumberFormatException ex)\n\t\t{\n\t\t\treturn new ims.dto.Result(\"Invalid server response\", \"DTO.Client.Wardlist.ExecuteAction\");\n\t\t}\n\t}\n\t/**\n\t * Transfers a record. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result transferData(String action)\n\t{\n\t\tif(action.length() == 0)\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.TransferData\");\n\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to transfer\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple objects not allowed\", \"DTO.Client.Wardlist.TransferData\");\n\t\t\t\n\t\tims.dto.Result result = Connection.transferData(serviceName, encodeNASMessage(), action.toUpperCase());\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\n\t\tDataCollection.clear();\n\t\tdecodeNASMessageWithRepeatingGroups();\t\n\t\t\n\t\treturn null;\n\t}\n\t/**\n\t * Updates a record. If the result returned is not null an error occured.\n\t */\n\tpublic ims.dto.Result update()\n\t{\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.Update\");\n\t\t\t\t\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn new ims.dto.Result(\"No data to update\", \"DTO.Client.Wardlist.Update\");\t\n\t\t\t\n\t\tif(DataCollection.count() > 1)\n\t\t\treturn new ims.dto.Result(\"Multiple object update not allowed\", \"DTO.Client.Wardlist.Update\");\n\t\t\t\n\t\treturn Connection.update(serviceName, encodeNASMessage());\n\t}\n\t\t\t\n\tprivate ims.dto.Result stopList()\n\t{\n\t\tif(!listInProgress)\n\t\t\treturn new ims.dto.Result(\"No active list running\", \"DTO.Client.Wardlist.StopList\");\n\t\t\t\t\n\t\tlistInProgress = false;\t\t\t\t\n\t\treturn null;\n\t}\n\t\n\tprivate ims.dto.Result nextList()\n\t{\t\t\t\t\n\t\tims.dto.Result result = Connection.nextList(serviceName);\n\t\tif(result != null)\n\t\t\treturn result;\n\t\t\t\t\t\n\t\tdecodeNASMessage();\t\t\n\t\treturn null;\n\t}\n\t\t\n\tprivate boolean canContinueToList(boolean loadAllRecords, int maxRecords)\n\t{\n\t\tif(!listInProgress)\n\t\t\treturn false;\t\t\t\t\n\t\tif(loadAllRecords)\n\t\t\treturn true;\t\t\t\n\t\treturn DataCollection.count() < maxRecords;\n\t}\n\t\n\tprivate ims.dto.Result list(boolean loadAllRecords, int maxRecords)\n\t{\t\n\t\tDataCollection.clear();\n\t\t\t\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Wardlist.List\");\n\t\t\t\t\t\t\t\n\t\tlistInProgress = true;\t\n\t\tims.dto.Result result = Connection.list(serviceName, encodeNASFilter());\n\t\tif(result != null)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\tif(result.getId() == -2) // NAS list empty\n\t\t\t\treturn null;\n\t\t\treturn result;\n\t\t}\n\t\t\t\t\t\n\t\tif(decodeNASMessage() == 0)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn null;\n\t\t}\n\t\t\t\t\t\t\n\t\tims.dto.Result execResult = null;\n\t\twhile(execResult == null && canContinueToList(loadAllRecords, maxRecords))\n\t\t\texecResult = nextList();\n\t\t\t\t\t\t\n\t\tif(execResult != null)\n\t\t{\n\t\t\tif(execResult.getId() != -3) \n\t\t\t{\n\t\t\t\tlistInProgress = false;\n\t\t\t\treturn execResult;\n\t\t\t}\n\t\t}\n\t\telse // NAS next list empty\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn null;\n\t\t}\t\t\t\t\n\t\t\t\t\t\n\t\tif(!loadAllRecords || !listInProgress)\n\t\t{\n\t\t\tlistInProgress = false;\n\t\t\treturn Connection.stopList(serviceName);\n\t\t}\n\t\t\n\t\tlistInProgress = false;\n\t\treturn null;\n\t}\t\n\tprivate String encodeNASFilter()\n\t{\n\t\treturn encodeNASFilter(Filter);\n\t}\n\tprivate String encodeNASFilter(WardlistFilter filter)\n\t{\n\t\tif(filter == null)\n\t\t\treturn \"\";\n\t\t\t\n\t\tString filterString = \"\";\n\t\t\n\t\tif(Filter.Rsno != null && filter.Rsno.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"RSNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Rsno;\n\t\t}\n\t\t\n\t\tif(Filter.Hpcd != null && filter.Hpcd.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"HPCD\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Hpcd;\n\t\t}\n\t\t\n\t\tif(Filter.Site != null && filter.Site.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"SITE\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Site;\n\t\t}\n\t\t\n\t\tif(Filter.Name != null && filter.Name.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"NAME\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Name;\n\t\t}\n\t\t\n\t\tif(Filter.Code != null && filter.Code.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"CODE\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Code;\n\t\t}\n\t\t\n\t\tif(Filter.Stat != null && filter.Stat.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"STAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Stat;\n\t\t}\n\t\t\n\t\tif(Filter.At01 != null && filter.At01.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"AT01\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.At01;\n\t\t}\n\t\t\n\t\tif(Filter.Maxno != null && filter.Maxno.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"MAXNO\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Maxno;\n\t\t}\n\t\t\n\t\tif(Filter.Allstat != null && filter.Allstat.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"ALLSTAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Allstat;\n\t\t}\n\t\t\n\t\tif(Filter.__orderby != null && filter.__orderby.length()> 0)\n\t\t{\n\t\t\tif(filterString.length() > 0)\n\t\t\t\tfilterString += ims.dto.NASMessageCodes.PAIRSEPARATOR;\n\t\t\tfilterString += \"__ORDERBY\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.__orderby;\n\t\t}\n\t\t\n\t\treturn filterString;\t\n\t}\n\t\n\tprivate String encodeNASMessage()\n\t{\n\t\tString dataString = \"\";\n\t\tif(DataCollection.count() == 0)\n\t\t\treturn dataString;\n\t\t\t\n", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "length": 1476, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "926cb6e2ce08c9cc6aed3080e1deed10bb9e7c63376255df"}
{"input": "", "context": "# -*- coding: utf-8 -*-\n##\n## This file is part of Harvesting Kit.\n## Copyright (C) 2013, 2014, 2015 CERN.\n##\n## Harvesting Kit is free software; you can redistribute it and/or\n## modify it under the terms of the GNU General Public License as\n## published by the Free Software Foundation; either version 2 of the\n## License, or (at your option) any later version.\n##\n## Harvesting Kit is distributed in the hope that it will be useful, but\n## WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n## General Public License for more details.\n##\n## You should have received a copy of the GNU General Public License\n## along with Harvesting Kit; if not, write to the Free Software Foundation, Inc.,\n## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\nimport re\nimport sys\nimport time\nfrom os import pardir\nfrom os.path import (join,\n                     dirname,\n                     basename)\ntry:\n    from invenio.errorlib import register_exception\nexcept ImportError:\n    register_exception = lambda a=1, b=2: True\nfrom harvestingkit.minidom_utils import (get_value_in_tag,\n                                         xml_to_text)\nfrom harvestingkit.utils import (format_arxiv_id,\n                                 add_nations_field)\nfrom harvestingkit.bibrecord import (\n    record_add_field,\n    create_record,\n    record_xml_output,\n)\nfrom xml.dom.minidom import parse\nclass JATSParser(object):\n    def __init__(self, tag_to_remove=None, extract_nations=False):\n        self.references = None\n        self.tag_to_remove = tag_to_remove\n        self.extract_nations = extract_nations\n    def get_article(self, path):\n        return parse(open(path))\n    def get_title(self, xml):\n        try:\n            return get_value_in_tag(xml, \"article-title\", tag_to_remove=self.tag_to_remove)\n        except Exception:\n            print >> sys.stderr, \"Can't find title\"\n    def get_issn(self, xml):\n        issns = xml.getElementsByTagName('issn')\n        ret = None\n        for issn in issns:\n            if issn.getAttribute('date-type').encode('utf-8') == 'epub' or issn.getAttribute('pub-type').encode('utf-8') == 'epub':\n                if issn.getAttribute(\"pub-type\").encode('utf-8'):\n                    ret = issn.getAttribute(\"pub-type\").encode('utf-8')\n                else:\n                    ret = issn.getAttribute(\"date-type\").encode('utf-8')\n        if not ret and issns:\n            ret = xml_to_text(issns[0])\n        return ret\n    def get_date(self, xml):\n        dates = xml.getElementsByTagName('pub-date')\n        ret = None\n        for date in dates:\n            if date.getAttribute('date-type').encode('utf-8') == 'epub' or date.getAttribute('pub-type').encode('utf-8') == 'epub':\n                ret = get_value_in_tag(date, 'year')\n        if not ret and dates:\n            return dates[0]\n        else:\n            return ret\n    def get_publication_information(self, xml):\n        jid = get_value_in_tag(xml, \"journal-title\")\n        journal = \"\"\n        if \"European Physical Journal\" in jid:\n            journal = \"EPJC\"\n        try:\n            art = xml.getElementsByTagName('article-meta')[0]\n        except IndexError as err:\n            register_exception()\n            print >> sys.stderr, \"ERROR: XML corrupted: %s\" % err\n            pass\n        except Exception as err:\n            register_exception()\n            print >> sys.stderr, \"ERROR: Exception captured: %s\" % err\n            pass\n        issn = self.get_issn(art)\n        volume = get_value_in_tag(art, \"volume\")\n        issue = get_value_in_tag(art, \"issue\")\n        year = self.get_date(art)\n        first_page = get_value_in_tag(art, \"fpage\")\n        last_page = get_value_in_tag(art, \"lpage\")\n        doi = self.get_doi(art)\n        return (journal, issn, volume, issue, first_page, last_page, year, doi)\n    def get_doi(self, xml):\n        ids = xml.getElementsByTagName('article-id')\n        ret = \"\"\n        for i in ids:\n            if i.getAttribute('pub-id-type').encode('utf-8') == 'doi':\n                ret = xml_to_text(i)\n        if not ret:\n            print >> sys.stdout, \"Can't find DOI.\"\n        return ret\n    def _get_orcid(self, xml_author):\n        try:\n            contrib_id = xml_author.getElementsByTagName('contrib-id')[0]\n            if contrib_id.getAttribute('contrib-id-type') == 'orcid':\n                orcid_raw = xml_to_text(contrib_id)\n                pattern = '\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d\\d-\\d\\d\\d[\\d|X]'\n                return re.search(pattern, orcid_raw).group()\n        except (IndexError, AttributeError):\n            return None\n    def get_authors(self, xml):\n        authors = []\n        for author in xml.getElementsByTagName(\"contrib\"):\n            # Springer puts colaborations in additional \"contrib\" tag so to\n            # avoid having fake author with all affiliations we skip \"contrib\"\n            # tag with \"contrib\" subtags.\n            if author.getElementsByTagName(\"contrib\"):\n                continue\n            tmp = {}\n            surname = get_value_in_tag(author, \"surname\")\n            if surname:\n                tmp[\"surname\"] = surname\n            given_name = get_value_in_tag(author, \"given-names\")\n            if given_name:\n                tmp[\"given_name\"] = given_name.replace('\\n', ' ')\n            if not surname and not given_name:\n                tmp[\"name\"] = get_value_in_tag(author, \"string-name\")\n            # It's not there yet\n            orcid = self._get_orcid(author)\n            if orcid:\n                tmp[\"orcid\"] = 'ORCID:{0}'.format(orcid)\n            # cross_refs = author.getElementsByTagName(\"ce:cross-ref\")\n            # if cross_refs:\n            #     tmp[\"cross_ref\"] = []\n            #     for cross_ref in cross_refs:\n            #         tmp[\"cross_ref\"].append(cross_ref.getAttribute(\"refid\").encode('utf-8'))\n            tmp[\"affiliations_ids\"] = []\n            tmp[\"contact_ids\"] = []\n            xrefs = author.getElementsByTagName(\"xref\")\n            for x in xrefs:\n                if x.getAttribute('ref-type').encode('utf-8') == 'aff':\n                    tmp[\"affiliations_ids\"].extend([a.encode('utf-8') for a in x.getAttribute('rid').split()])\n                if x.getAttribute('ref-type').encode('utf-8') == 'corresp':\n                    tmp[\"contact_ids\"].extend([a.encode('utf-8') for a in x.getAttribute('rid').split()])\n            authors.append(tmp)\n        affiliations = {}\n        for affiliation in xml.getElementsByTagName(\"aff\"):\n            aff_id = affiliation.getAttribute(\"id\").encode('utf-8')\n            # removes numbering in from affiliations\n            text = re.sub(r'^(\\d+,\\ ?)', \"\", xml_to_text(affiliation, delimiter=\", \"))\n            affiliations[aff_id] = text\n        emails = {}\n        for contact in xml.getElementsByTagName(\"corresp\"):\n            contact_id = contact.getAttribute(\"id\").encode('utf-8')\n            if contact.getElementsByTagName('email'):\n                text = xml_to_text(contact.getElementsByTagName('email')[0])\n                emails[contact_id] = text\n        implicit_affilations = True\n        for author in authors:\n            matching_ref = [ref for ref in author.get(\"affiliations_ids\") if ref in affiliations]\n            if matching_ref:\n                implicit_affilations = False\n                author[\"affiliation\"] = []\n                for i in xrange(0, len(matching_ref)):\n                    author[\"affiliation\"].append(affiliations[matching_ref[i]])\n            matching_contact = [cont for cont in author.get('contact_ids') if cont in emails]\n            if matching_contact:\n                author[\"email\"] = emails[matching_contact[0]]\n        if implicit_affilations and len(affiliations) > 1:\n            print >> sys.stderr, \"Implicit affiliations are used, but there are more than one affiliation: %s\" % affiliations\n        if implicit_affilations and len(affiliations) >= 1:\n            for author in authors:\n                author[\"affiliation\"] = []\n                for aff in affiliations.values():\n                    author[\"affiliation\"].append(aff)\n        return authors\n    def get_abstract(self, xml):\n        try:\n            return get_value_in_tag(xml, \"abstract\", tag_to_remove=self.tag_to_remove).replace(\"Abstract\", \"\", 1)\n        except Exception:\n            print >> sys.stderr, \"Can't find abstract\"\n    def get_copyright(self, xml, logger=None):\n        tags = [\"copyright-holder\", \"copyright-statement\"]\n        for tag in tags:\n            if tag is \"copyright-holder\":\n                ret = get_value_in_tag(xml, tag)\n                if not ret:\n                    if logger:\n                        logger.info(\"Can't find copyright, trying different tag.\")\n                    print >> sys.stderr, \"Can't find copyright, trying different tag.\"\n                else:\n                    return ret\n            else:\n                ret = get_value_in_tag(xml, tag)\n                if not ret:\n                    if logger:\n                        logger.info(\"Can't find copyright\")\n                    print >> sys.stderr, \"Can't find copyright\"\n                else:\n                    ret = ret.split('.')\n                    return ret[0]\n    def get_keywords(self, xml):\n        try:\n            kwd_groups = xml.getElementsByTagName('kwd-group')\n            pacs = []\n            other = []\n            for kwd_group in kwd_groups:\n                if kwd_group.getAttribute('kwd-group-type').encode('utf-8') == \"pacs\":\n                    pacs = [xml_to_text(keyword, tag_to_remove=self.tag_to_remove) for keyword in kwd_group.getElementsByTagName(\"kwd\")]\n                else:\n                    other = [xml_to_text(keyword, tag_to_remove=self.tag_to_remove) for keyword in kwd_group.getElementsByTagName(\"kwd\")]\n            return {\"pacs\": pacs, \"other\": other}\n        except Exception:\n            print >> sys.stderr, \"Can't find keywords\"\n    def get_ref_link(self, xml, name):\n        links = xml.getElementsByTagName('ext-link')\n        ret = None\n        for link in links:\n            if name in link.getAttribute(\"xlink:href\").encode('utf-8'):\n                ret = xml_to_text(link).strip()\n        if not ret:\n            links = xml.getElementsByTagName('elocation-id')\n            for link in links:\n                if name in link.getAttribute(\"content-type\").encode('utf-8'):\n                    ret = xml_to_text(link).strip()\n        return ret\n    def get_page_count(self, xml):\n        counts = xml.getElementsByTagName(\"counts\")\n        if counts:\n            page_count = counts[0].getElementsByTagName(\"page-count\")\n            if page_count:\n                return page_count[0].getAttribute(\"count\").encode('utf-8')\n            else:\n                return None\n        else:\n            return None\n    def get_publication_date(self, xml, logger=None):\n        date_xmls = xml.getElementsByTagName('pub-date')\n        day = None\n        month = None\n        year = None\n        if date_xmls:\n            for date_xml in date_xmls:\n                if date_xml.hasAttribute('pub-type'):\n                    if date_xml.getAttribute('pub-type') == \"epub\":\n                        day = get_value_in_tag(date_xml, \"day\")\n                        month = get_value_in_tag(date_xml, \"month\")\n                        year = get_value_in_tag(date_xml, \"year\")\n                if not year:\n                    day = get_value_in_tag(date_xml, \"day\")\n                    month = get_value_in_tag(date_xml, \"month\")\n                    year = get_value_in_tag(date_xml, \"year\")\n            if logger:\n                logger.info('%s-%s-%s' % (year, month, day))\n            return '%s-%s-%s' % (year, month, day)\n        else:\n            print >> sys.stderr, \"Can't find publication date. Using 'today'.\"\n            if logger:\n                logger.info(\"Can't find publication date. Using 'today'.\")\n            return time.strftime('%Y-%m-%d')\n    def get_references(self, xml):\n        references = []\n        for reference in xml.getElementsByTagName(\"ref\"):\n            plain_text = None\n            try:\n                ref_type = reference.getElementsByTagName('mixed-citation')[0]\n                ref_type = ref_type.getAttribute('publication-type').encode('utf-8')\n            except:\n                ref_type = reference.getElementsByTagName('citation')[0]\n                ref_type = ref_type.getAttribute('publication-type').encode('utf-8')\n            label = get_value_in_tag(reference, \"label\").strip('.')\n            authors = []\n            for author in reference.getElementsByTagName(\"name\"):\n                given_name = get_value_in_tag(author, \"given-names\")\n                surname = get_value_in_tag(author, \"surname\")\n                if given_name:\n                    name = \"%s, %s\" % (surname, given_name)\n                else:\n                    name = surname\n                if name.strip().split() == []:\n                    name = get_value_in_tag(author, \"string-name\")\n                authors.append(name)\n            doi_tag = reference.getElementsByTagName(\"pub-id\")\n            doi = \"\"\n            for tag in doi_tag:\n                if tag.getAttribute(\"pub-id-type\") == \"doi\":\n                    doi = xml_to_text(tag)\n            issue = get_value_in_tag(reference, \"issue\")\n            page = get_value_in_tag(reference, \"fpage\")\n            page_last = get_value_in_tag(reference, \"lpage\")\n            title = get_value_in_tag(reference, \"source\")\n            volume = get_value_in_tag(reference, \"volume\")\n            year = get_value_in_tag(reference, \"year\")\n            ext_link = format_arxiv_id(self.get_ref_link(reference, \"arxiv\"))\n            if ref_type != 'journal':\n                try:\n                    plain_text = get_value_in_tag(reference,\n                                                  \"mixed-citation\",\n                                                  tag_to_remove=self.tag_to_remove)\n                except:\n                    plain_text = get_value_in_tag(reference,\n                                                  \"citation\",\n                                                  tag_to_remove=self.tag_to_remove)\n            references.append((label, authors, doi,\n                               issue, page, page_last,\n                               title, volume, year,\n                               ext_link, plain_text))\n        self.references = references\n    def get_record(self, f_path, publisher=None, collection=None, logger=None):\n        xml = self.get_article(f_path)\n        rec = create_record()\n        title = self.get_title(xml)\n        if title:\n            record_add_field(rec, '245', subfields=[('a', title)])\n        record_add_field(rec, '260', subfields=[('c', self.get_publication_date(xml, logger))])\n        journal, issn, volume, issue, first_page, last_page, year, doi = self.get_publication_information(xml)\n        if logger:\n            logger.info(\"Creating record: %s %s\" % (join(f_path, pardir), doi))\n        if doi:\n            record_add_field(rec, '024', ind1='7', subfields=[('a', doi), ('2', 'DOI')])\n        authors = self.get_authors(xml)\n        first_author = True\n        for author in authors:\n            if author.get('surname'):\n                subfields = [('a', '%s, %s' % (author.get('surname'), author.get('given_name') or author.get('initials', '')))]\n            else:\n                subfields = [('a', '%s' % (author.get('name', '')))]\n            if 'orcid' in author:\n                subfields.append(('j', author['orcid']))\n            if 'affiliation' in author:\n                for aff in author[\"affiliation\"]:\n                    subfields.append(('v', aff))\n                if self.extract_nations:\n                    add_nations_field(subfields)\n            if author.get('email'):\n                    subfields.append(('m', author['email']))\n            if first_author:\n                record_add_field(rec, '100', subfields=subfields)\n                first_author = False\n            else:\n                record_add_field(rec, '700', subfields=subfields)\n        page_count = self.get_page_count(xml)\n        if page_count:\n", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "length": 1283, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "86663145e9262154f0a3a437a533c6207187300f593522f9"}
{"input": "", "context": "package cern.colt.matrix.tint.impl;\nimport cern.colt.list.tint.IntArrayList;\nimport cern.colt.matrix.tint.IntMatrix1D;\nimport cern.colt.matrix.tint.IntMatrix1DProcedure;\nimport cern.colt.matrix.tint.IntMatrix2D;\nimport cern.colt.matrix.tint.IntMatrix2DTest;\nimport cern.jet.math.tint.IntFunctions;\nimport edu.emory.mathcs.utils.ConcurrencyUtils;\npublic class DiagonalIntMatrix2DTest extends IntMatrix2DTest {\n    protected int DLENGTH;\n    protected int DINDEX;\n    public DiagonalIntMatrix2DTest(String arg0) {\n        super(arg0);\n    }\n    protected void createMatrices() throws Exception {\n        DINDEX = 3;\n        A = new DiagonalIntMatrix2D(NROWS, NCOLUMNS, DINDEX);\n        B = new DiagonalIntMatrix2D(NROWS, NCOLUMNS, DINDEX);\n        Bt = new DiagonalIntMatrix2D(NCOLUMNS, NROWS, -DINDEX);\n        DLENGTH = ((DiagonalIntMatrix2D) A).diagonalLength();\n    }\n    protected void populateMatrices() {\n        ConcurrencyUtils.setThreadsBeginN_2D(1);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                A.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                B.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                Bt.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                A.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                B.setQuick(r - DINDEX, r, Math.max(1, rand.nextInt() % A.rows()));\n            }\n            for (int r = 0; r < DLENGTH; r++) {\n                Bt.setQuick(r, r + DINDEX, Math.max(1, rand.nextInt() % A.rows()));\n            }\n        }\n    }\n    public void testAssignInt() {\n        int value = Math.max(1, rand.nextInt() % A.rows());\n        A.assign(value);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(value, A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(value, A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntArrayArray() {\n        int[][] expected = new int[NROWS][NCOLUMNS];\n        for (int r = 0; r < NROWS; r++) {\n            for (int c = 0; c < NCOLUMNS; c++) {\n                expected[r][c] = Math.max(1, rand.nextInt() % A.rows());\n            }\n        }\n        A.assign(expected);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(expected[r][r + DINDEX], A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(expected[r - DINDEX][r], A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntFunction() {\n        IntMatrix2D Acopy = A.copy();\n        A.assign(IntFunctions.neg);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                int expected = -Acopy.getQuick(r, r + DINDEX);\n                assertEquals(expected, A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                int expected = -Acopy.getQuick(r - DINDEX, r);\n                assertEquals(expected, A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntMatrix2DIntIntFunction() {\n        IntMatrix2D Acopy = A.copy();\n        A.assign(B, IntFunctions.div);\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r, r + DINDEX) / B.getQuick(r, r + DINDEX), A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r - DINDEX, r) / B.getQuick(r - DINDEX, r), A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testAssignIntMatrix2DIntIntFunctionIntArrayListIntArrayList() {\n        IntArrayList rowList = new IntArrayList();\n        IntArrayList columnList = new IntArrayList();\n        if (DINDEX >= 0) {\n            for (int r = 0; r < DLENGTH; r++) {\n                rowList.add(r);\n                columnList.add(r + DINDEX);\n            }\n            IntMatrix2D Acopy = A.copy();\n            A.assign(B, IntFunctions.div, rowList, columnList);\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r, r + DINDEX) / B.getQuick(r, r + DINDEX), A.getQuick(r, r + DINDEX));\n            }\n        } else {\n            for (int r = 0; r < DLENGTH; r++) {\n                rowList.add(r - DINDEX);\n                columnList.add(r);\n            }\n            IntMatrix2D Acopy = A.copy();\n            A.assign(B, IntFunctions.div, rowList, columnList);\n            for (int r = 0; r < DLENGTH; r++) {\n                assertEquals(Acopy.getQuick(r - DINDEX, r) / B.getQuick(r - DINDEX, r), A.getQuick(r - DINDEX, r));\n            }\n        }\n    }\n    public void testCardinality() {\n        int card = A.cardinality();\n        assertEquals(DLENGTH, card);\n    }\n    public void testMaxLocation() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            int[] maxAndLoc = A.getMaxLocation();\n            assertEquals(7, maxAndLoc[0]);\n            assertEquals(NROWS / 3, (int) maxAndLoc[1]);\n            assertEquals(NROWS / 3 + DINDEX, (int) maxAndLoc[2]);\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            int[] maxAndLoc = A.getMaxLocation();\n            assertEquals(7, maxAndLoc[0]);\n            assertEquals(NROWS / 3 - DINDEX, (int) maxAndLoc[1]);\n            assertEquals(NROWS / 3, (int) maxAndLoc[2]);\n        }\n    }\n    public void testMinLocation() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, -7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, -1);\n            int[] minAndLoc = A.getMinLocation();\n            assertEquals(-7, minAndLoc[0]);\n            assertEquals(NROWS / 3, (int) minAndLoc[1]);\n            assertEquals(NROWS / 3 + DINDEX, (int) minAndLoc[2]);\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, -7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, -1);\n            int[] minAndLoc = A.getMinLocation();\n            assertEquals(-7, minAndLoc[0]);\n            assertEquals(NROWS / 3 - DINDEX, (int) minAndLoc[1]);\n            assertEquals(NROWS / 3, (int) minAndLoc[2]);\n        }\n    }\n    public void testGetNegativeValues() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, -7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, -1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNegativeValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(-7));\n            assertTrue(valueList.contains(-1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, -7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, -1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNegativeValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(-7));\n            assertTrue(valueList.contains(-1));\n        }\n    }\n    public void testGetNonZeros() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNonZeros(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getNonZeros(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        }\n    }\n    public void testGetPositiveValues() {\n        A.assign(0);\n        if (DINDEX >= 0) {\n            A.setQuick(NROWS / 3, NROWS / 3 + DINDEX, 7);\n            A.setQuick(NROWS / 2, NROWS / 2 + DINDEX, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getPositiveValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3));\n            assertTrue(rowList.contains(NROWS / 2));\n            assertTrue(columnList.contains(NROWS / 3 + DINDEX));\n            assertTrue(columnList.contains(NROWS / 2 + DINDEX));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        } else {\n            A.setQuick(NROWS / 3 - DINDEX, NROWS / 3, 7);\n            A.setQuick(NROWS / 2 - DINDEX, NROWS / 2, 1);\n            IntArrayList rowList = new IntArrayList();\n            IntArrayList columnList = new IntArrayList();\n            IntArrayList valueList = new IntArrayList();\n            A.getPositiveValues(rowList, columnList, valueList);\n            assertEquals(2, rowList.size());\n            assertEquals(2, columnList.size());\n            assertEquals(2, valueList.size());\n            assertTrue(rowList.contains(NROWS / 3 - DINDEX));\n            assertTrue(rowList.contains(NROWS / 2 - DINDEX));\n            assertTrue(columnList.contains(NROWS / 3));\n            assertTrue(columnList.contains(NROWS / 2));\n            assertTrue(valueList.contains(7));\n            assertTrue(valueList.contains(1));\n        }\n    }\n    public void testToArray() {\n        int[][] array = A.toArray();\n        assertTrue(NROWS == array.length);\n        for (int r = 0; r < NROWS; r++) {\n            assertTrue(NCOLUMNS == array[r].length);\n            for (int c = 0; c < NCOLUMNS; c++) {\n                assertEquals(array[r][c], A.getQuick(r, c));\n            }\n        }\n    }\n    public void testVectorize() {\n        IntMatrix1D Avec = A.vectorize();\n        int idx = 0;\n        for (int c = 0; c < NCOLUMNS; c++) {\n            for (int r = 0; r < NROWS; r++) {\n                assertEquals(A.getQuick(r, c), Avec.getQuick(idx++));\n            }\n        }\n    }\n    public void testViewColumn() {\n        IntMatrix1D col = A.viewColumn(NCOLUMNS / 2);\n        assertEquals(NROWS, col.size());\n        for (int r = 0; r < NROWS; r++) {\n            assertEquals(A.getQuick(r, NCOLUMNS / 2), col.getQuick(r));\n        }\n    }\n    public void testViewColumnFlip() {\n        IntMatrix2D B = A.viewColumnFlip();\n        assertEquals(A.size(), B.size());\n        for (int r = 0; r < NROWS; r++) {\n            for (int c = 0; c < NCOLUMNS; c++) {\n", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "length": 1319, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "4534467d40d89c9981629937ab5e1a62b76d61371ebfced8"}
{"input": "", "context": "# coding: utf8\n# This file is part of Scapy\n# Scapy is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# any later version.\n#\n# Scapy is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Scapy. If not, see <http://www.gnu.org/licenses/>.\n# scapy.contrib.description = EtherNet/IP\n# scapy.contrib.status = loads\n# Copyright (C) 2019 Jose Diogo Monteiro <jdlopes@student.dei.uc.pt>\n# Based on https://github.com/scy-phy/scapy-cip-enip\n# Routines for EtherNet/IP (Industrial Protocol) dissection\n# EtherNet/IP Home: www.odva.org\nimport struct\nfrom scapy.packet import Packet, bind_layers\nfrom scapy.layers.inet import TCP\nfrom scapy.fields import LEShortField, LEShortEnumField, LEIntEnumField, \\\n    LEIntField, LELongField, FieldLenField, PacketListField, ByteField, \\\n    PacketField, MultipleTypeField, StrLenField, StrFixedLenField, \\\n    XLEIntField, XLEStrLenField\n_commandIdList = {\n    0x0004: \"ListServices\",  # Request Struct Don't Have Command Spec Data\n    0x0063: \"ListIdentity\",  # Request Struct Don't Have Command Spec Data\n    0x0064: \"ListInterfaces\",  # Request Struct Don't Have Command Spec Data\n    0x0065: \"RegisterSession\",  # Request Structure = Reply Structure\n    0x0066: \"UnregisterSession\",  # Don't Have Command Specific Data\n    0x006f: \"SendRRData\",  # Request Structure = Reply Structure\n    0x0070: \"SendUnitData\",  # There is no reply\n    0x0072: \"IndicateStatus\",\n    0x0073: \"Cancel\"\n}\n_statusList = {\n    0: \"success\",\n    1: \"invalid_cmd\",\n    2: \"no_resources\",\n    3: \"incorrect_data\",\n    100: \"invalid_session\",\n    101: \"invalid_length\",\n    105: \"unsupported_prot_rev\"\n}\n_itemID = {\n    0x0000: \"Null Address Item\",\n    0x00a1: \"Connection-based Address Item\",\n    0x00b1: \"Connected Transport packet Data Item\",\n    0x00b2: \"Unconnected message Data Item\",\n    0x8000: \"Sockaddr Info, originator-to-target Data Item\",\n    0x8001: \"Sockaddr Info, target-to-originator Data Item\"\n}\nclass ItemData(Packet):\n    \"\"\"Common Packet Format\"\"\"\n    name = \"Item Data\"\n    fields_desc = [\n        LEShortEnumField(\"typeId\", 0, _itemID),\n        LEShortField(\"length\", 0),\n        XLEStrLenField(\"data\", \"\", length_from=lambda pkt: pkt.length),\n    ]\n    def extract_padding(self, s):\n        return '', s\nclass EncapsulatedPacket(Packet):\n    \"\"\"Encapsulated Packet\"\"\"\n    name = \"Encapsulated Packet\"\n    fields_desc = [LEShortField(\"itemCount\", 2), PacketListField(\n        \"item\", None, ItemData, count_from=lambda pkt: pkt.itemCount), ]\nclass BaseSendPacket(Packet):\n    \"\"\" Abstract Class\"\"\"\n    fields_desc = [\n        LEIntField(\"interfaceHandle\", 0),\n        LEShortField(\"timeout\", 0),\n        PacketField(\"encapsulatedPacket\", None, EncapsulatedPacket),\n    ]\nclass CommandSpecificData(Packet):\n    \"\"\"Command Specific Data Field Default\"\"\"\n    pass\nclass ENIPSendUnitData(BaseSendPacket):\n    \"\"\"Send Unit Data Command Field\"\"\"\n    name = \"ENIPSendUnitData\"\nclass ENIPSendRRData(BaseSendPacket):\n    \"\"\"Send RR Data Command Field\"\"\"\n    name = \"ENIPSendRRData\"\nclass ENIPListInterfacesReplyItems(Packet):\n    \"\"\"List Interfaces Items Field\"\"\"\n    name = \"ENIPListInterfacesReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        FieldLenField(\"itemLength\", 0, length_of=\"itemData\"),\n        StrLenField(\"itemData\", \"\", length_from=lambda pkt: pkt.itemLength),\n    ]\nclass ENIPListInterfacesReply(Packet):\n    \"\"\"List Interfaces Command Field\"\"\"\n    name = \"ENIPListInterfacesReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"identityItems\", 0, ENIPListInterfacesReplyItems),\n    ]\nclass ENIPListIdentityReplyItems(Packet):\n    \"\"\"List Identity Items Field\"\"\"\n    name = \"ENIPListIdentityReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        FieldLenField(\"itemLength\", 0, length_of=\"itemData\"),\n        StrLenField(\"itemData\", \"\", length_from=lambda pkt: pkt.item_length),\n    ]\nclass ENIPListIdentityReply(Packet):\n    \"\"\"List Identity Command Field\"\"\"\n    name = \"ENIPListIdentityReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"identityItems\", None, ENIPListIdentityReplyItems),\n    ]\nclass ENIPListServicesReplyItems(Packet):\n    \"\"\"List Services Items Field\"\"\"\n    name = \"ENIPListServicesReplyItems\"\n    fields_desc = [\n        LEIntField(\"itemTypeCode\", 0),\n        LEIntField(\"itemLength\", 0),\n        ByteField(\"version\", 1),\n        ByteField(\"flag\", 0),\n        StrFixedLenField(\"serviceName\", None, 16 * 4),\n    ]\nclass ENIPListServicesReply(Packet):\n    \"\"\"List Services Command Field\"\"\"\n    name = \"ENIPListServicesReply\"\n    fields_desc = [\n        FieldLenField(\"itemCount\", 0, count_of=\"identityItems\"),\n        PacketField(\"targetItems\", None, ENIPListServicesReplyItems),\n    ]\nclass ENIPRegisterSession(CommandSpecificData):\n    \"\"\"Register Session Command Field\"\"\"\n    name = \"ENIPRegisterSession\"\n    fields_desc = [\n        LEShortField(\"protocolVersion\", 1),\n        LEShortField(\"options\", 0)\n    ]\nclass ENIPTCP(Packet):\n    \"\"\"Ethernet/IP packet over TCP\"\"\"\n    name = \"ENIPTCP\"\n    fields_desc = [\n        LEShortEnumField(\"commandId\", None, _commandIdList),\n        LEShortField(\"length\", 0),\n        XLEIntField(\"session\", 0),\n        LEIntEnumField(\"status\", None, _statusList),\n        LELongField(\"senderContext\", 0),\n        LEIntField(\"options\", 0),\n        MultipleTypeField(\n            [\n                # List Services Reply\n                (PacketField(\"commandSpecificData\", ENIPListServicesReply,\n                             ENIPListServicesReply),\n                 lambda pkt: pkt.commandId == 0x4),\n                # List Identity Reply\n                (PacketField(\"commandSpecificData\", ENIPListIdentityReply,\n                             ENIPListIdentityReply),\n                 lambda pkt: pkt.commandId == 0x63),\n                # List Interfaces Reply\n                (PacketField(\"commandSpecificData\", ENIPListInterfacesReply,\n                             ENIPListInterfacesReply),\n                 lambda pkt: pkt.commandId == 0x64),\n                # Register Session\n                (PacketField(\"commandSpecificData\", ENIPRegisterSession,\n                             ENIPRegisterSession),\n                 lambda pkt: pkt.commandId == 0x65),\n                # Send RR Data\n                (PacketField(\"commandSpecificData\", ENIPSendRRData,\n                             ENIPSendRRData),\n", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "length": 625, "dataset": "lcc_e", "language": "python", "all_classes": null, "_id": "7be7d972146bae6e379a2e75d85d7a8103d8d6cef2e618fd"}
{"input": "", "context": "/*\n *  GeoBatch - Open Source geospatial batch processing system\n *  http://code.google.com/p/geobatch/\n *  Copyright (C) 2007-2008-2009 GeoSolutions S.A.S.\n *  http://www.geo-solutions.it\n *\n *  GPLv3 + Classpath exception\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage it.geosolutions.geobatch.registry.harvest;\nimport it.geosolutions.filesystemmonitor.monitor.FileSystemMonitorEvent;\nimport it.geosolutions.filesystemmonitor.monitor.FileSystemMonitorNotifications;\nimport it.geosolutions.geobatch.catalog.file.FileBaseCatalog;\nimport it.geosolutions.geobatch.global.CatalogHolder;\nimport it.geosolutions.geobatch.jgsflodess.utils.io.JGSFLoDeSSIOUtils;\nimport it.geosolutions.geobatch.jgsflodess.utils.io.rest.PublishingRestletGlobalConfig;\nimport it.geosolutions.geobatch.metocs.jaxb.model.MetocElementType;\nimport it.geosolutions.geobatch.metocs.jaxb.model.Metocs;\nimport it.geosolutions.geobatch.registry.RegistryActionConfiguration;\nimport it.geosolutions.geobatch.registry.RegistryConfiguratorAction;\nimport it.geosolutions.geobatch.utils.IOUtils;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.net.URLDecoder;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Queue;\nimport java.util.UUID;\nimport java.util.logging.Level;\nimport javax.media.jai.JAI;\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport org.apache.commons.io.FilenameUtils;\nimport org.geotools.coverage.grid.GridEnvelope2D;\nimport org.geotools.coverage.grid.GridGeometry2D;\nimport org.geotools.coverage.grid.io.AbstractGridCoverage2DReader;\nimport org.geotools.coverage.grid.io.AbstractGridFormat;\nimport org.geotools.coverage.grid.io.GridFormatFinder;\nimport org.geotools.geometry.GeneralEnvelope;\nimport org.geotools.referencing.CRS;\nimport org.geotools.referencing.operation.LinearTransform;\nimport org.opengis.coverage.grid.Format;\nimport org.opengis.coverage.grid.GridEnvelope;\nimport org.opengis.coverage.grid.GridGeometry;\nimport org.opengis.referencing.FactoryException;\nimport org.opengis.referencing.crs.CoordinateReferenceSystem;\nimport org.opengis.referencing.datum.PixelInCell;\nimport org.opengis.referencing.operation.MathTransform;\nimport org.opengis.referencing.operation.Matrix;\n/**\n * \n * TODO: DOCUMENT ME !!\n * \n */\npublic class RegistryHarvestingConfigurator extends RegistryConfiguratorAction<FileSystemMonitorEvent> {\n\t/**\n\t * GeoTIFF Writer Default Params\n\t */\n\tpublic final static String GEOSERVER_VERSION = \"2.x\";\n\tprotected RegistryHarvestingConfigurator(\n\t\t\tRegistryActionConfiguration configuration) throws IOException {\n\t\tsuper(configuration);\n\t}\n\t/**\n\t * EXECUTE METHOD \n\t */\n\tpublic Queue<FileSystemMonitorEvent> execute(\n\t\t\tQueue<FileSystemMonitorEvent> events) throws Exception {\n\t\tif (LOGGER.isLoggable(Level.INFO))\n\t\t\tLOGGER.info(\"Starting with processing...\");\n\t\ttry {\n\t\t\t// looking for file\n\t\t\tif (events.size() == 0)\n\t\t\t\tthrow new IllegalArgumentException(\"Wrong number of elements for this action: \" + events.size());\n\t\t\t\n\t\t\tList<FileSystemMonitorEvent> generatedEvents = new ArrayList<FileSystemMonitorEvent>();\n\t\t\t\n\t\t\twhile (events.size() > 0) {\n\t\t\t\tFileSystemMonitorEvent event = events.remove();\n\t\t\t\t// //\n\t\t\t\t// data flow configuration and dataStore name must not be null.\n\t\t\t\t// //\n\t\t\t\tif (configuration == null) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"DataFlowConfig is null.\");\n\t\t\t\t\tthrow new IllegalStateException(\"DataFlowConfig is null.\");\n\t\t\t\t}\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\t//\n\t\t\t\t// Initializing input variables\n\t\t\t\t//\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\tfinal File workingDir = IOUtils.findLocation(configuration.getWorkingDirectory(), new File(\n\t\t\t\t\t\t((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory()));\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\t//\n\t\t\t\t// Checking input files.\n\t\t\t\t//\n\t\t\t\t// ////////////////////////////////////////////////////////////////////\n\t\t\t\tif ((workingDir == null) || !workingDir.exists()\n\t\t\t\t\t\t|| !workingDir.isDirectory()) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"WorkingDirectory is null or does not exist.\");\n\t\t\t\t\tthrow new IllegalStateException(\"WorkingDirectory is null or does not exist.\");\n\t\t\t\t}\n\t\t\t\t// ... BUSINESS LOGIC ... //\n\t\t\t\tfinal File inputFile = event.getSource();\n\t\t\t\tString inputFileName = inputFile.getAbsolutePath();\n\t\t\t\tfinal String filePrefix = FilenameUtils.getBaseName(inputFileName);\n\t\t\t\tfinal String fileSuffix = FilenameUtils.getExtension(inputFileName);\n\t\t\t\tfinal String fileNameFilter = getConfiguration().getStoreFilePrefix();\n\t\t\t\tString baseFileName = null;\n\t\t\t\tif (fileNameFilter != null) {\n\t\t\t\t\tif ((filePrefix.equals(fileNameFilter) || filePrefix.matches(fileNameFilter))\n\t\t\t\t\t\t\t&& \"layer\".equalsIgnoreCase(fileSuffix)) {\n\t\t\t\t\t\t// etj: are we missing something here?\n\t\t\t\t\t\tbaseFileName = filePrefix;\n\t\t\t\t\t}\n\t\t\t\t} else if (\"layer\".equalsIgnoreCase(fileSuffix)) {\n\t\t\t\t\tbaseFileName = filePrefix;\n\t\t\t\t}\n\t\t\t\tif (baseFileName == null) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, \"Unexpected file '\" + inputFileName + \"'\");\n\t\t\t\t\tthrow new IllegalStateException(\"Unexpected file '\" + inputFileName + \"'\");\n\t\t\t\t}\n\t\t\t\tProperties props = new Properties();\n\t\t\t\t//try retrieve data from file\n\t\t\t\ttry {\n\t\t\t\t\tprops.load(new FileInputStream(inputFile));\n\t\t\t\t}\n\t\t\t\t//catch exception in case properties file does not exist\n\t\t\t\tcatch(IOException e) {\n\t\t\t\t\tLOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);\n\t\t\t\t}\n\t\t\t\tfinal String namespace = props.getProperty(\"namespace\");\n\t\t\t\tfinal String metocFields = props.getProperty(\"metocFields\");\n\t\t\t\tfinal String storeid = props.getProperty(\"storeid\");\n\t\t\t\tfinal String layerid = props.getProperty(\"layerid\");\n\t\t\t\tfinal String driver = props.getProperty(\"driver\");\n\t\t\t\tfinal String path = new File(inputFile.getParentFile(), props.getProperty(\"path\")).getAbsolutePath();\n\t\t\t\t\n\t\t\t\tfinal File metadataTemplate = IOUtils.findLocation(configuration.getMetocHarvesterXMLTemplatePath(), new File(((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory()));\n\t\t\t\t\n\t\t\t\tboolean res = harvest(\n\t\t\t\t\t\tnew File(PublishingRestletGlobalConfig.getRootDirectory()), \n\t\t\t\t\t\tnew File(path), \n\t\t\t\t\t\tmetadataTemplate, \n\t\t\t\t\t\tdriver, \n\t\t\t\t\t\tconfiguration.getGeoserverURL(), \n\t\t\t\t\t\tconfiguration.getRegistryURL(), \n\t\t\t\t\t\tconfiguration.getProviderURL(), \n\t\t\t\t\t\tnew Date().getTime(), \n\t\t\t\t\t\tnamespace, \n\t\t\t\t\t\tmetocFields, \n\t\t\t\t\t\tlayerid, \n\t\t\t\t\t\t\"DOWN\"\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\tif (res) {\n\t\t\t\t\t// forwarding to the next Action\n\t\t\t\t\tif (LOGGER.isLoggable(Level.FINE))\n\t\t\t\t\t\tLOGGER.fine(\"RegistryHarvestingAction ... forwarding to the next Action: \" + inputFile.getAbsolutePath());\n\t\t\t\t\t/** TODO: remove this --- generatedEvents.add(new FileSystemMonitorEvent(inputFile, FileSystemMonitorNotifications.FILE_ADDED)); **/\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/** TODO: remove this --- if (generatedEvents != null)\n\t\t\t\tevents.addAll(generatedEvents); **/\n\t\t\treturn events;\n\t\t} catch (Throwable t) {\n\t\t\tLOGGER.log(Level.SEVERE, t.getLocalizedMessage(), t);\n\t\t\tJAI.getDefaultInstance().getTileCache().flush();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tJAI.getDefaultInstance().getTileCache().flush();\n\t\t}\n\t}\n\t/**\n\t * \n\t * @param outDir\n\t * @param sourceFile\n\t * @param metadataTemplate\n\t * @param sourceFileType\n\t * @param geoserverURL\n\t * @param registryURL\n\t * @param providerURL\n\t * @param timestamp\n\t * @param namespace\n\t * @param metocFields\n\t * @param coverageName\n\t * @param zOrder\n\t * @return\n\t * @throws JAXBException\n\t * @throws IOException\n\t * @throws FactoryException\n\t * @throws ParseException\n\t */\n\tpublic boolean harvest(\n\t\t\tfinal File outDir, \n\t\t\tfinal File sourceFile,\n\t\t\tfinal File metadataTemplate,\n\t\t\tfinal String sourceFileType,\n\t\t\tfinal String geoserverURL,\n\t\t\tfinal String registryURL,\n\t\t\tfinal String providerURL,\n\t\t\tfinal long timestamp, \n\t\t\tfinal String namespace, \n\t\t\tfinal String metocFields,\n\t\t\tfinal String coverageName, \n\t\t\tfinal String zOrder\n\t) throws JAXBException, IOException, FactoryException, ParseException {\n\t\t// CoverageName Format:\n\t\t//  CRUISEEXP_MODELNAME-MODELTYPE_VARNAME(-u/v/mag/dir)_ZLEV_BASETIMEYYYYMMDD_BASETIMEHHHMMSS_FCSTTIMEYYYYMMDD_FCSTTIMEHHHMMSS_TAU\n\t\t\n\t\t//Grabbing the Variables Dictionary\n\t\tJAXBContext context = JAXBContext.newInstance(Metocs.class);\n\t\tUnmarshaller um = context.createUnmarshaller();\n\t\t\n\t\tFile metocDictionaryFile = IOUtils.findLocation(configuration.getMetocDictionaryPath(), new File(((FileBaseCatalog) CatalogHolder.getCatalog()).getBaseDirectory())); \n\t\tMetocs metocDictionary = (Metocs) um.unmarshal(new FileReader(metocDictionaryFile));\n\t\t\n\t\t// reading GeoTIFF file\n\t\tfinal AbstractGridCoverage2DReader reader = ((AbstractGridFormat) acquireFormat(sourceFileType)).getReader(sourceFile.toURI().toURL());\n", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "length": 805, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "016acda6d2273fce43a10dc6e2ad33d83b7ffccc9151ac09"}
{"input": "", "context": "package com.garbagemule.MobArena.waves;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.bukkit.DyeColor;\nimport org.bukkit.Location;\nimport org.bukkit.Material;\nimport org.bukkit.World;\nimport org.bukkit.entity.*;\nimport org.bukkit.entity.Skeleton.SkeletonType;\nimport org.bukkit.inventory.ItemStack;\nimport com.garbagemule.MobArena.MobArena;\nimport com.garbagemule.MobArena.framework.Arena;\npublic enum MACreature\n{\n    // Default creatures\n    ZOMBIE(EntityType.ZOMBIE),            ZOMBIES(EntityType.ZOMBIE), \n    SKELETON(EntityType.SKELETON),        SKELETONS(EntityType.SKELETON),\n    SPIDER(EntityType.SPIDER),            SPIDERS(EntityType.SPIDER),\n    CREEPER(EntityType.CREEPER),          CREEPERS(EntityType.CREEPER),\n    WOLF(EntityType.WOLF),                WOLVES(EntityType.WOLF),\n    \n    // Special creatures\n    ZOMBIEPIGMAN(EntityType.PIG_ZOMBIE),  ZOMBIEPIGMEN(EntityType.PIG_ZOMBIE),\n    POWEREDCREEPER(EntityType.CREEPER),   POWEREDCREEPERS(EntityType.CREEPER),\n    ANGRYWOLF(EntityType.WOLF),           ANGRYWOLVES(EntityType.WOLF),\n    GIANT(EntityType.GIANT),              GIANTS(EntityType.GIANT),\n    GHAST(EntityType.GHAST),              GHASTS(EntityType.GHAST),\n    ENDERMAN(EntityType.ENDERMAN),        ENDERMEN(EntityType.ENDERMAN),\n    CAVESPIDER(EntityType.CAVE_SPIDER),   CAVESPIDERS(EntityType.CAVE_SPIDER),\n    SILVERFISH(EntityType.SILVERFISH),\n    \n    // 1.0 creatures\n    BLAZE(EntityType.BLAZE),              BLAZES(EntityType.BLAZE),\n    ENDERDRAGON(EntityType.ENDER_DRAGON), ENDERDRAGONS(EntityType.ENDER_DRAGON),\n    SNOWMAN(EntityType.SNOWMAN),          SNOWMEN(EntityType.SNOWMAN),\n    SNOWGOLEM(EntityType.SNOWMAN),        SNOWGOLEMS(EntityType.SNOWMAN),\n    MUSHROOMCOW(EntityType.MUSHROOM_COW), MUSHROOMCOWS(EntityType.MUSHROOM_COW),\n    VILLAGER(EntityType.VILLAGER),        VILLAGERS(EntityType.VILLAGER),\n    \n    // 1.2 creatures\n    OCELOT(EntityType.OCELOT),            OCELOTS(EntityType.OCELOT),\n    IRONGOLEM(EntityType.IRON_GOLEM),     IRONGOLEMS(EntityType.IRON_GOLEM),\n    \n    // Passive creatures\n    CHICKEN(EntityType.CHICKEN),          CHICKENS(EntityType.CHICKEN),\n    COW(EntityType.COW),                  COWS(EntityType.COW),\n    PIG(EntityType.PIG),                  PIGS(EntityType.PIG),\n    SHEEP(EntityType.SHEEP),\n    SQUID(EntityType.SQUID),              SQUIDS(EntityType.SQUID),\n    \n    // Extended creatures\n    EXPLODINGSHEEP(EntityType.SHEEP),\n    \n    // Slimes\n    SLIME(EntityType.SLIME),              SLIMES(EntityType.SLIME),\n    SLIMETINY(EntityType.SLIME),          SLIMESTINY(EntityType.SLIME),\n    SLIMESMALL(EntityType.SLIME),         SLIMESSMALL(EntityType.SLIME),\n    SLIMEBIG(EntityType.SLIME),           SLIMESBIG(EntityType.SLIME),\n    SLIMEHUGE(EntityType.SLIME),          SLIMESHUGE(EntityType.SLIME),\n    \n    // Magma cubes\n    MAGMACUBE(EntityType.MAGMA_CUBE),     MAGMACUBES(EntityType.MAGMA_CUBE),\n    MAGMACUBETINY(EntityType.MAGMA_CUBE), MAGMACUBESTINY(EntityType.MAGMA_CUBE),\n    MAGMACUBESMALL(EntityType.MAGMA_CUBE),MAGMACUBESSMALL(EntityType.MAGMA_CUBE),\n    MAGMACUBEBIG(EntityType.MAGMA_CUBE),  MAGMACUBESBIG(EntityType.MAGMA_CUBE),\n    MAGMACUBEHUGE(EntityType.MAGMA_CUBE), MAGMACUBESHUGE(EntityType.MAGMA_CUBE),\n        \n    // 1.4 creatures\n    BAT(EntityType.BAT),                  BATS(EntityType.BAT),\n    WITCH(EntityType.WITCH),              WITCHES(EntityType.WITCH),\n    WITHER(EntityType.WITHER),            WITHERS(EntityType.WITHER),\n    WITHERSKELETON(EntityType.SKELETON),  WITHERSKELETONS(EntityType.SKELETON),\n    BABYZOMBIE(EntityType.ZOMBIE),        BABYZOMBIES(EntityType.ZOMBIE),\n    BABYPIGMAN(EntityType.PIG_ZOMBIE),    BABYPIGMEN(EntityType.PIG_ZOMBIE),\n    ZOMBIEVILLAGER(EntityType.ZOMBIE),    ZOMBIEVILLAGERS(EntityType.ZOMBIE),\n    BABYZOMBIEVILLAGER(EntityType.ZOMBIE),BABYZOMBIEVILLAGERS(EntityType.ZOMBIE),\n    // 1.6 creatures\n    HORSE(EntityType.HORSE),              HORSES(EntityType.HORSE),\n    DONKEY(EntityType.HORSE),             DONKEYS(EntityType.HORSE),\n    MULE(EntityType.HORSE),               MULES(EntityType.HORSE),\n    SKELETONHORSE(EntityType.HORSE),      SKELETONHORSES(EntityType.HORSE),\n    UNDEADHORSE(EntityType.HORSE),        UNDEADHORSES(EntityType.HORSE);\n    private List<DyeColor> colors = Arrays.asList(DyeColor.values());\n    private EntityType type;\n    \n    private MACreature(EntityType type) {\n        this.type = type;\n    }\n    \n    public EntityType getType() {\n        return type;\n    }\n    \n    public static MACreature fromString(String string) {\n        return WaveUtils.getEnumFromString(MACreature.class, string.replaceAll(\"[-_\\\\.]\", \"\"));\n    }\n    \n    public LivingEntity spawn(Arena arena, World world, Location loc) {\n        LivingEntity e = (LivingEntity) world.spawnEntity(loc, type);\n        e.getEquipment().clear();\n        \n        switch (this) {\n            case SHEEP:\n                ((Sheep) e).setColor(colors.get(MobArena.random.nextInt(colors.size())));\n                break;\n            case EXPLODINGSHEEP:\n                arena.getMonsterManager().addExplodingSheep(e);\n                ((Sheep) e).setColor(DyeColor.RED);\n                break;\n            case POWEREDCREEPERS:\n                ((Creeper) e).setPowered(true);\n                break;\n            case ANGRYWOLVES:\n                ((Wolf) e).setAngry(true);\n                break;\n            case SLIME:\n            case SLIMES:\n            case MAGMACUBE:\n            case MAGMACUBES:\n                ((Slime) e).setSize( (1 + MobArena.random.nextInt(3)) );\n                break;\n            case SLIMETINY:\n            case SLIMESTINY:\n            case MAGMACUBETINY:\n            case MAGMACUBESTINY:\n                ((Slime) e).setSize(1);\n                break;\n            case SLIMESMALL:\n            case SLIMESSMALL:\n            case MAGMACUBESMALL:\n            case MAGMACUBESSMALL:\n                ((Slime) e).setSize(2);\n                break;\n            case SLIMEBIG:\n            case SLIMESBIG:\n            case MAGMACUBEBIG:\n            case MAGMACUBESBIG:\n                ((Slime) e).setSize(3);\n                break;\n            case SLIMEHUGE:\n            case SLIMESHUGE:\n            case MAGMACUBEHUGE:\n            case MAGMACUBESHUGE:\n                ((Slime) e).setSize(4);\n                break;\n            case SKELETON:\n            case SKELETONS:\n                ((Skeleton) e).getEquipment().setItemInHand(new ItemStack(Material.BOW, 1));\n            \tbreak;\n            case ZOMBIEPIGMAN:\n            case ZOMBIEPIGMEN:\n            \t((PigZombie) e).getEquipment().setItemInHand(new ItemStack(Material.GOLD_SWORD, 1));\n            \tbreak;\n            case ZOMBIEVILLAGER:\n            case ZOMBIEVILLAGERS:\n                ((Zombie) e).setVillager(true);\n                break;\n            case BABYZOMBIEVILLAGER:\n            case BABYZOMBIEVILLAGERS:\n                ((Zombie) e).setVillager(true);\n            case BABYZOMBIE:\n            case BABYZOMBIES:\n            case BABYPIGMAN:\n            case BABYPIGMEN:\n                ((Zombie) e).setBaby(true);\n                break;\n            case WITHERSKELETON:\n            case WITHERSKELETONS:\n                ((Skeleton) e).getEquipment().setItemInHand(new ItemStack(Material.STONE_SWORD, 1));\n                ((Skeleton) e).setSkeletonType(SkeletonType.WITHER);\n                break;\n            case HORSE:\n            case HORSES:\n                ((Horse) e).setVariant(Horse.Variant.HORSE);\n                break;\n            case DONKEY:\n            case DONKEYS:\n                ((Horse) e).setVariant(Horse.Variant.DONKEY);\n                break;\n            case MULE:\n            case MULES:\n                ((Horse) e).setVariant(Horse.Variant.MULE);\n                break;\n            case SKELETONHORSE:\n            case SKELETONHORSES:\n                ((Horse) e).setVariant(Horse.Variant.SKELETON_HORSE);\n                break;\n            case UNDEADHORSE:\n            case UNDEADHORSES:\n                ((Horse) e).setVariant(Horse.Variant.UNDEAD_HORSE);\n                break;\n            default:\n                break;\n        }\n        \n        if (e instanceof Creature) {\n", "answers": ["            Creature c = (Creature) e;"], "length": 386, "dataset": "lcc_e", "language": "java", "all_classes": null, "_id": "94f103d8d6177a4ab0d0ed90f9dbd86d375978f8e3f81181"}
{"input": "", "context": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.IO;\nusing System.Windows.Forms;\nusing System.Drawing.Drawing2D;\nusing System.Drawing.Imaging;\nnamespace MUOViewer\n{\n\tpublic enum FileID\n\t{\n\t\tMap0_mul = 0x00000000,\n\t\tStaIdx0_mul = 0x00000001,\n\t\tStatics0_mul = 0x00000002,\n\t\tArtIdx_mul = 0x00000003,\n\t\tArt_mul = 0x00000004,\n\t\tAnim_idx = 0x00000005,\n\t\tAnim_mul = 0x00000006,\n\t\tSoundIdx_mul = 0x00000007,\n\t\tSound_mul = 0x00000008,\n\t\tTexIdx_mul = 0x00000009,\n\t\tTexMaps_mul = 0x0000000A,\n\t\tGumpIdx_mul = 0x0000000B,\n\t\tGumpArt_mul = 0x0000000C,\n\t\tMulti_idx = 0x0000000D,\n\t\tMulti_mul = 0x0000000E,\n\t\tSkills_idx = 0x0000000F,\n\t\tSkills_mul = 0x00000010,\n\t\tTileData_mul = 0x00000011,\n\t\tAnimData_mul = 0x00000012,\n\t\tHues_mul = 0x00000013,\n\t}\n\tpublic enum ExtendedFileID : int//Fucking UOG had to go and fuck up the MUO\n\t{\n\t\tMap0_mul = 0x00000040,\n\t\tStaIdx0_mul = 0x00000041,\n\t\tStatics0_mul = 0x00000042,\n\t\tArtIdx_mul = 0x00000043,\n\t\tArt_mul = 0x00000044,\n\t\tAnim_idx = 0x00000045,\n\t\tAnim_mul = 0x00000046,\n\t\tSoundIdx_mul = 0x00000047,\n\t\tSound_mul = 0x00000048,\n\t\tTexIdx_mul = 0x00000049,\n\t\tTexMaps_mul = 0x0000004A,\n\t\tGumpIdx_mul = 0x0000004B,\n\t\tGumpArt_mul = 0x0000004C,\n\t\tMulti_idx = 0x0000004D,\n\t\tMulti_mul = 0x0000004E,\n\t}\n\tpublic partial class MainForm : Form\n\t{\n\t\tprivate PatchFile _patchFile;\n\t\tprivate bool _updateScreen = true;\n\t\tprivate Animation _anim;\n\t\tpublic PatchFile patchFile { get { return _patchFile; } set { _patchFile = value;} }\n\t\tprivate void UpdateForm()\n\t\t{\n\t\t\tupDown.Maximum = _patchFile.patchCount - 1;\n\t\t\tnameLbl.Text = \"Name: \" + _patchFile.name;\n\t\t\tauthLbl.Text = \"Author: \" + _patchFile.author;\n\t\t\tdescLbl.Text = \"Description: \" + _patchFile.desc;\n\t\t\tpatchesLbl.Text = \"Patches: \" + _patchFile.patchCount.ToString(\"0,0\");\n\t\t\tPatch p = _patchFile.patches[(int)upDown.Value];\n\t\t\tUpdateImage(p);\t\t\n\t\t\tif( p.data != null )\n\t\t\t\ttextBox.Lines = FormatString(p.data, p.data.Length);\n\t\t\tfileidLbl.Text = \"FileID: \" + p.fileID.ToString(\"X2\");\n\t\t\tblockidLbl.Text = \"BlockID: \" + p.blockID.ToString(\"X2\");\n\t\t\textraLbl.Text = \"Extra: \" + p.extra.ToString(\"X2\");\n\t\t\tlengthLbl.Text = \"Length: \" + p.length.ToString();\n\t\t\tInvalidate();\t\n\t\t}\n\t\tpublic MainForm()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t}\n\t\tprivate void openToolStripMenuItem_Click(object sender, EventArgs e)\n\t\t{\n\t\t\topenFileDialog.Title = \"Select a file to open\";\n\t\t\topenFileDialog.CheckFileExists = false;\n\t\t\tif( openFileDialog.ShowDialog() == DialogResult.OK )\n\t\t\t{\n\t\t\t\tBinaryReader reader = new BinaryReader(File.OpenRead(openFileDialog.FileName));\n\t\t\t\t_patchFile = new PatchFile();\n\t\t\t\tint read = reader.ReadInt32();\n\t\t\t\tif( read != 0x504f554d )\n\t\t\t\t{\n\t\t\t\t\tMessageBox.Show(\"Invalid MUO file\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treader.ReadInt32();\n\t\t\t\tstring temp = \"\";\n\t\t\t\tbyte b = 0;\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t\t\t_patchFile.name = temp;\n\t\t\t\ttemp = \"\";\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t{\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t\t\t}\n\t\t\t\t_patchFile.desc = temp;\n\t\t\t\ttemp = \"\";\n\t\t\t\twhile( ( b = reader.ReadByte() ) != 0 )\n\t\t\t\t{\n\t\t\t\t\ttemp = temp + ( (char)b );\n\t\t
{"input": "package kademlia;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.util.NoSuchElementException;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport kademlia.dht.GetParameter;\nimport kademlia.dht.DHT;\nimport kademlia.dht.KadContent;\nimport kademlia.dht.KademliaDHT;\nimport kademlia.dht.KademliaStorageEntry;\nimport kademlia.dht.JKademliaStorageEntry;\nimport kademlia.exceptions.ContentNotFoundException;\nimport kademlia.exceptions.RoutingException;\nimport kademlia.message.MessageFactory;\nimport kademlia.node.Node;\nimport kademlia.node.KademliaId;\nimport kademlia.operation.ConnectOperation;\nimport kademlia.operation.ContentLookupOperation;\nimport kademlia.operation.Operation;\nimport kademlia.operation.KadRefreshOperation;\nimport kademlia.operation.StoreOperation;\nimport kademlia.routing.JKademliaRoutingTable;\nimport kademlia.routing.KademliaRoutingTable;\nimport kademlia.util.serializer.JsonDHTSerializer;\nimport kademlia.util.serializer.JsonRoutingTableSerializer;\nimport kademlia.util.serializer.JsonSerializer;\n\n\n/**\n * The main Kademlia Node on the network, this node manages everything for this local system.\n *\n * @author Joshua Kissoon\n * @since 20140215\n *\n * @todo When we receive a store message - if we have a newer version of the content, re-send this newer version to that node so as to update their version\n * @todo Handle IPv6 Addresses\n *\n */\npublic class JKademliaNode implements KademliaNode\n{\n\n    /* Kademlia Attributes */\n    private final String ownerId;\n\n    /* Objects to be used */\n    private final transient Node localNode;\n    private final transient KadServer server;\n    private final transient KademliaDHT dht;", "context": "src/kademlia/operation/KadRefreshOperation.java\npublic class KadRefreshOperation implements Operation\n{\n\n    private final KadServer server;\n    private final KademliaNode localNode;\n    private final KademliaDHT dht;\n    private final KadConfiguration config;\n\n    public KadRefreshOperation(KadServer server, KademliaNode localNode, KademliaDHT dht, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.dht = dht;\n        this.config = config;\n    }\n\n    @Override\n    public void execute() throws IOException\n    {\n        /* Run our BucketRefreshOperation to refresh buckets */\n        new BucketRefreshOperation(this.server, this.localNode, this.config).execute();\n\n        /* After buckets have been refreshed, we refresh content */\n        new ContentRefreshOperation(this.server, this.localNode, this.dht, this.config).execute();\n    }\n}\nsrc/kademlia/operation/StoreOperation.java\npublic class StoreOperation implements Operation\n{\n\n    private final KadServer server;\n    private final KademliaNode localNode;\n    private final JKademliaStorageEntry storageEntry;\n    private final KademliaDHT localDht;\n    private final KadConfiguration config;\n\n    /**\n     * @param server\n     * @param localNode\n     * @param storageEntry The content to be stored on the DHT\n     * @param localDht     The local DHT\n     * @param config\n     */\n    public StoreOperation(KadServer server, KademliaNode localNode, JKademliaStorageEntry storageEntry, KademliaDHT localDht, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.storageEntry = storageEntry;\n        this.localDht = localDht;\n        this.config = config;\n    }\n\n    @Override\n    public synchronized void execute() throws IOException\n    {\n        /* Get the nodes on which we need to store the content */\n        NodeLookupOperation ndlo = new NodeLookupOperation(this.server, this.localNode, this.storageEntry.getContentMetadata().getKey(), this.config);\n        ndlo.execute();\n        List<Node> nodes = ndlo.getClosestNodes();\n\n        /* Create the message */\n        Message msg = new StoreContentMessage(this.localNode.getNode(), this.storageEntry);\n\n        /*Store the message on all of the K-Nodes*/\n        for (Node n : nodes)\n        {\n            if (n.equals(this.localNode.getNode()))\n            {\n                /* Store the content locally */\n                this.localDht.store(this.storageEntry);\n            }\n            else\n            {\n                /**\n                 * @todo Create a receiver that receives a store acknowledgement message to count how many nodes a content have been stored at\n                 */\n                this.server.sendMessage(n, msg, null);\n            }\n        }\n    }\n\n    /**\n     * @return The number of nodes that have stored this content\n     *\n     * @todo Implement this method\n     */\n    public int numNodesStoredAt()\n    {\n        return 1;\n    }\n}\nsrc/kademlia/dht/JKademliaStorageEntry.java\npublic class JKademliaStorageEntry implements KademliaStorageEntry\n{\n\n    private String content;\n    private final StorageEntryMetadata metadata;\n\n    public JKademliaStorageEntry(final KadContent content)\n    {\n        this(content, new StorageEntryMetadata(content));\n    }\n\n    public JKademliaStorageEntry(final KadContent content, final StorageEntryMetadata metadata)\n    {\n        this.setContent(content.toSerializedForm());\n        this.metadata = metadata;\n    }\n\n    @Override\n    public final void setContent(final byte[] data)\n    {\n        this.content = new String(data);\n    }\n\n    @Override\n    public final byte[] getContent()\n    {\n        return this.content.getBytes();\n    }\n\n    @Override\n    public final KademliaStorageEntryMetadata getContentMetadata()\n    {\n        return this.metadata;\n    }\n\n    @Override\n    public String toString()\n    {\n        StringBuilder sb = new StringBuilder(\"[StorageEntry: \");\n\n        sb.append(\"[Content: \");\n        sb.append(this.getContent());\n        sb.append(\"]\");\n\n        sb.append(this.getContentMetadata());\n\n        sb.append(\"]\");\n\n        return sb.toString();\n    }\n}\nsrc/kademlia/dht/DHT.java\npublic class DHT implements KademliaDHT\n{\n\n    private transient StoredContentManager contentManager;\n    private transient KadSerializer<JKademliaStorageEntry> serializer = null;\n    private transient KadConfiguration config;\n\n    private final String ownerId;\n\n    public DHT(String ownerId, KadConfiguration config)\n    {\n        this.ownerId = ownerId;\n        this.config = config;\n        this.initialize();\n    }\n\n    @Override\n    public final void initialize()\n    {\n        contentManager = new StoredContentManager();\n    }\n\n    @Override\n    public void setConfiguration(KadConfiguration con)\n    {\n        this.config = con;\n    }\n\n    @Override\n    public KadSerializer<JKademliaStorageEntry> getSerializer()\n    {\n        if (null == serializer)\n        {\n            serializer = new JsonSerializer<>();\n        }\n\n        return serializer;\n    }\n\n    @Override\n    public boolean store(JKademliaStorageEntry content) throws IOException\n    {\n        /* Lets check if we have this content and it's the updated version */\n        if (this.contentManager.contains(content.getContentMetadata()))\n        {\n            KademliaStorageEntryMetadata current = this.contentManager.get(content.getContentMetadata());\n\n            /* update the last republished time */\n            current.updateLastRepublished();\n\n            if (current.getLastUpdatedTimestamp() >= content.getContentMetadata().getLastUpdatedTimestamp())\n            {\n                /* We have the current content, no need to update it! just leave this method now */\n                return false;\n            }\n            else\n            {\n                /* We have this content, but not the latest version, lets delete it so the new version will be added below */\n                try\n                {\n                    //System.out.println(\"Removing older content to update it\");\n                    this.remove(content.getContentMetadata());\n                }\n                catch (ContentNotFoundException ex)\n                {\n                    /* This won't ever happen at this point since we only get here if the content is found, lets ignore it  */\n                }\n            }\n        }\n\n        /**\n         * If we got here means we don't have this content, or we need to update the content\n         * If we need to update the content, the code above would've already deleted it, so we just need to re-add it\n         */\n        try\n        {\n            //System.out.println(\"Adding new content.\");\n            /* Keep track of this content in the entries manager */\n            KademliaStorageEntryMetadata sEntry = this.contentManager.put(content.getContentMetadata());\n\n            /* Now we store the content locally in a file */\n            String contentStorageFolder = this.getContentStorageFolderName(content.getContentMetadata().getKey());\n\n            try (FileOutputStream fout = new FileOutputStream(contentStorageFolder + File.separator + sEntry.hashCode() + \".kct\");\n                    DataOutputStream dout = new DataOutputStream(fout))\n            {\n                this.getSerializer().write(content, dout);\n            }\n            return true;\n        }\n        catch (ContentExistException e)\n        {\n            /**\n             * Content already exist on the DHT\n             * This won't happen because above takes care of removing the content if it's older and needs to be updated,\n             * or returning if we already have the current content version.\n             */\n            return false;\n        }\n    }\n\n    @Override\n    public boolean store(KadContent content) throws IOException\n    {\n        return this.store(new JKademliaStorageEntry(content));\n    }\n\n    @Override\n    public JKademliaStorageEntry retrieve(KademliaId key, int hashCode) throws FileNotFoundException, IOException, ClassNotFoundException\n    {\n        String folder = this.getContentStorageFolderName(key);\n        DataInputStream din = new DataInputStream(new FileInputStream(folder + File.separator + hashCode + \".kct\"));\n        return this.getSerializer().read(din);\n    }\n\n    @Override\n    public boolean contains(GetParameter param)\n    {\n        return this.contentManager.contains(param);\n    }\n\n    @Override\n    public JKademliaStorageEntry get(KademliaStorageEntryMetadata entry) throws IOException, NoSuchElementException\n    {\n        try\n        {\n            return this.retrieve(entry.getKey(), entry.hashCode());\n        }\n        catch (FileNotFoundException e)\n        {\n            System.err.println(\"Error while loading file for content. Message: \" + e.getMessage());\n        }\n        catch (ClassNotFoundException e)\n        {\n            System.err.println(\"The class for some content was not found. Message: \" + e.getMessage());\n        }\n\n        /* If we got here, means we got no entries */\n        throw new NoSuchElementException();\n    }\n\n    @Override\n    public JKademliaStorageEntry get(GetParameter param) throws NoSuchElementException, IOException\n    {\n        /* Load a KadContent if any exist for the given criteria */\n        try\n        {\n            KademliaStorageEntryMetadata e = this.contentManager.get(param);\n            return this.retrieve(e.getKey(), e.hashCode());\n        }\n        catch (FileNotFoundException e)\n        {\n            System.err.println(\"Error while loading file for content. Message: \" + e.getMessage());\n        }\n        catch (ClassNotFoundException e)\n        {\n            System.err.println(\"The class for some content was not found. Message: \" + e.getMessage());\n        }\n\n        /* If we got here, means we got no entries */\n        throw new NoSuchElementException();\n    }\n\n    @Override\n    public void remove(KadContent content) throws ContentNotFoundException\n    {\n        this.remove(new StorageEntryMetadata(content));\n    }\n\n    @Override\n    public void remove(KademliaStorageEntryMetadata entry) throws ContentNotFoundException\n    {\n        String folder = this.getContentStorageFolderName(entry.getKey());\n        File file = new File(folder + File.separator + entry.hashCode() + \".kct\");\n\n        contentManager.remove(entry);\n\n        if (file.exists())\n        {\n            file.delete();\n        }\n        else\n        {\n            throw new ContentNotFoundException();\n        }\n    }\n\n    /**\n     * Get the name of the folder for which a content should be stored\n     *\n     * @param key The key of the content\n     *\n     * @return String The name of the folder\n     */\n    private String getContentStorageFolderName(KademliaId key)\n    {\n        /**\n         * Each content is stored in a folder named after the first 2 characters of the NodeId\n         *\n         * The name of the file containing the content is the hash of this content\n         */\n        String folderName = key.hexRepresentation().substring(0, 2);\n        File contentStorageFolder = new File(this.config.getNodeDataFolder(ownerId) + File.separator + folderName);\n\n        /* Create the content folder if it doesn't exist */\n        if (!contentStorageFolder.isDirectory())\n        {\n            contentStorageFolder.mkdir();\n        }\n\n        return contentStorageFolder.toString();\n    }\n\n    @Override\n    public List<KademliaStorageEntryMetadata> getStorageEntries()\n    {\n        return contentManager.getAllEntries();\n    }\n\n    @Override\n    public void putStorageEntries(List<KademliaStorageEntryMetadata> ientries)\n    {\n        for (KademliaStorageEntryMetadata e : ientries)\n        {\n            try\n            {\n                this.contentManager.put(e);\n            }\n            catch (ContentExistException ex)\n            {\n                /* Entry already exist, no need to store it again */\n            }\n        }\n    }\n\n    @Override\n    public synchronized String toString()\n    {\n        return this.contentManager.toString();\n    }\n}\nsrc/kademlia/routing/KademliaRoutingTable.java\npublic interface KademliaRoutingTable\n{\n\n    /**\n     * Initialize the RoutingTable to it's default state\n     */\n    public void initialize();\n\n    /**\n     * Sets the configuration file for this routing table\n     *\n     * @param config\n     */\n    public void setConfiguration(KadConfiguration config);\n\n    /**\n     * Adds a contact to the routing table based on how far it is from the LocalNode.\n     *\n     * @param c The contact to add\n     */\n    public void insert(Contact c);\n\n    /**\n     * Adds a node to the routing table based on how far it is from the LocalNode.\n     *\n     * @param n The node to add\n     */\n    public void insert(Node n);\n\n    /**\n     * Compute the bucket ID in which a given node should be placed; the bucketId is computed based on how far the node is away from the Local Node.\n     *\n     * @param nid The NodeId for which we want to find which bucket it belong to\n     *\n     * @return Integer The bucket ID in which the given node should be placed.\n     */\n    public int getBucketId(KademliaId nid);\n\n    /**\n     * Find the closest set of contacts to a given NodeId\n     *\n     * @param target           The NodeId to find contacts close to\n     * @param numNodesRequired The number of contacts to find\n     *\n     * @return List A List of contacts closest to target\n     */\n    public List<Node> findClosest(KademliaId target, int numNodesRequired);\n\n    /**\n     * @return List A List of all Nodes in this RoutingTable\n     */\n    public List getAllNodes();\n\n    /**\n     * @return List A List of all Nodes in this RoutingTable\n     */\n    public List getAllContacts();\n\n    /**\n     * @return Bucket[] The buckets in this Kad Instance\n     */\n    public KademliaBucket[] getBuckets();\n\n    /**\n     * Method used by operations to notify the routing table of any contacts that have been unresponsive.\n     *\n     * @param contacts The set of unresponsive contacts\n     */\n    public void setUnresponsiveContacts(List<Node> contacts);\n\n    /**\n     * Method used by operations to notify the routing table of any contacts that have been unresponsive.\n     *\n     * @param n\n     */\n    public void setUnresponsiveContact(Node n);\n\n}\nsrc/kademlia/dht/KadContent.java\npublic interface KadContent\n{\n\n    /**\n     * @return NodeId The DHT key for this content\n     */\n    public KademliaId getKey();\n\n    /**\n     * @return String The type of content\n     */\n    public String getType();\n\n    /**\n     * Each content will have an created date\n     * This allows systems to know when to delete a content form his/her machine\n     *\n     * @return long The create date of this content\n     */\n    public long getCreatedTimestamp();\n\n    /**\n     * Each content will have an update timestamp\n     * This allows the DHT to keep only the latest version of a content\n     *\n     * @return long The timestamp of when this content was last updated\n     */\n    public long getLastUpdatedTimestamp();\n\n    /**\n     * @return The ID of the owner of this content\n     */\n    public String getOwnerId();\n\n    /**\n     * Each content needs to be in byte format for transporting and storage,\n     * this method takes care of that.\n     *\n     * Each object is responsible for transforming itself to byte format since the\n     * structure of methods may differ.\n     *\n     * @return The content in byte format\n     */\n    public byte[] toSerializedForm();\n\n    /**\n     * Given the Content in byte format, read it\n     *\n     * @param data The object in byte format\n     *\n     * @return A new object from the given\n     */\n    public KadContent fromSerializedForm(byte[] data);\n}\nsrc/kademlia/util/serializer/JsonRoutingTableSerializer.java\npublic class JsonRoutingTableSerializer implements KadSerializer<KademliaRoutingTable>\n{\n\n    private final Gson gson;\n\n    Type contactCollectionType = new TypeToken<List<Contact>>()\n    {\n    }.getType();\n\n    private final KadConfiguration config;\n\n    \n    {\n        gson = new Gson();\n    }\n\n    /**\n     * Initialize the class\n     *\n     * @param config\n     */\n    public JsonRoutingTableSerializer(KadConfiguration config)\n    {\n        this.config = config;\n    }\n\n    @Override\n    public void write(KademliaRoutingTable data, DataOutputStream out) throws IOException\n    {\n        try (JsonWriter writer = new JsonWriter(new OutputStreamWriter(out)))\n        {\n            writer.beginArray();\n\n            /* Write the basic JKademliaRoutingTable */\n            gson.toJson(data, JKademliaRoutingTable.class, writer);\n\n            /* Now Store the Contacts  */\n            gson.toJson(data.getAllContacts(), contactCollectionType, writer);\n\n            writer.endArray();\n        }\n    }\n\n    @Override\n    public KademliaRoutingTable read(DataInputStream in) throws IOException, ClassNotFoundException\n    {\n        try (DataInputStream din = new DataInputStream(in);\n                JsonReader reader = new JsonReader(new InputStreamReader(in)))\n        {\n            reader.beginArray();\n\n            /* Read the basic JKademliaRoutingTable */\n            KademliaRoutingTable tbl = gson.fromJson(reader, KademliaRoutingTable.class);\n            tbl.setConfiguration(config);\n            \n            /* Now get the Contacts and add them back to the JKademliaRoutingTable */\n            List<Contact> contacts = gson.fromJson(reader, contactCollectionType);\n            tbl.initialize();\n\n            for (Contact c : contacts)\n            {\n                tbl.insert(c);\n            }\n\n            reader.endArray();\n            /* Read and return the Content*/\n            return tbl;\n        }\n    }\n}\nsrc/kademlia/operation/ConnectOperation.java\npublic class ConnectOperation implements Operation, Receiver\n{\n\n    public static final int MAX_CONNECT_ATTEMPTS = 5;       // Try 5 times to connect to a node\n\n    private final KadServer server;\n    private final KademliaNode localNode;\n    private final Node bootstrapNode;\n    private final KadConfiguration config;\n\n    private boolean error;\n    private int attempts;\n\n    /**\n     * @param server    The message server used to send/receive messages\n     * @param local     The local node\n     * @param bootstrap Node to use to bootstrap the local node onto the network\n     * @param config\n     */\n    public ConnectOperation(KadServer server, KademliaNode local, Node bootstrap, KadConfiguration config)\n    {\n        this.server = server;\n        this.localNode = local;\n        this.bootstrapNode = bootstrap;\n        this.config = config;\n    }\n\n    @Override\n    public synchronized void execute() throws IOException\n    {\n        try\n        {\n            /* Contact the bootstrap node */\n            this.error = true;\n            this.attempts = 0;\n            Message m = new ConnectMessage(this.localNode.getNode());\n\n            /* Send a connect message to the bootstrap node */\n            server.sendMessage(this.bootstrapNode, m, this);\n\n            /* If we haven't finished as yet, wait for a maximum of config.operationTimeout() time */\n            int totalTimeWaited = 0;\n            int timeInterval = 50;     // We re-check every 300 milliseconds\n            while (totalTimeWaited < this.config.operationTimeout())\n            {\n                if (error)\n                {\n                    wait(timeInterval);\n                    totalTimeWaited += timeInterval;\n                }\n                else\n                {\n                    break;\n                }\n            }\n            if (error)\n            {\n                /* If we still haven't received any responses by then, do a routing timeout */\n                throw new RoutingException(\"ConnectOperation: Bootstrap node did not respond: \" + bootstrapNode);\n            }\n\n            /* Perform lookup for our own ID to get nodes close to us */\n            Operation lookup = new NodeLookupOperation(this.server, this.localNode, this.localNode.getNode().getNodeId(), this.config);\n            lookup.execute();\n\n            /**\n             * Refresh buckets to get a good routing table\n             * After the above lookup operation, K nodes will be in our routing table,\n             * Now we try to populate all of our buckets.\n             */\n            new BucketRefreshOperation(this.server, this.localNode, this.config).execute();\n        }\n        catch (InterruptedException e)\n        {\n            System.err.println(\"Connect operation was interrupted. \");\n        }\n    }\n\n    /**\n     * Receives an AcknowledgeMessage from the bootstrap node.\n     *\n     * @param comm\n     */\n    @Override\n    public synchronized void receive(Message incoming, int comm)\n    {\n        /* The incoming message will be an acknowledgement message */\n        AcknowledgeMessage msg = (AcknowledgeMessage) incoming;\n\n        /* The bootstrap node has responded, insert it into our space */\n        this.localNode.getRoutingTable().insert(this.bootstrapNode);\n\n        /* We got a response, so the error is false */\n        error = false;\n\n        /* Wake up any waiting thread */\n        notify();\n    }\n\n    /**\n     * Resends a ConnectMessage to the boot strap node a maximum of MAX_ATTEMPTS\n     * times.\n     *\n     * @param comm\n     *\n     * @throws java.io.IOException\n     */\n    @Override\n    public synchronized void timeout(int comm) throws IOException\n    {\n        if (++this.attempts < MAX_CONNECT_ATTEMPTS)\n        {\n            this.server.sendMessage(this.bootstrapNode, new ConnectMessage(this.localNode.getNode()), this);\n        }\n        else\n        {\n            /* We just exit, so notify all other threads that are possibly waiting */\n            notify();\n        }\n    }\n}\nsrc/kademlia/dht/KademliaStorageEntry.java\npublic interface KademliaStorageEntry\n{\n\n    /**\n     * Add the content to the storage entry\n     *\n     * @param data The content data in byte[] format\n     */\n    public void setContent(final byte[] data);\n\n    /**\n     * Get the content from this storage entry\n     *\n     * @return The content in byte format\n     */\n    public byte[] getContent();\n\n    /**\n     * Get the metadata for this storage entry\n     *\n     * @return the storage entry metadata\n     */\n    public KademliaStorageEntryMetadata getContentMetadata();\n}\nsrc/kademlia/message/MessageFactory.java\npublic class MessageFactory implements KademliaMessageFactory\n{\n\n    private final KademliaNode localNode;\n    private final KademliaDHT dht;\n    private final KadConfiguration config;\n\n    public MessageFactory(KademliaNode local, KademliaDHT dht, KadConfiguration config)\n    {\n        this.localNode = local;\n        this.dht = dht;\n        this.config = config;\n    }\n\n    @Override\n    public Message createMessage(byte code, DataInputStream in) throws IOException\n    {\n        switch (code)\n        {\n            case AcknowledgeMessage.CODE:\n                return new AcknowledgeMessage(in);\n            case ConnectMessage.CODE:\n                return new ConnectMessage(in);\n            case ContentMessage.CODE:\n                return new ContentMessage(in);\n            case ContentLookupMessage.CODE:\n                return new ContentLookupMessage(in);\n            case NodeLookupMessage.CODE:\n                return new NodeLookupMessage(in);\n            case NodeReplyMessage.CODE:\n                return new NodeReplyMessage(in);\n            case SimpleMessage.CODE:\n                return new SimpleMessage(in);\n            case StoreContentMessage.CODE:\n                return new StoreContentMessage(in);\n            default:\n                //System.out.println(this.localNode + \" - No Message handler found for message. Code: \" + code);\n                return new SimpleMessage(in);\n\n        }\n    }\n\n    @Override\n    public Receiver createReceiver(byte code, KadServer server)\n    {\n        switch (code)\n        {\n            case ConnectMessage.CODE:\n                return new ConnectReceiver(server, this.localNode);\n            case ContentLookupMessage.CODE:\n                return new ContentLookupReceiver(server, this.localNode, this.dht, this.config);\n            case NodeLookupMessage.CODE:\n                return new NodeLookupReceiver(server, this.localNode, this.config);\n            case StoreContentMessage.CODE:\n                return new StoreContentReceiver(server, this.localNode, this.dht);\n            default:\n                //System.out.println(\"No receiver found for message. Code: \" + code);\n                return new SimpleReceiver();\n        }\n    }\n}\nsrc/kademlia/util/serializer/JsonSerializer.java\npublic class JsonSerializer<T> implements KadSerializer<T>\n{\n\n    private final Gson gson;\n\n    \n    {\n        gson = new Gson();\n    }\n\n    @Override\n    public void write(T data, DataOutputStream out) throws IOException\n    {\n        try (JsonWriter writer = new JsonWriter(new OutputStreamWriter(out)))\n        {\n            writer.beginArray();\n\n            /* Store the content type */\n            gson.toJson(data.getClass().getName(), String.class, writer);\n\n            /* Now Store the content */\n            gson.toJson(data, data.getClass(), writer);\n\n            writer.endArray();\n        }\n    }\n\n    @Override\n    public T read(DataInputStream in) throws IOException, ClassNotFoundException\n    {\n        try (DataInputStream din = new DataInputStream(in);\n                JsonReader reader = new JsonReader(new InputStreamReader(in)))\n        {\n            reader.beginArray();\n\n            /* Read the class name */\n            String className = gson.fromJson(reader, String.class);\n\n            /* Read and return the Content*/\n            T ret = gson.fromJson(reader, Class.forName(className));\n            \n            reader.endArray();\n            \n            return ret;\n        }\n    }\n}\nsrc/kademlia/exceptions/RoutingException.java\npublic class RoutingException extends IOException\n{\n\n    public RoutingException()\n    {\n        super();\n    }\n\n    public RoutingException(String message)\n    {\n        super(message);\n    }\n}\nsrc/kademlia/node/KademliaId.java\npublic class KademliaId implements Streamable, Serializable\n{\n\n    public final transient static int ID_LENGTH = 160;\n    private byte[] keyBytes;\n\n    /**\n     * Construct the NodeId from some string\n     *\n     * @param data The user generated key string\n     */\n    public KademliaId(String data)\n    {\n        keyBytes = data.getBytes();\n        if (keyBytes.length != ID_LENGTH / 8)\n        {\n            throw new IllegalArgumentException(\"Specified Data need to be \" + (ID_LENGTH / 8) + \" characters long.\");\n        }\n    }\n\n    /**\n     * Generate a random key\n     */\n    public KademliaId()\n    {\n        keyBytes = new byte[ID_LENGTH / 8];\n        new Random().nextBytes(keyBytes);\n    }\n\n    /**\n     * Generate the NodeId from a given byte[]\n     *\n     * @param bytes\n     */\n    public KademliaId(byte[] bytes)\n    {\n        if (bytes.length != ID_LENGTH / 8)\n        {\n            throw new IllegalArgumentException(\"Specified Data need to be \" + (ID_LENGTH / 8) + \" characters long. Data Given: '\" + new String(bytes) + \"'\");\n        }\n        this.keyBytes = bytes;\n    }\n\n    /**\n     * Load the NodeId from a DataInput stream\n     *\n     * @param in The stream from which to load the NodeId\n     *\n     * @throws IOException\n     */\n    public KademliaId(DataInputStream in) throws IOException\n    {\n        this.fromStream(in);\n    }\n\n    public byte[] getBytes()\n    {\n        return this.keyBytes;\n    }\n\n    /**\n     * @return The BigInteger representation of the key\n     */\n    public BigInteger getInt()\n    {\n        return new BigInteger(1, this.getBytes());\n    }\n\n    /**\n     * Compares a NodeId to this NodeId\n     *\n     * @param o The NodeId to compare to this NodeId\n     *\n     * @return boolean Whether the 2 NodeIds are equal\n     */\n    @Override\n    public boolean equals(Object o)\n    {\n        if (o instanceof KademliaId)\n        {\n            KademliaId nid = (KademliaId) o;\n            return this.hashCode() == nid.hashCode();\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode()\n    {\n        int hash = 7;\n        hash = 83 * hash + Arrays.hashCode(this.keyBytes);\n        return hash;\n    }\n\n    /**\n     * Checks the distance between this and another NodeId\n     *\n     * @param nid\n     *\n     * @return The distance of this NodeId from the given NodeId\n     */\n    public KademliaId xor(KademliaId nid)\n    {\n        byte[] result = new byte[ID_LENGTH / 8];\n        byte[] nidBytes = nid.getBytes();\n\n        for (int i = 0; i < ID_LENGTH / 8; i++)\n        {\n            result[i] = (byte) (this.keyBytes[i] ^ nidBytes[i]);\n        }\n\n        KademliaId resNid = new KademliaId(result);\n\n        return resNid;\n    }\n\n    /**\n     * Generates a NodeId that is some distance away from this NodeId\n     *\n     * @param distance in number of bits\n     *\n     * @return NodeId The newly generated NodeId\n     */\n    public KademliaId generateNodeIdByDistance(int distance)\n    {\n        byte[] result = new byte[ID_LENGTH / 8];\n\n        /* Since distance = ID_LENGTH - prefixLength, we need to fill that amount with 0's */\n        int numByteZeroes = (ID_LENGTH - distance) / 8;\n        int numBitZeroes = 8 - (distance % 8);\n\n        /* Filling byte zeroes */\n        for (int i = 0; i < numByteZeroes; i++)\n        {\n            result[i] = 0;\n        }\n\n        /* Filling bit zeroes */\n        BitSet bits = new BitSet(8);\n        bits.set(0, 8);\n\n        for (int i = 0; i < numBitZeroes; i++)\n        {\n            /* Shift 1 zero into the start of the value */\n            bits.clear(i);\n        }\n        bits.flip(0, 8);        // Flip the bits since they're in reverse order\n        result[numByteZeroes] = (byte) bits.toByteArray()[0];\n\n        /* Set the remaining bytes to Maximum value */\n        for (int i = numByteZeroes + 1; i < result.length; i++)\n        {\n            result[i] = Byte.MAX_VALUE;\n        }\n\n        return this.xor(new KademliaId(result));\n    }\n\n    /**\n     * Counts the number of leading 0's in this NodeId\n     *\n     * @return Integer The number of leading 0's\n     */\n    public int getFirstSetBitIndex()\n    {\n        int prefixLength = 0;\n\n        for (byte b : this.keyBytes)\n        {\n            if (b == 0)\n            {\n                prefixLength += 8;\n            }\n            else\n            {\n                /* If the byte is not 0, we need to count how many MSBs are 0 */\n                int count = 0;\n                for (int i = 7; i >= 0; i--)\n                {\n                    boolean a = (b & (1 << i)) == 0;\n                    if (a)\n                    {\n                        count++;\n                    }\n                    else\n                    {\n                        break;   // Reset the count if we encounter a non-zero number\n                    }\n                }\n\n                /* Add the count of MSB 0s to the prefix length */\n                prefixLength += count;\n\n                /* Break here since we've now covered the MSB 0s */\n                break;\n            }\n        }\n        return prefixLength;\n    }\n\n    /**\n     * Gets the distance from this NodeId to another NodeId\n     *\n     * @param to\n     *\n     * @return Integer The distance\n     */\n    public int getDistance(KademliaId to)\n    {\n        /**\n         * Compute the xor of this and to\n         * Get the index i of the first set bit of the xor returned NodeId\n         * The distance between them is ID_LENGTH - i\n         */\n        return ID_LENGTH - this.xor(to).getFirstSetBitIndex();\n    }\n\n    @Override\n    public void toStream(DataOutputStream out) throws IOException\n    {\n        /* Add the NodeId to the stream */\n        out.write(this.getBytes());\n    }\n\n    @Override\n    public final void fromStream(DataInputStream in) throws IOException\n    {\n        byte[] input = new byte[ID_LENGTH / 8];\n        in.readFully(input);\n        this.keyBytes = input;\n    }\n\n    public String hexRepresentation()\n    {\n        /* Returns the hex format of this NodeId */\n        BigInteger bi = new BigInteger(1, this.keyBytes);\n        return String.format(\"%0\" + (this.keyBytes.length << 1) + \"X\", bi);\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.hexRepresentation();\n    }\n\n}\nsrc/kademlia/dht/KademliaDHT.java\npublic interface KademliaDHT\n{\n\n    /**\n     * Initialize this DHT to it's default state\n     */\n    public void initialize();\n\n    /**\n     * Set a new configuration. Mainly used when we restore the DHT state from a file\n     *\n     * @param con The new configuration file\n     */\n    public void setConfiguration(KadConfiguration con);\n\n    /**\n     * Creates a new Serializer or returns an existing serializer\n     *\n     * @return The new ContentSerializer\n     */\n    public KadSerializer<JKademliaStorageEntry> getSerializer();\n\n    /**\n     * Handle storing content locally\n     *\n     * @param content The DHT content to store\n     *\n     * @return boolean true if we stored the content, false if the content already exists and is up to date\n     *\n     * @throws java.io.IOException\n     */\n    public boolean store(JKademliaStorageEntry content) throws IOException;\n\n    public boolean store(KadContent content) throws IOException;\n\n    /**\n     * Retrieves a Content from local storage\n     *\n     * @param key      The Key of the content to retrieve\n     * @param hashCode The hash code of the content to retrieve\n     *\n     * @return A KadContent object\n     *\n     * @throws java.io.FileNotFoundException\n     * @throws java.lang.ClassNotFoundException\n     */\n    public JKademliaStorageEntry retrieve(KademliaId key, int hashCode) throws FileNotFoundException, IOException, ClassNotFoundException;\n\n    /**\n     * Check if any content for the given criteria exists in this DHT\n     *\n     * @param param The content search criteria\n     *\n     * @return boolean Whether any content exist that satisfy the criteria\n     */\n    public boolean contains(GetParameter param);\n\n    /**\n     * Retrieve and create a KadContent object given the StorageEntry object\n     *\n     * @param entry The StorageEntry used to retrieve this content\n     *\n     * @return KadContent The content object\n     *\n     * @throws java.io.IOException\n     */\n    public JKademliaStorageEntry get(KademliaStorageEntryMetadata entry) throws IOException, NoSuchElementException;\n\n    /**\n     * Get the StorageEntry for the content if any exist.\n     *\n     * @param param The parameters used to filter the content needed\n     *\n     * @return KadContent A KadContent found on the DHT satisfying the given criteria\n     *\n     * @throws java.io.IOException\n     */\n    public JKademliaStorageEntry get(GetParameter param) throws NoSuchElementException, IOException;\n\n    /**\n     * Delete a content from local storage\n     *\n     * @param content The Content to Remove\n     *\n     *\n     * @throws kademlia.exceptions.ContentNotFoundException\n     */\n    public void remove(KadContent content) throws ContentNotFoundException;\n\n    public void remove(KademliaStorageEntryMetadata entry) throws ContentNotFoundException;\n\n    /**\n     * @return A List of all StorageEntries for this node\n     */\n    public List<KademliaStorageEntryMetadata> getStorageEntries();\n\n    /**\n     * Used to add a list of storage entries for existing content to the DHT.\n     * Mainly used when retrieving StorageEntries from a saved state file.\n     *\n     * @param ientries The entries to add\n     */\n    public void putStorageEntries(List<KademliaStorageEntryMetadata> ientries);\n\n}\nsrc/kademlia/operation/Operation.java\npublic interface Operation\n{\n\n    /**\n     * Starts an operation and returns when the operation is finished\n     *\n     * @throws kademlia.exceptions.RoutingException\n     */\n    public void execute() throws IOException, RoutingException;\n}\nsrc/kademlia/routing/JKademliaRoutingTable.java\npublic class JKademliaRoutingTable implements KademliaRoutingTable\n{\n\n    private final Node localNode;  // The current node\n    private transient KademliaBucket[] buckets;\n\n    private transient KadConfiguration config;\n\n    public JKademliaRoutingTable(Node localNode, KadConfiguration config)\n    {\n        this.localNode = localNode;\n        this.config = config;\n\n        /* Initialize all of the buckets to a specific depth */\n        this.initialize();\n\n        /* Insert the local node */\n        this.insert(localNode);\n    }\n\n    /**\n     * Initialize the JKademliaRoutingTable to it's default state\n     */\n    @Override\n    public final void initialize()\n    {\n        this.buckets = new KademliaBucket[KademliaId.ID_LENGTH];\n        for (int i = 0; i < KademliaId.ID_LENGTH; i++)\n        {\n            buckets[i] = new JKademliaBucket(i, this.config);\n        }\n    }\n\n    @Override\n    public void setConfiguration(KadConfiguration config)\n    {\n        this.config = config;\n    }\n\n    /**\n     * Adds a contact to the routing table based on how far it is from the LocalNode.\n     *\n     * @param c The contact to add\n     */\n    @Override\n    public synchronized final void insert(Contact c)\n    {\n        this.buckets[this.getBucketId(c.getNode().getNodeId())].insert(c);\n    }\n\n    /**\n     * Adds a node to the routing table based on how far it is from the LocalNode.\n     *\n     * @param n The node to add\n     */\n    @Override\n    public synchronized final void insert(Node n)\n    {\n        this.buckets[this.getBucketId(n.getNodeId())].insert(n);\n    }\n\n    /**\n     * Compute the bucket ID in which a given node should be placed; the bucketId is computed based on how far the node is away from the Local Node.\n     *\n     * @param nid The NodeId for which we want to find which bucket it belong to\n     *\n     * @return Integer The bucket ID in which the given node should be placed.\n     */\n    @Override\n    public final int getBucketId(KademliaId nid)\n    {\n        int bId = this.localNode.getNodeId().getDistance(nid) - 1;\n\n        /* If we are trying to insert a node into it's own routing table, then the bucket ID will be -1, so let's just keep it in bucket 0 */\n        return bId < 0 ? 0 : bId;\n    }\n\n    /**\n     * Find the closest set of contacts to a given NodeId\n     *\n     * @param target           The NodeId to find contacts close to\n     * @param numNodesRequired The number of contacts to find\n     *\n     * @return List A List of contacts closest to target\n     */\n    @Override\n    public synchronized final List<Node> findClosest(KademliaId target, int numNodesRequired)\n    {\n        TreeSet<Node> sortedSet = new TreeSet<>(new KeyComparator(target));\n        sortedSet.addAll(this.getAllNodes());\n\n        List<Node> closest = new ArrayList<>(numNodesRequired);\n\n        /* Now we have the sorted set, lets get the top numRequired */\n        int count = 0;\n        for (Node n : sortedSet)\n        {\n            closest.add(n);\n            if (++count == numNodesRequired)\n            {\n                break;\n            }\n        }\n        return closest;\n    }\n\n    /**\n     * @return List A List of all Nodes in this JKademliaRoutingTable\n     */\n    @Override\n    public synchronized final List<Node> getAllNodes()\n    {\n        List<Node> nodes = new ArrayList<>();\n\n        for (KademliaBucket b : this.buckets)\n        {\n            for (Contact c : b.getContacts())\n            {\n                nodes.add(c.getNode());\n            }\n        }\n\n        return nodes;\n    }\n\n    /**\n     * @return List A List of all Nodes in this JKademliaRoutingTable\n     */\n    @Override\n    public final List<Contact> getAllContacts()\n    {\n        List<Contact> contacts = new ArrayList<>();\n\n        for (KademliaBucket b : this.buckets)\n        {\n            contacts.addAll(b.getContacts());\n        }\n\n        return contacts;\n    }\n\n    /**\n     * @return Bucket[] The buckets in this Kad Instance\n     */\n    @Override\n    public final KademliaBucket[] getBuckets()\n    {\n        return this.buckets;\n    }\n\n    /**\n     * Set the KadBuckets of this routing table, mainly used when retrieving saved state\n     *\n     * @param buckets\n     */\n    public final void setBuckets(KademliaBucket[] buckets)\n    {\n        this.buckets = buckets;\n    }\n\n    /**\n     * Method used by operations to notify the routing table of any contacts that have been unresponsive.\n     *\n     * @param contacts The set of unresponsive contacts\n     */\n    @Override\n    public void setUnresponsiveContacts(List<Node> contacts)\n    {\n        if (contacts.isEmpty())\n        {\n            return;\n        }\n        for (Node n : contacts)\n        {\n            this.setUnresponsiveContact(n);\n        }\n    }\n\n    /**\n     * Method used by operations to notify the routing table of any contacts that have been unresponsive.\n     *\n     * @param n\n     */\n    @Override\n    public synchronized void setUnresponsiveContact(Node n)\n    {\n        int bucketId = this.getBucketId(n.getNodeId());\n\n        /* Remove the contact from the bucket */\n        this.buckets[bucketId].removeNode(n);\n    }\n\n    @Override\n    public synchronized final String toString()\n    {\n        StringBuilder sb = new StringBuilder(\"\\nPrinting Routing Table Started ***************** \\n\");\n        int totalContacts = 0;\n        for (KademliaBucket b : this.buckets)\n        {\n            if (b.numContacts() > 0)\n            {\n                totalContacts += b.numContacts();\n                sb.append(\"# nodes in Bucket with depth \");\n                sb.append(b.getDepth());\n                sb.append(\": \");\n                sb.append(b.numContacts());\n                sb.append(\"\\n\");\n                sb.append(b.toString());\n                sb.append(\"\\n\");\n            }\n        }\n\n        sb.append(\"\\nTotal Contacts: \");\n        sb.append(totalContacts);\n        sb.append(\"\\n\\n\");\n\n        sb.append(\"Printing Routing Table Ended ******************** \");\n\n        return sb.toString();\n    }\n\n}\nsrc/kademlia/util/serializer/JsonDHTSerializer.java\npublic class JsonDHTSerializer implements KadSerializer<KademliaDHT>\n{\n\n    private final Gson gson;\n    private final Type storageEntriesCollectionType;\n\n    \n    {\n        gson = new Gson();\n\n        storageEntriesCollectionType = new TypeToken<List<KademliaStorageEntryMetadata>>()\n        {\n        }.getType();\n    }\n\n    @Override\n    public void write(KademliaDHT data, DataOutputStream out) throws IOException\n    {\n        try (JsonWriter writer = new JsonWriter(new OutputStreamWriter(out)))\n        {\n            writer.beginArray();\n\n            /* Write the basic DHT */\n            gson.toJson(data, DHT.class, writer);\n\n            /* Now Store the Entries  */\n            gson.toJson(data.getStorageEntries(), this.storageEntriesCollectionType, writer);\n\n            writer.endArray();\n        }\n\n    }\n\n    @Override\n    public KademliaDHT read(DataInputStream in) throws IOException, ClassNotFoundException\n    {\n        try (DataInputStream din = new DataInputStream(in);\n                JsonReader reader = new JsonReader(new InputStreamReader(in)))\n        {\n            reader.beginArray();\n\n            /* Read the basic DHT */\n            DHT dht = gson.fromJson(reader, DHT.class);\n            dht.initialize();\n\n            /* Now get the entries and add them back to the DHT */\n            List<KademliaStorageEntryMetadata> entries = gson.fromJson(reader, this.storageEntriesCollectionType);\n            dht.putStorageEntries(entries);\n\n            reader.endArray();\n            return dht;\n        }\n    }\n}\nsrc/kademlia/exceptions/ContentNotFoundException.java\npublic class ContentNotFoundException extends Exception\n{\n\n    public ContentNotFoundException()\n    {\n        super();\n    }\n\n    public ContentNotFoundException(String message)\n    {\n        super(message);\n    }\n}\nsrc/kademlia/dht/GetParameter.java\npublic class GetParameter\n{\n\n    private KademliaId key;\n    private String ownerId = null;\n    private String type = null;\n\n    /**\n     * Construct a GetParameter to search for data by NodeId and owner\n     *\n     * @param key\n     * @param type\n     */\n    public GetParameter(KademliaId key, String type)\n    {\n        this.key = key;\n        this.type = type;\n    }\n\n    /**\n     * Construct a GetParameter to search for data by NodeId, owner, type\n     *\n     * @param key\n     * @param type\n     * @param owner\n     */\n    public GetParameter(KademliaId key, String type, String owner)\n    {\n        this(key, type);\n        this.ownerId = owner;\n    }\n\n    /**\n     * Construct our get parameter from a Content\n     *\n     * @param c\n     */\n    public GetParameter(KadContent c)\n    {\n        this.key = c.getKey();\n\n        if (c.getType() != null)\n        {\n            this.type = c.getType();\n        }\n\n        if (c.getOwnerId() != null)\n        {\n            this.ownerId = c.getOwnerId();\n        }\n    }\n\n    /**\n     * Construct our get parameter from a StorageEntryMeta data\n     *\n     * @param md\n     */\n    public GetParameter(KademliaStorageEntryMetadata md)\n    {\n        this.key = md.getKey();\n\n        if (md.getType() != null)\n        {\n            this.type = md.getType();\n        }\n\n        if (md.getOwnerId() != null)\n        {\n            this.ownerId = md.getOwnerId();\n        }\n    }\n\n    public KademliaId getKey()\n    {\n        return this.key;\n    }\n\n    public void setOwnerId(String ownerId)\n    {\n        this.ownerId = ownerId;\n    }\n\n    public String getOwnerId()\n    {\n        return this.ownerId;\n    }\n\n    public void setType(String type)\n    {\n        this.type = type;\n    }\n\n    public String getType()\n    {\n        return this.type;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"GetParameter - [Key: \" + key + \"][Owner: \" + this.ownerId + \"][Type: \" + this.type + \"]\";\n    }\n}\nsrc/kademlia/operation/ContentLookupOperation.java\npublic class ContentLookupOperation implements Operation, Receiver\n{\n\n    /* Constants */\n    private static final Byte UNASKED = (byte) 0x00;\n    private static final Byte AWAITING = (byte) 0x01;\n    private static final Byte ASKED = (byte) 0x02;\n    private static final Byte FAILED = (byte) 0x03;\n\n    private final KadServer server;\n    private final JKademliaNode localNode;\n    private JKademliaStorageEntry contentFound = null;\n    private final KadConfiguration config;\n\n    private final ContentLookupMessage lookupMessage;\n\n    private boolean isContentFound;\n    private final SortedMap<Node, Byte> nodes;\n\n    /* Tracks messages in transit and awaiting reply */\n    private final Map<Integer, Node> messagesTransiting;\n\n    /* Used to sort nodes */\n    private final Comparator comparator;\n\n    /* Statistical information */\n    private final RouteLengthChecker routeLengthChecker;\n\n    \n    {\n        messagesTransiting = new HashMap<>();\n        isContentFound = false;\n        routeLengthChecker = new RouteLengthChecker();\n    }\n\n    /**\n     * @param server\n     * @param localNode\n     * @param params    The parameters to search for the content which we need to find\n     * @param config\n     */\n    public ContentLookupOperation(KadServer server, JKademliaNode localNode, GetParameter params, KadConfiguration config)\n    {\n        /* Construct our lookup message */\n        this.lookupMessage = new ContentLookupMessage(localNode.getNode(), params);\n\n        this.server = server;\n        this.localNode = localNode;\n        this.config = config;\n\n        /**\n         * We initialize a TreeMap to store nodes.\n         * This map will be sorted by which nodes are closest to the lookupId\n         */\n        this.comparator = new KeyComparator(params.getKey());\n        this.nodes = new TreeMap(this.comparator);\n    }\n\n    /**\n     * @throws java.io.IOException\n     * @throws kademlia.exceptions.RoutingException\n     */\n    @Override\n    public synchronized void execute() throws IOException, RoutingException\n    {\n        try\n        {\n            /* Set the local node as already asked */\n            nodes.put(this.localNode.getNode(), ASKED);\n\n            /**\n             * We add all nodes here instead of the K-Closest because there may be the case that the K-Closest are offline\n             * - The operation takes care of looking at the K-Closest.\n             */\n            List<Node> allNodes = this.localNode.getRoutingTable().getAllNodes();\n            this.addNodes(allNodes);\n            \n            /* Also add the initial set of nodes to the routeLengthChecker */\n            this.routeLengthChecker.addInitialNodes(allNodes);\n\n            /**\n             * If we haven't found the requested amount of content as yet,\n             * keey trying until config.operationTimeout() time has expired\n             */\n            int totalTimeWaited = 0;\n            int timeInterval = 10;     // We re-check every n milliseconds\n            while (totalTimeWaited < this.config.operationTimeout())\n            {\n                if (!this.askNodesorFinish() && !isContentFound)\n                {\n                    wait(timeInterval);\n                    totalTimeWaited += timeInterval;\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * Add nodes from this list to the set of nodes to lookup\n     *\n     * @param list The list from which to add nodes\n     */\n    public void addNodes(List<Node> list)\n    {\n        for (Node o : list)\n        {\n            /* If this node is not in the list, add the node */\n            if (!nodes.containsKey(o))\n            {\n                nodes.put(o, UNASKED);\n            }\n        }\n    }\n\n    /**\n     * Asks some of the K closest nodes seen but not yet queried.\n     * Assures that no more than DefaultConfiguration.CONCURRENCY messages are in transit at a time\n     *\n     * This method should be called every time a reply is received or a timeout occurs.\n     *\n     * If all K closest nodes have been asked and there are no messages in transit,\n     * the algorithm is finished.\n     *\n     * @return <code>true</code> if finished OR <code>false</code> otherwise\n     */\n    private boolean askNodesorFinish() throws IOException\n    {\n        /* If >= CONCURRENCY nodes are in transit, don't do anything */\n        if (this.config.maxConcurrentMessagesTransiting() <= this.messagesTransiting.size())\n        {\n            return false;\n        }\n\n        /* Get unqueried nodes among the K closest seen that have not FAILED */\n        List<Node> unasked = this.closestNodesNotFailed(UNASKED);\n\n        if (unasked.isEmpty() && this.messagesTransiting.isEmpty())\n        {\n            /* We have no unasked nodes nor any messages in transit, we're finished! */\n            return true;\n        }\n\n        /* Sort nodes according to criteria */\n        Collections.sort(unasked, this.comparator);\n\n        /**\n         * Send messages to nodes in the list;\n         * making sure than no more than CONCURRENCY messsages are in transit\n         */\n        for (int i = 0; (this.messagesTransiting.size() < this.config.maxConcurrentMessagesTransiting()) && (i < unasked.size()); i++)\n        {\n            Node n = (Node) unasked.get(i);\n\n            int comm = server.sendMessage(n, lookupMessage, this);\n\n            this.nodes.put(n, AWAITING);\n            this.messagesTransiting.put(comm, n);\n        }\n\n        /* We're not finished as yet, return false */\n        return false;\n    }\n\n    /**\n     * Find The K closest nodes to the target lookupId given that have not FAILED.\n     * From those K, get those that have the specified status\n     *\n     * @param status The status of the nodes to return\n     *\n     * @return A List of the closest nodes\n     */\n    private List<Node> closestNodesNotFailed(Byte status)\n    {\n        List<Node> closestNodes = new ArrayList<>(this.config.k());\n        int remainingSpaces = this.config.k();\n\n        for (Map.Entry e : this.nodes.entrySet())\n        {\n            if (!FAILED.equals(e.getValue()))\n            {\n                if (status.equals(e.getValue()))\n                {\n                    /* We got one with the required status, now add it */\n                    closestNodes.add((Node) e.getKey());\n                }\n\n                if (--remainingSpaces == 0)\n                {\n                    break;\n                }\n            }\n        }\n\n        return closestNodes;\n    }\n\n    @Override\n    public synchronized void receive(Message incoming, int comm) throws IOException, RoutingException\n    {\n        if (this.isContentFound)\n        {\n            return;\n        }\n\n        if (incoming instanceof ContentMessage)\n        {\n            /* The reply received is a content message with the required content, take it in */\n            ContentMessage msg = (ContentMessage) incoming;\n\n            /* Add the origin node to our routing table */\n            this.localNode.getRoutingTable().insert(msg.getOrigin());\n\n            /* Get the Content and check if it satisfies the required parameters */\n            JKademliaStorageEntry content = msg.getContent();\n            this.contentFound = content;\n            this.isContentFound = true;\n        }\n        else\n        {\n            /* The reply received is a NodeReplyMessage with nodes closest to the content needed */\n            NodeReplyMessage msg = (NodeReplyMessage) incoming;\n\n            /* Add the origin node to our routing table */\n            Node origin = msg.getOrigin();\n            this.localNode.getRoutingTable().insert(origin);\n\n            /* Set that we've completed ASKing the origin node */\n            this.nodes.put(origin, ASKED);\n\n            /* Remove this msg from messagesTransiting since it's completed now */\n            this.messagesTransiting.remove(comm);\n            \n            /* Add the received nodes to the routeLengthChecker */\n            this.routeLengthChecker.addNodes(msg.getNodes(), origin);\n\n            /* Add the received nodes to our nodes list to query */\n            this.addNodes(msg.getNodes());\n            this.askNodesorFinish();\n        }\n    }\n\n    /**\n     * A node does not respond or a packet was lost, we set this node as failed\n     *\n     * @param comm\n     *\n     * @throws java.io.IOException\n     */\n    @Override\n    public synchronized void timeout(int comm) throws IOException\n    {\n        /* Get the node associated with this communication */\n        Node n = this.messagesTransiting.get(new Integer(comm));\n\n        if (n == null)\n        {\n            throw new UnknownMessageException(\"Unknown comm: \" + comm);\n        }\n\n        /* Mark this node as failed and inform the routing table that it's unresponsive */\n        this.nodes.put(n, FAILED);\n        this.localNode.getRoutingTable().setUnresponsiveContact(n);\n        this.messagesTransiting.remove(comm);\n\n        this.askNodesorFinish();\n    }\n    \n    /**\n     * @return Whether the content was found or not.\n     */\n    public boolean isContentFound()\n    {\n        return this.isContentFound;\n    }\n\n    /**\n     * @return The list of all content found during the lookup operation\n     *\n     * @throws kademlia.exceptions.ContentNotFoundException\n     */\n    public JKademliaStorageEntry getContentFound() throws ContentNotFoundException\n    {\n        if (this.isContentFound)\n        {\n            return this.contentFound;\n        }\n        else\n        {\n            throw new ContentNotFoundException(\"No Value was found for the given key.\");\n        }\n    }\n\n    /**\n     * @return How many hops it took in order to get to the content.\n     */\n    public int routeLength()\n    {\n        return this.routeLengthChecker.getRouteLength();\n    }\n}\nsrc/kademlia/node/Node.java\npublic class Node implements Streamable, Serializable\n{\n\n    private KademliaId nodeId;\n    private InetAddress inetAddress;\n    private int port;\n    private final String strRep;\n\n    public Node(KademliaId nid, InetAddress ip, int port)\n    {\n        this.nodeId = nid;\n        this.inetAddress = ip;\n        this.port = port;\n        this.strRep = this.nodeId.toString();\n    }\n\n    /**\n     * Load the Node's data from a DataInput stream\n     *\n     * @param in\n     *\n     * @throws IOException\n     */\n    public Node(DataInputStream in) throws IOException\n    {\n        this.fromStream(in);\n        this.strRep = this.nodeId.toString();\n    }\n\n    /**\n     * Set the InetAddress of this node\n     *\n     * @param addr The new InetAddress of this node\n     */\n    public void setInetAddress(InetAddress addr)\n    {\n        this.inetAddress = addr;\n    }\n\n    /**\n     * @return The NodeId object of this node\n     */\n    public KademliaId getNodeId()\n    {\n        return this.nodeId;\n    }\n\n    /**\n     * Creates a SocketAddress for this node\n     *\n     * @return\n     */\n    public InetSocketAddress getSocketAddress()\n    {\n        return new InetSocketAddress(this.inetAddress, this.port);\n    }\n\n    @Override\n    public void toStream(DataOutputStream out) throws IOException\n    {\n        /* Add the NodeId to the stream */\n        this.nodeId.toStream(out);\n\n        /* Add the Node's IP address to the stream */\n        byte[] a = inetAddress.getAddress();\n        if (a.length != 4)\n        {\n            throw new RuntimeException(\"Expected InetAddress of 4 bytes, got \" + a.length);\n        }\n        out.write(a);\n\n        /* Add the port to the stream */\n        out.writeInt(port);\n    }\n\n    @Override\n    public final void fromStream(DataInputStream in) throws IOException\n    {\n        /* Load the NodeId */\n        this.nodeId = new KademliaId(in);\n\n        /* Load the IP Address */\n        byte[] ip = new byte[4];\n        in.readFully(ip);\n        this.inetAddress = InetAddress.getByAddress(ip);\n\n        /* Read in the port */\n        this.port = in.readInt();\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (o instanceof Node)\n        {\n            Node n = (Node) o;\n            if (n == this)\n            {\n                return true;\n            }\n            return this.getNodeId().equals(n.getNodeId());\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode()\n    {\n        return this.getNodeId().hashCode();\n    }\n\n    @Override\n    public String toString()\n    {\n        return this.getNodeId().toString();\n    }\n}\n", "answers": ["    private transient KademliaRoutingTable routingTable;"], "length": 6425, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "03b9c503110e4dc8f2d7690f56be9e9b2733744da1a855ff"}
{"input": "import android.app.Activity;\nimport android.graphics.BitmapFactory;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.SubMenu;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Toast;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.protyposis.android.spectaculum.SpectaculumView;\nimport net.protyposis.android.spectaculum.effects.Parameter;\nimport net.protyposis.android.spectaculum.effects.ImmersiveSensorNavigation;\nimport net.protyposis.android.spectaculum.effects.ContrastBrightnessAdjustmentEffect;\nimport net.protyposis.android.spectaculum.effects.EffectException;\nimport net.protyposis.android.spectaculum.effects.FlowAbsSubEffect;\nimport net.protyposis.android.spectaculum.effects.QrMarkerEffect;\nimport net.protyposis.android.spectaculum.effects.Effect;\nimport net.protyposis.android.spectaculum.effects.FlipEffect;\nimport net.protyposis.android.spectaculum.effects.FlowAbsEffect;\nimport net.protyposis.android.spectaculum.effects.KernelBlurEffect;\nimport net.protyposis.android.spectaculum.effects.KernelEdgeDetectEffect;\nimport net.protyposis.android.spectaculum.effects.KernelEmbossEffect;\nimport net.protyposis.android.spectaculum.effects.KernelGaussBlurEffect;\nimport net.protyposis.android.spectaculum.effects.KernelSharpenEffect;\nimport net.protyposis.android.spectaculum.effects.NoEffect;\nimport net.protyposis.android.spectaculum.effects.SimpleToonEffect;\nimport net.protyposis.android.spectaculum.effects.SobelEffect;\nimport net.protyposis.android.spectaculum.effects.ImmersiveTouchNavigation;\nimport net.protyposis.android.spectaculum.effects.StackEffect;\nimport net.protyposis.android.spectaculum.effects.WatermarkEffect;\nimport net.protyposis.android.spectaculum.gles.GLUtils;\nimport net.protyposis.android.spectaculum.effects.ColorFilterEffect;\nimport net.protyposis.android.spectaculum.effects.ImmersiveEffect;\nimport net.protyposis.android.spectaculumdemo.testeffect.InterlaceEffect;\n/*\n * Copyright 2014 Mario Guggenberger <mg@protyposis.net>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.protyposis.android.spectaculumdemo;\n\n\n\n\n/**\n * Created by Mario on 18.07.2014.\n *\n * Helper class for easy effect handling in the various Spectaculum views in this demo.\n * Provides a list of effects for the actionbar and displays a parameter control panel for\n * selected effects with parameters that the demo user can player play with.\n */\npublic class EffectManager implements SpectaculumView.EffectEventListener, Effect.Listener {\n\n    private Activity mActivity;\n    private ViewGroup mParameterListView;\n    private EffectParameterListAdapter mParameterListAdapter;\n    private MenuItem mParameterToggleMenuItem;\n    private SpectaculumView mSpectaculumView;\n    private List<Effect> mEffects;\n    private Effect mSelectedEffect;\n    private ImmersiveSensorNavigation mImmersiveSensorNavigation;\n    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n\n    public EffectManager(Activity activity, int parameterListViewId, SpectaculumView glView) {\n        mActivity = activity;\n        mParameterListView = (ViewGroup) activity.findViewById(parameterListViewId);\n        mSpectaculumView = glView;\n        mEffects = new ArrayList<>();\n        mSpectaculumView.setEffectEventListener(this);\n\n        // Spectaculum-Core filters", "context": "Spectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveTouchNavigation.java\npublic class ImmersiveTouchNavigation {\n\n    private static final String TAG = ImmersiveTouchNavigation.class.getSimpleName();\n\n    private SpectaculumView mSpectaculumView;\n    private boolean mSpectaculumViewTouchEnabled;\n    private GestureDetector mGestureDetector;\n    private float mPanX;\n    private float mPanY;\n    private ImmersiveEffect mEffect;\n    private BooleanParameter mParameter;\n    private boolean mActive;\n    private float[] mRotationMatrix = new float[16];\n\n    /**\n     * Creates a touch navigation instance for the supplied view widget.\n     * @param spectaculumView the view widget where the touch gestures should be read from\n     */\n    public ImmersiveTouchNavigation(SpectaculumView spectaculumView) {\n        mSpectaculumView = spectaculumView;\n\n        mGestureDetector = new GestureDetector(mSpectaculumView.getContext(), mOnGestureListener);\n\n        // Make a UI handler for activation state toggling\n        final Handler h = new Handler();\n\n        // Create an effect parameter to toggle the touch navigation on/off\n        mParameter = new BooleanParameter(\"TouchNav\", false, new BooleanParameter.Delegate() {\n            @Override\n            public void setValue(final Boolean value) {\n                // Activate/deactivate on UI thread\n                // Parameters are usually set on the GL thread, so we need to transfer this back to the UI thread\n                h.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        mActive = value;\n                        if(mActive) {\n                            activate();\n                        } else {\n                            deactivate();\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Attaches to the effect and adds parameter to toggle touch navigation on/off.\n     * @param effect the effect to attach touch navigation to\n     * @throws RuntimeException thrown if there is already an effect attached\n     */\n    public void attachTo(ImmersiveEffect effect) throws RuntimeException {\n        if(mEffect != null) {\n            throw new RuntimeException(\"Previous effect is still attached, call detach() first\");\n        }\n        mEffect = effect;\n        mEffect.addParameter(mParameter);\n    }\n\n    /**\n     * Detaches touch navigation from the effect it is attached to and removes the toggle parameter.\n     */\n    public void detach() {\n        mEffect.removeParameter(mParameter);\n        mEffect = null;\n    }\n\n    /**\n     * Activates touch navigation.\n     */\n    public void activate() {\n        mSpectaculumView.setOnTouchListener(mOnTouchListener);\n\n        // Store touch enabled state and enable touch which is required for this to work\n        mSpectaculumViewTouchEnabled = mSpectaculumView.isTouchEnabled();\n        mSpectaculumView.setTouchEnabled(true);\n\n        mActive = true;\n    }\n\n    /**\n     * Deactivates touch navigation.\n     */\n    public void deactivate() {\n        mSpectaculumView.setOnTouchListener(null);\n        mSpectaculumView.setTouchEnabled(mSpectaculumViewTouchEnabled);\n        mActive = false;\n    }\n\n    private void setRotation(float x, float y) {\n        // Set rotation matrix\n        GLUtils.Matrix.setRotateEulerM(mRotationMatrix, 0, x, y, 0);\n\n        // Update effect and thus the viewport too\n        mEffect.setRotationMatrix(mRotationMatrix);\n    }\n\n    private View.OnTouchListener mOnTouchListener = new View.OnTouchListener() {\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            return mActive && mGestureDetector.onTouchEvent(event);\n        }\n    };\n\n    private GestureDetector.SimpleOnGestureListener mOnGestureListener = new GestureDetector.SimpleOnGestureListener() {\n\n        @Override\n        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n            // Scale the scroll/panning distance to rotation degrees\n            // The view's with and height are mapped to 180 degree each\n            // TODO map motion event positions from view to the rendered sphere and derive rotation\n            //      angles to keep touchscreen positions and sphere positions in sync\n            mPanX += distanceX / mSpectaculumView.getWidth() * 180f;\n            mPanY += distanceY / mSpectaculumView.getHeight() * 180f;\n\n            // Clamp horizontal rotation to avoid rotations beyond 90 degree which inverts the vertical\n            // rotation and makes rotation handling more complicated\n            mPanY = LibraryHelper.clamp(mPanY, -90, 90);\n\n            // Apply the panning to the viewport\n            // Horizontal panning along the view's X axis translates to a rotation around the viewport's Y axis\n            // Vertical panning along the view's Y axis translates to a rotation around the viewport's X axis\n            setRotation(-mPanY, -mPanX);\n            return true;\n        }\n\n        @Override\n        public boolean onDoubleTap(MotionEvent e) {\n            // Reset rotation/viewport to initial value\n            mPanX = 0;\n            mPanY = 0;\n            setRotation(0, 0);\n            return true;\n        }\n    };\n}\nSpectaculum-Demo/src/main/java/net/protyposis/android/spectaculumdemo/testeffect/InterlaceEffect.java\npublic class InterlaceEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final InterlaceShaderProgram shaderProgram = new InterlaceShaderProgram();\n\n        addParameter(new FloatParameter(\"Opacity\", 0f, 1f, 0.5f, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                shaderProgram.setOpacity(value);\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"Distance\", 1, 10, 5, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                shaderProgram.setDistance(value);\n            }\n        }));\n\n        return shaderProgram;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/Parameter.java\npublic interface Parameter<T> {\n\n    interface Delegate<T> {\n        void setValue(T value);\n    }\n\n    /**\n     * Callback interface for parameter events.\n     */\n    interface Listener {\n        /**\n         * Gets called when the value of a parameter has changed.\n         * @param parameter the parameter whose value has changed\n         */\n        void onParameterChanged(Parameter parameter);\n    }\n\n    /**\n     * Gets the name of the parameter.\n     */\n    String getName();\n\n    /**\n     * Gets the description of the parameter. Returns null if no description has been set.\n     */\n    String getDescription();\n\n    /**\n     * Resets the parameter to its default value.\n     */\n    void reset();\n\n    /**\n     * Sets an event listener to listen for parameter value change events.\n     * @see Listener#onParameterChanged(Parameter)\n     * @param listener the listener to notify of events\n     * @deprecated Will be removed in next major version, use {@link #addListener} instead\n     */\n    void setListener(Listener listener);\n\n    /**\n     * Adds an event listener to listen for parameter value change events.\n     * @see Listener#onParameterChanged(Parameter)\n     * @param listener the listener to notify of events\n     */\n    void addListener(Listener listener);\n\n    /**\n     * Removes an event listener added with {@link #addListener}.\n     * @param listener the listener to remove\n     */\n    void removeListener(Listener listener);\n\n    /**\n     * Sets a ParameterHandler on which parameter value changes will be executed. Parameter values\n     * need to be set on the GL thread where the effect that the parameter belongs is active, and\n     * this handler can be used to hand the parameter setting over to the GL thread.\n     * If no handler is set, parameters will be set on the caller thread.\n     * @param handler the parameter handler to set, or null to unset\n     */\n    void setHandler(ParameterHandler handler);\n}\nSpectaculum-Effect-QrMarker/src/main/java/net/protyposis/android/spectaculum/effects/QrMarkerEffect.java\npublic class QrMarkerEffect extends BaseEffect {\n\n    private GaussShaderProgram mGaussShader;\n    private GradientShaderProgram mGradientShader;\n    private CannyShaderProgram mCannyShader;\n    private QrResponseShaderProgram mQrResponseShader;\n    private ConsenseShaderProgram mConsensusShader;\n\n    private Framebuffer mFramebuffer1;\n    private Framebuffer mFramebuffer2;\n\n    private TexturedRectangle mTexturedRectangle;\n\n    private CannyEdgeEffect mCannyEdgeEffect;\n\n    public QrMarkerEffect() {\n        mCannyEdgeEffect = new CannyEdgeEffect();\n    }\n\n    @Override\n    public void init(int width, int height) {\n        // PART OF THE UGLY HACK described in setTextureSizeHack\n        // Cannot call it on base class QrMarkerShaderProgram because it is hidden outside its package\n        GaussShaderProgram.setTextureSizeHack(width, height);\n\n        mGaussShader = new GaussShaderProgram();\n        mGaussShader.setTextureSize(width, height);\n\n        mGradientShader = new GradientShaderProgram();\n        mGradientShader.setTextureSize(width, height);\n\n        mCannyShader = new CannyShaderProgram();\n        mCannyShader.setTextureSize(width, height);\n\n        mQrResponseShader = new QrResponseShaderProgram();\n        mQrResponseShader.setTextureSize(width, height);\n\n        mConsensusShader = new ConsenseShaderProgram();\n        mConsensusShader.setTextureSize(width, height);\n\n        mFramebuffer1 = new Framebuffer(width, height);\n        mFramebuffer2 = new Framebuffer(width, height);\n\n        mTexturedRectangle = new TexturedRectangle();\n        mTexturedRectangle.reset();\n\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        applyCannyEdge(source, mFramebuffer1);\n\n        mFramebuffer2.bind();\n        mQrResponseShader.use();\n        mQrResponseShader.setTexture(mFramebuffer1.getTexture());\n        mTexturedRectangle.draw(mQrResponseShader);\n\n        target.bind();\n        mConsensusShader.use();\n        mConsensusShader.setTexture(mFramebuffer2.getTexture());\n        mTexturedRectangle.draw(mConsensusShader);\n    }\n\n    private void applyCannyEdge(Texture2D source, Framebuffer target) {\n        mFramebuffer1.bind();\n        mGaussShader.use();\n        mGaussShader.setTexture(source);\n        mTexturedRectangle.draw(mGaussShader);\n\n        mFramebuffer2.bind();\n        mGradientShader.use();\n        mGradientShader.setTexture(mFramebuffer1.getTexture());\n        mTexturedRectangle.draw(mGradientShader);\n\n        target.bind();\n        mCannyShader.use();\n        mCannyShader.setTexture(mFramebuffer2.getTexture());\n        mTexturedRectangle.draw(mCannyShader);\n    }\n\n    public CannyEdgeEffect getCannyEdgeEffect() {\n        return mCannyEdgeEffect;\n    }\n\n    /**\n     * The CannyEdge Effect is a subeffect of the QrMarker Effect, it is therefore more efficient\n     * to share the resources and reuse a common cannyedge subroutine than to instantiate it as\n     * a separate effect. If one of the two effects is needed, the other comes with it for free.\n     */\n    public class CannyEdgeEffect extends BaseEffect {\n\n        @Override\n        public void init(int width, int height) {\n            if(!QrMarkerEffect.this.isInitialized()) {\n                QrMarkerEffect.this.init(width, height);\n            }\n        }\n\n        @Override\n        public void apply(Texture2D source, Framebuffer target) {\n            applyCannyEdge(source, target);\n        }\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/SobelEffect.java\npublic class SobelEffect extends ShaderEffect {\n\n    private float mLow, mHigh;\n    private float mR, mG, mB;\n\n    public SobelEffect() {\n        super(\"Sobel Edge Detect\");\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final TextureSobelShaderProgram sobelShader = new TextureSobelShaderProgram();\n\n        mLow = 0.3f;\n        mHigh = 0.8f;\n        mR = 0.0f;\n        mG = 1.0f;\n        mB = 0.0f;\n\n        addParameter(new FloatParameter(\"Low\", 0.0f, 1.0f, mLow, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mLow = value;\n                sobelShader.setThreshold(mLow, mHigh);\n            }\n        }));\n        addParameter(new FloatParameter(\"High\", 0.0f, 1.0f, mHigh, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mHigh = value;\n                sobelShader.setThreshold(mLow, mHigh);\n            }\n        }));\n        addParameter(new FloatParameter(\"Red\", 0.0f, 1.0f, mR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mR = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n        addParameter(new FloatParameter(\"Green\", 0.0f, 1.0f, mG, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mG = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n        addParameter(new FloatParameter(\"Blue\", 0.0f, 1.0f, mB, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mB = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n\n        return sobelShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/NoEffect.java\npublic class NoEffect extends ShaderEffect {\n\n    public NoEffect() {\n        super(\"None\");\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureShaderProgram();\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelEmbossEffect.java\npublic class KernelEmbossEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.EMBOSS);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/gles/GLUtils.java\npublic class GLUtils {\n\n    private static final String TAG = GLUtils.class.getSimpleName();\n\n    public static boolean HAS_GLES30;\n    public static boolean HAS_GL_OES_texture_half_float;\n    public static boolean HAS_GL_OES_texture_float;\n    public static boolean HAS_FLOAT_FRAMEBUFFER_SUPPORT;\n    public static boolean HAS_GPU_TEGRA;\n\n    /**\n     * Sets the static feature flags. Needs to be called from a GLES context.\n     */\n    public static void init() {\n        HAS_GLES30 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;\n        HAS_GL_OES_texture_half_float = checkExtension(\"GL_OES_texture_half_float\");\n        HAS_GL_OES_texture_float = checkExtension(\"GL_OES_texture_float\");\n        HAS_GPU_TEGRA = GLES20.glGetString(GLES20.GL_RENDERER).toLowerCase().contains(\"tegra\");\n\n        /* Try to create a framebuffer with an attached floating point texture. If this fails,\n         * the device does not support floating point FB attachments and needs to fall back to\n         * byte textures ... and possibly deactivate features that demand FP textures.\n         */\n        if(HAS_GL_OES_texture_half_float || HAS_GL_OES_texture_float) {\n            try {\n                // must be set to true before the check, otherwise the fallback kicks in\n                HAS_FLOAT_FRAMEBUFFER_SUPPORT = true;\n                new Framebuffer(8, 8);\n            } catch (RuntimeException e) {\n                Log.w(TAG, \"float framebuffer test failed\");\n                HAS_FLOAT_FRAMEBUFFER_SUPPORT = false;\n                GLUtils.clearError();\n            }\n        }\n    }\n\n    /**\n     * Checks if the system supports OpenGL ES 2.0.\n     */\n    public static boolean isGlEs2Supported(Context context) {\n        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n        ConfigurationInfo configurationInfo = activityManager.getDeviceConfigurationInfo();\n        return configurationInfo != null && configurationInfo.reqGlEsVersion >= 0x20000;\n    }\n\n    private static void checkError(String operation, boolean throwException) {\n        int errorCount = 0;\n        int error;\n        String msg = null;\n\n        while((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {\n            msg = \"GL ERROR \" + String.format(\"0x%X\", error) + \" @ \" + operation;\n            Log.e(TAG, msg);\n            errorCount++;\n        }\n\n        if(throwException && errorCount > 0) {\n            throw new RuntimeException(msg);\n        }\n    }\n\n    public static void checkError(String operation) {\n        checkError(operation, true);\n    }\n\n    public static void clearError() {\n        checkError(\"error clearance\", false);\n    }\n\n    public static String[] getExtensions() {\n        String extensionsString = GLES20.glGetString(GLES20.GL_EXTENSIONS);\n        if(extensionsString != null) {\n            return extensionsString.split(\" \");\n        }\n        return new String[0];\n    }\n\n    /**\n     * Checks if an extension is supported.\n     */\n    public static boolean checkExtension(String query) {\n        for(String ext : getExtensions()) {\n            if(ext.equals(query)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void printSysConfig() {\n        for(String ext : GLUtils.getExtensions()) {\n            Log.d(TAG, ext);\n        }\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_VENDOR));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_RENDERER));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_VERSION));\n    }\n\n    public static Bitmap getFrameBuffer(int width, int height) {\n        // read pixels from GLES context\n        long startTime = SystemClock.elapsedRealtime();\n        ByteBuffer buffer = ByteBuffer.allocateDirect(width * height * 4).order(ByteOrder.LITTLE_ENDIAN);\n        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buffer);\n        GLUtils.checkError(\"glReadPixels\");\n        buffer.rewind();\n        Log.d(TAG, \"glReadPixels \" + (SystemClock.elapsedRealtime() - startTime) + \"ms\");\n\n        // transfer pixels to bitmap\n        Bitmap bmp1 = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        bmp1.copyPixelsFromBuffer(buffer);\n\n        // horizontally flip bitmap to make it upright, since GL origin is at bottom left\n        android.graphics.Matrix matrix = new android.graphics.Matrix();\n        matrix.setRotate(180);\n        matrix.postScale(-1, 1);\n        Bitmap bmp2 = Bitmap.createBitmap(bmp1, 0, 0, bmp1.getWidth(), bmp1.getHeight(), matrix, true);\n        bmp1.recycle();\n        Log.d(TAG, \"glReadPixels+rotate \" + (SystemClock.elapsedRealtime() - startTime) + \"ms\");\n\n        return bmp2;\n    }\n\n    public static boolean saveBitmapToFile(Bitmap bmp, File file) {\n        try {\n            BufferedOutputStream bos = null;\n            try {\n                bos = new BufferedOutputStream(new FileOutputStream(file));\n\n                // compress to file\n                bmp.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            } finally {\n                if (bos != null) bos.close();\n            }\n            return true;\n        } catch (IOException e) {\n            Log.e(TAG, \"failed to save frame\", e);\n        }\n        return false;\n    }\n\n    public static void saveFramebufferToFile(int width, int height, File file) {\n        Bitmap bmp = getFrameBuffer(width, height);\n        if(saveBitmapToFile(bmp, file)) {\n            Log.d(TAG, \"frame saved to \" + file.getName());\n        }\n        bmp.recycle();\n    }\n\n    public static class Matrix {\n        /**\n         * Android's {@link android.opengl.Matrix#setRotateEulerM(float[], int, float, float, float)}\n         * is broken and returns an invalid matrix when rotating around the Y axis.\n         *\n         * See comment #3 in https://code.google.com/p/android/issues/detail?id=12964 for fix\n         * @see android.opengl.Matrix#setRotateEulerM(float[], int, float, float, float)\n         */\n        public static void setRotateEulerM(float[] rm, int rmOffset, float x, float y, float z) {\n            x = x * 0.01745329f;\n            y = y * 0.01745329f;\n            z = z * 0.01745329f;\n            float sx = (float) Math.sin(x);\n            float sy = (float) Math.sin(y);\n            float sz = (float) Math.sin(z);\n            float cx = (float) Math.cos(x);\n            float cy = (float) Math.cos(y);\n            float cz = (float) Math.cos(z);\n            float cxsy = cx * sy;\n            float sxsy = sx * sy;\n\n            rm[rmOffset + 0] = cy * cz;\n            rm[rmOffset + 1] = -cy * sz;\n            rm[rmOffset + 2] = sy;\n            rm[rmOffset + 3] = 0.0f;\n\n            rm[rmOffset + 4] = sxsy * cz + cx * sz;\n            rm[rmOffset + 5] = -sxsy * sz + cx * cz;\n            rm[rmOffset + 6] = -sx * cy;\n            rm[rmOffset + 7] = 0.0f;\n\n            rm[rmOffset + 8] = -cxsy * cz + sx * sz;\n            rm[rmOffset + 9] = cxsy * sz + sx * cz;\n            rm[rmOffset + 10] = cx * cy;\n            rm[rmOffset + 11] = 0.0f;\n\n            rm[rmOffset + 12] = 0.0f;\n            rm[rmOffset + 13] = 0.0f;\n            rm[rmOffset + 14] = 0.0f;\n            rm[rmOffset + 15] = 1.0f;\n        }\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelEdgeDetectEffect.java\npublic class KernelEdgeDetectEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.EDGE_DETECT);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelSharpenEffect.java\npublic class KernelSharpenEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.SHARPEN);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/ColorFilterEffect.java\npublic class ColorFilterEffect extends ShaderEffect {\n\n    private float mR, mG, mB, mA;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final ColorFilterShaderProgram colorFilterShader = new ColorFilterShaderProgram();\n\n        mR = 1.0f;\n        mG = 0.0f;\n        mB = 0.0f;\n        mA = 1.0f;\n\n        addParameter(new FloatParameter(\"Red\", 0.0f, 1.0f, mR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mR = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Green\", 0.0f, 1.0f, mG, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mG = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Blue\", 0.0f, 1.0f, mB, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mB = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Alpha\", 0.0f, 1.0f, mA, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mA = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n\n        return colorFilterShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/StackEffect.java\npublic class StackEffect extends BaseEffect {\n\n    private List<Effect> mEffects;\n    private Framebuffer mFramebuffer;\n\n    public StackEffect(String name) {\n        super(name);\n        mEffects = new ArrayList<>();\n    }\n\n    public StackEffect(String name, Effect... effects) {\n        this(name);\n        addEffects(effects);\n    }\n\n    public StackEffect() {\n        this((String)null);\n    }\n\n    public StackEffect(Effect... effects) {\n        this(null, effects);\n    }\n\n    public void addEffects(Effect... effects) {\n        Collections.addAll(mEffects, effects);\n    }\n\n    @Override\n    public void init(int width, int height) {\n        // Create an internal framebuffer which is required to apply a sequence of effects\n        mFramebuffer = new Framebuffer(width, height);\n\n        setEventBlocking(true);\n\n        // Initialize all effects\n        for (Effect e : mEffects) {\n            e.init(width, height);\n\n            // Add effect parameters\n            for(Parameter p : e.getParameters()) {\n                addParameter(p);\n            }\n        }\n\n        setEventBlocking(false);\n\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        Iterator<Effect> i = mEffects.iterator();\n\n        /*\n         * The first source texture must always be the passed in texture, the last output framebuffer\n         * must always be the passed in target framebuffer. In between, we need to switch source\n         * textures and target framebuffers between the passed in external framebuffer and the internal\n         * framebuffer, because we cannot read and write to the same framebuffer in one render pass.\n         * If the number of effects is even, we start by writing the internal framebuffer, else we\n         * start with the external framebuffer.\n         */\n        Framebuffer internalFB = mFramebuffer;\n        Framebuffer externalFB = target;\n        boolean useInternalFB = mEffects.size() % 2 == 0; // keeps track of which framebuffer to use as target\n\n        while(i.hasNext()) {\n            Effect e = i.next();\n\n            if(i.hasNext()) {\n                e.apply(source, useInternalFB ? internalFB : externalFB);\n                source = useInternalFB ? internalFB.getTexture() : externalFB.getTexture();\n                useInternalFB = !useInternalFB; // switch framebuffer flag\n            } else {\n                // Last effect; always write result to the target framebuffer\n                e.apply(source, target);\n            }\n        }\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/SimpleToonEffect.java\npublic class SimpleToonEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureToonShaderProgram();\n    }\n}\nSpectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveEffect.java\npublic class ImmersiveEffect extends ShaderEffect {\n\n    /**\n     * Image source render mode.\n     */\n    public enum Mode {\n        /**\n         * Monoscopic rendering of mono sources.\n         */\n        MONO,\n\n        /**\n         * Stereoscopic rendering of side-by-side (SBS) sources, where two pictures are packed\n         * horizontally in the image source.\n         */\n        STEREO_SBS,\n\n        /**\n         * Stereoscopic rendering of top-and-bottom (TAB) sources, where two pictures are packed\n         * vertically in the image source.\n         */\n        STEREO_TAB,\n    }\n\n    private EquirectangularSphereShaderProgram mShaderProgram;\n    private float mRotX, mRotY, mRotZ;\n    private float[] mRotationMatrix = new float[16];\n    private Mode mMode;\n\n    private FloatParameter mParameterRotX, mParameterRotY, mParameterRotZ;\n    private EnumParameter<Mode> mParameterMode;\n\n    public ImmersiveEffect() {\n        mRotX = 0.0f;\n        mRotY = 0.0f;\n        mRotZ = 0.0f;\n        Matrix.setIdentityM(mRotationMatrix, 0);\n        mMode = Mode.MONO;\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        mShaderProgram = new EquirectangularSphereShaderProgram();\n\n        mParameterRotX = new FloatParameter(\"RotX\", -360.0f, 360.0f, mRotX, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotX = value;\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the X-axis in degrees\");\n        mParameterRotY = new FloatParameter(\"RotY\", -360.0f, 360.0f, mRotY, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotY = -value; // invert to rotate to the right with a positive value\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the Y-axis in degrees\");\n        mParameterRotZ = new FloatParameter(\"RotZ\", -360.0f, 360.0f, mRotZ, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotZ = value;\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the Z-axis in degrees\");\n        mParameterMode = new EnumParameter<>(\"Mode\", Mode.class, mMode, new EnumParameter.Delegate<Mode>() {\n            @Override\n            public void setValue(Mode value) {\n                mMode = value;\n                mShaderProgram.setMode(mMode.ordinal());\n            }\n        }, \"Sets the render mode\");\n\n        addParameter(mParameterRotX);\n        addParameter(mParameterRotY);\n        addParameter(mParameterRotZ);\n        addParameter(mParameterMode);\n\n        return mShaderProgram;\n    }\n\n    private void updateRotationMatrix() {\n        GLUtils.Matrix.setRotateEulerM(mRotationMatrix, 0, mRotX, mRotY, mRotZ);\n        mShaderProgram.setRotationMatrix(mRotationMatrix);\n    }\n\n    /**\n     * Sets the rotation matrix directly without going through the 3 parameters and provoking\n     * lots of function calls (rotation matrix can be updated very frequently).\n     * @param R a 4x4 rotation matrix\n     */\n    public void setRotationMatrix(float[] R) {\n        if(R.length < 16) {\n            throw new RuntimeException(\"4x4 matrix expected\");\n        }\n\n        // Take a copy of the matrix into the local variable\n        System.arraycopy(R, 0, mRotationMatrix, 0, 16);\n\n        if(isInitialized()) {\n            // Update the shader rotation matrix on the correct thread\n            getParameterHandler().post(mRotationMatrixUpdateRunnable);\n\n            // Fire event to trigger a view update\n            fireEffectChanged();\n        }\n    }\n\n    /**\n     * Gets the rotation matrix. The rotation matrix will be written into the supplied\n     * parameter.\n     * @param R a 4x4 output matrix\n     */\n    public void getRotationMatrix(float[] R) {\n        if(R.length < 16) {\n            throw new RuntimeException(\"4x4 matrix expected\");\n        }\n\n        // Copy the local matrix into the output matrix\n        System.arraycopy(mRotationMatrix, 0, R, 0, 16);\n    }\n\n    /**\n     * Sets the rotation along the Y-axis.\n     * @param rotX rotation in degrees\n     */\n    public void setRotationX(float rotX) {\n        if(isInitialized()) {\n            mParameterRotX.setValue(rotX);\n        } else {\n            mRotX = rotX;\n        }\n    }\n\n    /**\n     * Sets the rotation along the Y-axis.\n     * @param rotY rotation in degrees\n     */\n    public void setRotationY(float rotY) {\n        if(isInitialized()) {\n            mParameterRotY.setValue(rotY);\n        } else {\n            mRotX = rotY;\n        }\n    }\n\n    /**\n     * Sets the rotation along the Z-axis.\n     * @param rotZ rotation in degrees\n     */\n    public void setRotationZ(float rotZ) {\n        if(isInitialized()) {\n            mParameterRotZ.setValue(rotZ);\n        } else {\n            mRotX = rotZ;\n        }\n    }\n\n    /**\n     * Sets the content render mode. Should be set to match the image source.\n     * @param mode the image source render mode\n     */\n    public void setMode(Mode mode) {\n        if(isInitialized()) {\n            mParameterMode.setValue(mode);\n        } else {\n            mMode = mode;\n        }\n    }\n\n    private Runnable mRotationMatrixUpdateRunnable = new Runnable() {\n        @Override\n        public void run() {\n            mShaderProgram.setRotationMatrix(mRotationMatrix);\n        }\n    };\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/FlipEffect.java\npublic class FlipEffect extends ShaderEffect {\n\n    public enum Mode {\n        NONE,\n        VERTICAL,\n        HORIZONTAL,\n        BOTH\n    }\n\n    private Mode mMode;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final TextureFlipShaderProgram flipShader = new TextureFlipShaderProgram();\n        mMode = Mode.VERTICAL;\n\n        addParameter(new EnumParameter<>(\"Mode\", Mode.class, mMode, new EnumParameter.Delegate<Mode>() {\n            @Override\n            public void setValue(Mode value) {\n                mMode = value;\n                flipShader.setMode(mMode.ordinal());\n            }\n        }));\n\n        return flipShader;\n    }\n}\nSpectaculum-Effect-FlowAbs/src/main/java/net/protyposis/android/spectaculum/effects/FlowAbsSubEffect.java\npublic abstract class FlowAbsSubEffect extends BaseEffect {\n\n    protected FlowAbsEffect mFlowAbsEffect;\n\n    FlowAbsSubEffect(String name) {\n        super(name);\n    }\n\n    FlowAbsSubEffect() {\n    }\n\n    @Override\n    public void init(int width, int height) {\n        if(!mFlowAbsEffect.isInitialized()) {\n            mFlowAbsEffect.init(width, height);\n        }\n    }\n\n    FlowAbsSubEffect init(FlowAbsEffect flowAbsEffect) {\n        mFlowAbsEffect = flowAbsEffect;\n        return this;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/ContrastBrightnessAdjustmentEffect.java\npublic class ContrastBrightnessAdjustmentEffect extends ShaderEffect {\n\n    private float mContrast;\n    private float mBrightness;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final ContrastBrightnessAdjustmentShaderProgram adjustmentsShader = new ContrastBrightnessAdjustmentShaderProgram();\n\n        mContrast = 1.0f;\n        mBrightness = 1.0f;\n\n        addParameter(new FloatParameter(\"Contrast\", 0.0f, 5.0f, mContrast, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mContrast = value;\n                adjustmentsShader.setContrast(mContrast);\n            }\n        }));\n        addParameter(new FloatParameter(\"Brightness\", 0.0f, 5.0f, mBrightness, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBrightness = value;\n                adjustmentsShader.setBrightness(mBrightness);\n            }\n        }));\n\n        return adjustmentsShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/EffectException.java\npublic class EffectException extends Exception {\n    public EffectException() {\n    }\n\n    public EffectException(String detailMessage) {\n        super(detailMessage);\n    }\n\n    public EffectException(String detailMessage, Throwable throwable) {\n        super(detailMessage, throwable);\n    }\n\n    public EffectException(Throwable throwable) {\n        super(throwable);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelBlurEffect.java\npublic class KernelBlurEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.BLUR);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/Effect.java\npublic interface Effect {\n\n    /**\n     * Callback interface for effect events.\n     */\n    interface Listener {\n        /**\n         * Gets called when a parameter of the effect has changed.\n         * @param effect the effect whose parameter has changed\n         */\n        void onEffectChanged(Effect effect);\n\n        /**\n         * Gets called when a parameter is added to an effect.\n         * @param effect the effect to which the parameter was added\n         * @param parameter the added parameter\n         */\n        void onParameterAdded(Effect effect, Parameter parameter);\n\n        /**\n         * Gets called when a parameter is removed from an effect.\n         * @param effect the effect from which the parameter was removed\n         * @param parameter the removed parameter\n         */\n        void onParameterRemoved(Effect effect, Parameter parameter);\n    }\n\n    /**\n     * Gets the name of the effect.\n     * @return the name of the effect\n     */\n    String getName();\n\n    /**\n     * Initializes the effect by loading all required resources (shaders, framebuffers, textures,\n     * subeffects, ...) and preparing it for usage. The resolution of the render pipeline respectively\n     * the texture resolution for internal processing must be supplied.\n     * @param width the texture width\n     * @param height the texture height\n     */\n    void init(int width, int height);\n\n    /**\n     * Returns the initialization status of the effect.\n     * @return true if the effect is initialized and ready to use, else false\n     */\n    boolean isInitialized();\n\n    /**\n     * Applies the effect to a source texture and writes it to the target framebuffer. The source\n     * texture is the input image data that the effect is applied to, and the target can be an\n     * intermediate framebuffer (for chaining to another effect) or the screen for direct output.\n     * @param source the source texture where the input image is read from\n     * @param target the target framebuffer where the result with the applied effect is written to\n     */\n    void apply(Texture2D source, Framebuffer target);\n\n    /**\n     * Sets a parameter handler for the parameters of this effect. The parameter handler takes\n     * care that the parameter values are set on the correct thread (i.e. the GL thread).\n     * Setting the handler on the effect makes sure that it is automatically set on its parameters.\n     * @see Parameter#setHandler(ParameterHandler)\n     * @param handler a handler to set, or null to unset\n     */\n    void setParameterHandler(ParameterHandler handler);\n\n    /**\n     * Adds a parameter to the effect. Parameters can be used to parameterize parameters of the effect :)\n     * Triggers {@link Listener#onParameterAdded(Effect, Parameter)} on an attached listener.\n     * @see Parameter\n     * @param parameter the parameter to add\n     */\n    void addParameter(Parameter parameter);\n\n    /**\n     * Removes a parameter from the effect.\n     * Triggers {@link Listener#onParameterRemoved(Effect, Parameter)} on an attached listener.\n     * @see Parameter\n     * @param parameter the parameter to remove\n     */\n    void removeParameter(Parameter parameter);\n\n    /**\n     * Gets a list of available parameters of the effect.\n     * @return list of effect parameters\n     */\n    List<Parameter> getParameters();\n\n    /**\n     * Checks if this effect has any parameters.\n     * @return true if there are parameters attached, else false\n     */\n    boolean hasParameters();\n\n    /**\n     * Resets all settings and parameters to their initial state.\n     */\n    void reset();\n\n    /**\n     * Sets a listener that gets called when any parameter value of the effect has changed.\n     * @see Listener#onEffectChanged(Effect)\n     * @param listener the listener to call back\n     * @deprecated Will be removed in next major version, use {@link #addListener} instead\n     */\n    void setListener(Listener listener);\n\n    /**\n     * Adds a listener that gets called when any parameter value of the effect has changed.\n     * @see Listener#onEffectChanged(Effect)\n     * @param listener the listener to call back\n     */\n    void addListener(Listener listener);\n\n    /**\n     * Removes a listener that has been added with {@link #addListener}.\n     * @param listener the listener to remove\n     */\n    void removeListener(Listener listener);\n}\nSpectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveSensorNavigation.java\npublic class ImmersiveSensorNavigation implements SensorEventListener {\n\n    private static final String TAG = ImmersiveSensorNavigation.class.getSimpleName();\n\n    private Context mContext;\n    private ImmersiveEffect mEffect;\n    private BooleanParameter mParameter;\n    private SensorManager mSensorManager;\n    private Sensor mSensor;\n    private boolean mActive;\n    private float[] mRotationMatrix = new float[16];\n    private float[] mRemappedRotationMatrix = new float[16];\n    private float[] mInitialRotationMatrix = null;\n\n    /**\n     * Creates a sensor navigation instance for the immersive effect.\n     * @param context context providing the sensor manager\n     * @throws RuntimeException if no rotation sensor is available\n     */\n    public ImmersiveSensorNavigation(Context context) throws RuntimeException {\n        mContext = context;\n\n        // Get sensor\n        mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);\n        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR);\n\n        if(mSensor == null) {\n            throw new RuntimeException(\"No rotation sensor available\");\n        }\n\n        // Make a UI handler for activation state toggling\n        final Handler h = new Handler();\n\n        // Create an effect parameter to toggle the sensor navigation on/off\n        mParameter = new BooleanParameter(\"SensorNav\", false, new BooleanParameter.Delegate() {\n            @Override\n            public void setValue(final Boolean value) {\n                // Activate/deactivate on UI thread\n                // Parameters are usually set on the GL thread, so we need to transfer this back to the UI thread\n                h.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        mActive = value;\n                        if(mActive) {\n                            activate();\n                        } else {\n                            deactivate();\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Attaches to the effect and adds parameter to toggle sensor navigation on/off.\n     * @param effect the effect to attach sensor navigation to\n     * @throws RuntimeException thrown if there is already an effect attached\n     */\n    public void attachTo(ImmersiveEffect effect) throws RuntimeException {\n        if(mEffect != null) {\n            throw new RuntimeException(\"Previous effect is still attached, call detach() first\");\n        }\n        mEffect = effect;\n        mEffect.addParameter(mParameter);\n    }\n\n    /**\n     * Detaches sensor navigation from an effect.\n     */\n    public void detach() {\n        mEffect.removeParameter(mParameter);\n        mEffect = null;\n    }\n\n    /**\n     * Activates sensor input.\n     */\n    public void activate() {\n        mSensorManager.registerListener(this, mSensor, SensorManager.SENSOR_DELAY_UI);\n        mActive = true;\n    }\n\n    /**\n     * Deactivates sensor input. Should be called when pausing a fragment or activity.\n     */\n    public void deactivate() {\n        mSensorManager.unregisterListener(this);\n        mInitialRotationMatrix = null; // reset matrix so it reinits on next activation\n        mActive = false;\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if(mEffect != null && mActive) {\n            // TODO understand those sensor coordinate spaces\n            // TODO find out how the sensor rotation can be mapped to the sphere shader correctly\n            // TODO should we store the initial rotation value to set the zero rotation point to the current phone rotation?\n\n            // Get the rotation matrix from the sensor\n            SensorManager.getRotationMatrixFromVector(mRotationMatrix, event.values);\n\n            // When the first sensor data comes in, we set the initial rotation matrix as\n            // \"zero rotation point\" to be able to calculate the relative rotation from the initial\n            // device rotation, instead of the absolute rotation from true north.\n            // Later, we subtract the initial rotation from the rotation matrix to get the relative rotation\n            if(mInitialRotationMatrix == null) {\n                mInitialRotationMatrix = new float[16];\n                // Matrix subtraction works by multiplying the inverse (Mb - Ma == inv(Ma) * Mb),\n                // so we directly store the inverse\n                Matrix.invertM(mInitialRotationMatrix, 0, mRotationMatrix, 0);\n            }\n\n            // Remove initial rotation\n            Matrix.multiplyMM(mRotationMatrix, 0, mInitialRotationMatrix, 0, mRotationMatrix, 0);\n\n            // Some axes seem like they need to be exchanged\n            Matrix.invertM(mRemappedRotationMatrix, 0, mRotationMatrix, 0);\n            // FIXME this does not seem to remap axes at all!?\n            //SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_X, SensorManager.AXIS_Z, mRemappedRotationMatrix);\n\n            // Debug output\n            //float[] orientation = new float[3];\n            //SensorManager.getOrientation(mRemappedRotationMatrix, orientation);\n            //debugOutputOrientationInDegree(orientation);\n\n            // Update effect and thus the viewport too\n            mEffect.setRotationMatrix(mRemappedRotationMatrix);\n        }\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n\n    private void debugOutputOrientationInDegree(float[] orientation) {\n        float azimuth = (float) Math.toDegrees(orientation[0]); // -z\n        float pitch = (float) Math.toDegrees(orientation[1]); // x\n        float roll = (float) Math.toDegrees(orientation[2]); // y\n        Log.d(TAG, azimuth + \", \" + pitch + \", \" + roll);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/WatermarkEffect.java\npublic class WatermarkEffect extends ShaderEffect {\n\n    public enum Alignment {\n        LOWER_LEFT,\n        UPPER_LEFT,\n        UPPER_RIGHT,\n        LOWER_RIGHT,\n        CENTER\n    }\n\n    private WatermarkShaderProgram mShaderProgram;\n    private float mScale;\n    private float mOpacity;\n    private float mMarginX, mMarginY;\n    private Alignment mAlignment;\n\n    private Bitmap mWatermarkBitmap;\n    private Texture2D mWatermarkTexture;\n\n    private FloatParameter mScaleParameter;\n    private FloatParameter mOpacityParameter;\n    private FloatParameter mMarginXParameter;\n    private FloatParameter mMarginYParameter;\n    private EnumParameter<Alignment> mAlignmentParameter;\n\n    public WatermarkEffect() {\n        mScale = 1.0f;\n        mOpacity = 0.8f;\n        mMarginX = mMarginY = 0.5f;\n        mAlignment = Alignment.LOWER_RIGHT;\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        mShaderProgram = new WatermarkShaderProgram();\n\n        mScaleParameter = new FloatParameter(\"Scale\", 0f, 10f, mScale, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mShaderProgram.setWatermarkScale(value);\n            }\n        });\n        addParameter(mScaleParameter);\n\n        mOpacityParameter = new FloatParameter(\"Opacity\", 0f, 1f, mOpacity, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mShaderProgram.setWatermarkOpacity(value);\n            }\n        });\n        addParameter(mOpacityParameter);\n\n        mMarginXParameter = new FloatParameter(\"Margin X\", -1f, 1f, mMarginX, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mMarginX = value;\n                mShaderProgram.setWatermarkMargin(mMarginX, mMarginY);\n            }\n        });\n        addParameter(mMarginXParameter);\n\n        mMarginYParameter = new FloatParameter(\"Margin Y\", -1f, 1f, mMarginY, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mMarginY = value;\n                mShaderProgram.setWatermarkMargin(mMarginX, mMarginY);\n            }\n        });\n        addParameter(mMarginYParameter);\n\n        mAlignmentParameter = new EnumParameter<>(\"Alignment\", Alignment.class, mAlignment, new EnumParameter.Delegate<Alignment>() {\n            @Override\n            public void setValue(Alignment value) {\n                mAlignment = value;\n                mShaderProgram.setWatermarkAlignment(mAlignment.ordinal());\n            }\n        });\n        addParameter(mAlignmentParameter);\n\n        if(mWatermarkBitmap != null) {\n            mWatermarkTexture = new Texture2D(mWatermarkBitmap);\n            mShaderProgram.setWatermark(mWatermarkTexture);\n        }\n\n        return mShaderProgram;\n    }\n\n    public void setWatermark(Bitmap watermark) {\n        // TODO clear previous texture\n        mWatermarkBitmap = watermark;\n        if(isInitialized()) {\n            mWatermarkTexture = new Texture2D(watermark);\n            mShaderProgram.setWatermark(mWatermarkTexture);\n        }\n    }\n\n    public void setScale(float scale) {\n        if(isInitialized()) {\n            mScaleParameter.setValue(scale);\n        } else {\n            mScale = scale;\n        }\n    }\n\n    public void setOpacity(float opacity) {\n        if(isInitialized()) {\n            mOpacityParameter.setValue(opacity);\n        } else {\n            mOpacity = opacity;\n        }\n    }\n\n    public void setMargin(float x, float y) {\n        if(isInitialized()) {\n            mMarginXParameter.setValue(x);\n            mMarginYParameter.setValue(y);\n        } else {\n            mMarginX = x;\n            mMarginY = y;\n        }\n    }\n\n    public void setAlignment(Alignment alignment) {\n        if(isInitialized()) {\n            mAlignmentParameter.setValue(alignment);\n        } else {\n            mAlignment = alignment;\n        }\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/SpectaculumView.java\npublic class SpectaculumView extends GLSurfaceView implements\n        SurfaceTexture.OnFrameAvailableListener,\n        Effect.Listener, GLRenderer.EffectEventListener,\n        GLRenderer.OnFrameCapturedCallback {\n\n    private static final String TAG = SpectaculumView.class.getSimpleName();\n\n    public interface EffectEventListener extends GLRenderer.EffectEventListener {}\n    public interface OnFrameCapturedCallback extends GLRenderer.OnFrameCapturedCallback {}\n\n    private GLRenderer mRenderer;\n    private InputSurfaceHolder mInputSurfaceHolder;\n    private Handler mRunOnUiThreadHandler = new Handler();\n    private ScaleGestureDetector mScaleGestureDetector;\n    private GestureDetector mGestureDetector;\n\n    private EffectEventListener mEffectEventListener;\n    private OnFrameCapturedCallback mOnFrameCapturedCallback;\n\n    private PipelineResolution mPipelineResolution = PipelineResolution.SOURCE;\n\n    private float mZoomLevel = 1.0f;\n    private float mZoomSnappingRange = 0.02f;\n    private float mPanX;\n    private float mPanY;\n    private float mPanSnappingRange = 0.02f;\n    private boolean mTouchEnabled = false;\n\n    protected int mImageWidth;\n    protected int mImageHeight;\n\n    public SpectaculumView(Context context) {\n        super(context);\n        init(context);\n    }\n\n    public SpectaculumView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context);\n    }\n\n    private void init(Context context) {\n        if(isInEditMode()) {\n            // do not start renderer in layout editor\n            return;\n        }\n        if(!net.protyposis.android.spectaculum.gles.GLUtils.isGlEs2Supported(context)) {\n            Log.e(TAG, \"GLES 2.0 is not supported\");\n            return;\n        }\n\n        LibraryHelper.setContext(context);\n\n        mRenderer = new GLRenderer();\n        mRenderer.setOnExternalSurfaceTextureCreatedListener(mExternalSurfaceTextureCreatedListener);\n        mRenderer.setEffectEventListener(mRendererEffectEventListener);\n\n        mInputSurfaceHolder = new InputSurfaceHolder();\n\n        setEGLContextClientVersion(2);\n        setRenderer(mRenderer);\n        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        // TODO setPreserveEGLContextOnPause(true);\n\n        mScaleGestureDetector = new ScaleGestureDetector(context,\n                new ScaleGestureDetector.SimpleOnScaleGestureListener() {\n                    @Override\n                    public boolean onScale(ScaleGestureDetector detector) {\n                        mZoomLevel *= detector.getScaleFactor();\n\n                        if(LibraryHelper.isBetween(mZoomLevel, 1-mZoomSnappingRange, 1+mZoomSnappingRange)) {\n                            mZoomLevel = 1.0f;\n                        }\n\n                        // limit zooming to magnification zooms (zoom-ins)\n                        if(mZoomLevel < 1.0f) {\n                            mZoomLevel = 1.0f;\n                        }\n\n                        setZoom(mZoomLevel);\n                        return true;\n                    }\n                });\n\n        mGestureDetector = new GestureDetector(context,\n                new GestureDetector.SimpleOnGestureListener() {\n                    @Override\n                    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n                        // divide by zoom level to adjust panning speed to zoomed picture size\n                        // multiply by fixed scaling factor to compensate for panning lag\n                        mPanX += distanceX / getWidth() / mZoomLevel * 1.2f;\n                        mPanY += distanceY / getHeight() / mZoomLevel * 1.2f;\n\n                        float panSnappingRange = mPanSnappingRange / mZoomLevel;\n                        if(LibraryHelper.isBetween(mPanX, -panSnappingRange, +panSnappingRange)) {\n                            mPanX = 0;\n                        }\n                        if(LibraryHelper.isBetween(mPanY, -panSnappingRange, +panSnappingRange)) {\n                            mPanY = 0;\n                        }\n\n                        // limit panning to the texture bounds so it always covers the complete view\n                        float maxPanX = Math.abs((1.0f / mZoomLevel) - 1.0f);\n                        float maxPanY = Math.abs((1.0f / mZoomLevel) - 1.0f);\n                        mPanX = LibraryHelper.clamp(mPanX, -maxPanX, maxPanX);\n                        mPanY = LibraryHelper.clamp(mPanY, -maxPanY, maxPanY);\n\n                        setPan(mPanX, mPanY);\n                        return true;\n                    }\n\n                    @Override\n                    public boolean onDoubleTap(MotionEvent e) {\n                        mZoomLevel = 1;\n                        mPanX = 0;\n                        mPanY = 0;\n\n                        setZoom(mZoomLevel);\n                        setPan(mPanX, mPanY);\n\n                        return true;\n                    }\n                });\n    }\n\n    /**\n     * Sets the zoom factor of the texture in the view. 1.0 means no zoom, 2.0 2x zoom, etc.\n     */\n    public void setZoom(float zoomFactor) {\n        mZoomLevel = zoomFactor;\n        mRenderer.setZoomLevel(mZoomLevel);\n        requestRender(GLRenderer.RenderRequest.GEOMETRY);\n    }\n\n    /**\n     * Gets the zoom level.\n     * @see #setZ(float) for an explanation if the value\n     * @return\n     */\n    public float getZoomLevel() {\n        return mZoomLevel;\n    }\n\n    /**\n     * Sets the panning of the texture in the view. (0.0, 0.0) centers the texture and means no\n     * panning, (-1.0, -1.0) moves the texture to the lower right quarter.\n     */\n    public void setPan(float x, float y) {\n        mPanX = x;\n        mPanY = y;\n        mRenderer.setPan(-mPanX, mPanY);\n        requestRender(GLRenderer.RenderRequest.GEOMETRY);\n    }\n\n    /**\n     * Gets the horizontal panning. Zero means centered, positive is to the left.\n     */\n    public float getPanX() {\n        return mPanX;\n    }\n\n    /**\n     * Gets the vertical panning. Zero means centered, positive is to the bottom.\n     */\n    public float getPanY() {\n        return mPanY;\n    }\n\n    /**\n     * Enables or disables touch zoom/pan gestures. When disabled, a parent container (e.g. an activity)\n     * can still pass touch events to this view's {@link #onTouchEvent(MotionEvent)} to process\n     * zoom/pan gestures.\n     * @see #isTouchEnabled()\n     */\n    public void setTouchEnabled(boolean enabled) {\n        mTouchEnabled = enabled;\n    }\n\n    /**\n     * Checks if touch gestures are enabled. Touch gestures are disabled by default.\n     * @see #setTouchEnabled(boolean)\n     */\n    public boolean isTouchEnabled() {\n        return mTouchEnabled;\n    }\n\n    /**\n     * Resizes the video view according to the video size to keep aspect ratio.\n     * Code copied from {@link android.widget.VideoView#onMeasure(int, int)}.\n     */\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        Log.i(\"@@@@\", \"onMeasure(\" + MeasureSpec.toString(widthMeasureSpec) + \", \"\n                + MeasureSpec.toString(heightMeasureSpec) + \")\");\n\n        int width = getDefaultSize(mImageWidth, widthMeasureSpec);\n        int height = getDefaultSize(mImageHeight, heightMeasureSpec);\n        if (mImageWidth > 0 && mImageHeight > 0) {\n\n            int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n            int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n            int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n            int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n            if (widthSpecMode == MeasureSpec.EXACTLY && heightSpecMode == MeasureSpec.EXACTLY) {\n                // the size is fixed\n                width = widthSpecSize;\n                height = heightSpecSize;\n\n                // for compatibility, we adjust size based on aspect ratio\n                if ( mImageWidth * height  < width * mImageHeight) {\n                    //Log.i(\"@@@\", \"image too wide, correcting\");\n                    width = height * mImageWidth / mImageHeight;\n                } else if ( mImageWidth * height  > width * mImageHeight) {\n                    //Log.i(\"@@@\", \"image too tall, correcting\");\n                    height = width * mImageHeight / mImageWidth;\n                }\n            } else if (widthSpecMode == MeasureSpec.EXACTLY) {\n                // only the width is fixed, adjust the height to match aspect ratio if possible\n                width = widthSpecSize;\n                height = width * mImageHeight / mImageWidth;\n                if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) {\n                    // couldn't match aspect ratio within the constraints\n                    height = heightSpecSize;\n                }\n            } else if (heightSpecMode == MeasureSpec.EXACTLY) {\n                // only the height is fixed, adjust the width to match aspect ratio if possible\n                height = heightSpecSize;\n                width = height * mImageWidth / mImageHeight;\n                if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) {\n                    // couldn't match aspect ratio within the constraints\n                    width = widthSpecSize;\n                }\n            } else {\n                // neither the width nor the height are fixed, try to use actual video size\n                width = mImageWidth;\n                height = mImageHeight;\n                if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) {\n                    // too tall, decrease both width and height\n                    height = heightSpecSize;\n                    width = height * mImageWidth / mImageHeight;\n                }\n                if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) {\n                    // too wide, decrease both width and height\n                    width = widthSpecSize;\n                    height = width * mImageHeight / mImageWidth;\n                }\n            }\n        } else {\n            // no size yet, just adopt the given spec sizes\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        /*\n         * NOTE: These calls should not be simplified to a logical chain, because the evaluation\n         * would stop at the first true value and not execute the following functions.\n         */\n        boolean event1 = mScaleGestureDetector.onTouchEvent(event);\n        boolean event2 = mGestureDetector.onTouchEvent(event);\n        return event1 || event2;\n    }\n\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent event) {\n        if(!mTouchEnabled) {\n            // Touch events are disabled and we return false to route all events to the parent\n            return false;\n        }\n        return super.dispatchTouchEvent(event);\n    }\n\n    /**\n     * Implement this method to receive the input surface holder when it is ready to be used.\n     * The input surface holder holds the surface and surface texture to which input data, i.e. image\n     * data from some source that should be processed and displayed, should be written to display\n     * it in the view.\n     *\n     * External callers should add a callback to the holder through {@link InputSurfaceHolder#addCallback(InputSurfaceHolder.Callback)}\n     * to be notified about this event in {@link InputSurfaceHolder.Callback#surfaceCreated(InputSurfaceHolder)}.\n     *\n     * @param inputSurfaceHolder the input surface holder which holds the surface where image data should be written to\n     */\n    public void onInputSurfaceCreated(InputSurfaceHolder inputSurfaceHolder) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets the input surface holder that holds the surface where image data should be written to\n     * for processing and display. The holder is always available but only holds an actual surface\n     * after {@link #onInputSurfaceCreated(InputSurfaceHolder)} respectively\n     * {@link InputSurfaceHolder.Callback#surfaceCreated(InputSurfaceHolder)} have been called.\n     *\n     * The input surface holder holds the input surface (texture) that is used to write image data\n     * into the processing pipeline, opposed to the surface holder from {@link #getHolder()} that holds\n     * the surface to which the final result of the processing pipeline will be written to for display.\n     *\n     * @return the input surface holder or null if it is not available yet\n     */\n    public InputSurfaceHolder getInputHolder() {\n        return mInputSurfaceHolder;\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        // Delete the external texture, else it stays in RAM\n        if(getInputHolder().getExternalSurfaceTexture() != null) {\n            getInputHolder().getExternalSurfaceTexture().delete();\n            getInputHolder().update(null);\n        }\n        super.surfaceDestroyed(holder);\n    }\n\n    /**\n     * Adds one or more effects to the view. Added effects can then be activated/selected by calling\n     * {@link #selectEffect(int)}. The effect indices start at zero and are in the order that they\n     * are added to the view.\n     * @param effects effects to add\n     */\n    public void addEffect(final Effect... effects) {\n        for(Effect effect : effects) {\n            effect.addListener(this);\n            effect.setParameterHandler(new ParameterHandler(this));\n        }\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.addEffect(effects);\n            }\n        });\n    }\n\n    /**\n     * Selects/activates the effect with the given index as it has been added through {@link #addEffect(Effect...)}.\n     * @param index the index of the effect to activate\n     */\n    public void selectEffect(final int index) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.selectEffect(index);\n                requestRender(GLRenderer.RenderRequest.EFFECT);\n            }\n        });\n    }\n\n    /**\n     * Gets called when an effect has been initialized after being selected for the first time\n     * with {@link #selectEffect(int)}. Effect initialization happens asynchronously and can take\n     * some time when a lot of data (framebuffers, textures, ...) is loaded.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the initialized effect\n     * @param effect the initialized effect\n     */\n    @Override\n    public void onEffectInitialized(int index, Effect effect) {\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectInitialized(index, effect);\n        }\n        requestRender(GLRenderer.RenderRequest.EFFECT);\n    }\n\n    /**\n     * Gets called when an effect has been successfully selected with {@link #selectEffect(int)}.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the selected effect\n     * @param effect the selected effect\n     */\n    @Override\n    public void onEffectSelected(int index, Effect effect) {\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectSelected(index, effect);\n        }\n    }\n\n    /**\n     * Gets called when an effect selection with {@link #selectEffect(int)} fails.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the failed effect\n     * @param effect the failed effect\n     */\n    @Override\n    public void onEffectError(int index, Effect effect, EffectException e) {\n        Log.e(TAG, \"effect error\", e);\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectError(index, effect, e);\n        }\n    }\n\n    /**\n     * Sets an event listener that gets called when effect-related event happens.\n     * @param listener the event listener to be called on an event\n     */\n    public void setEffectEventListener(EffectEventListener listener) {\n        mEffectEventListener = listener;\n    }\n\n    /**\n     * Gets called when a parameter of an effect has changed. This method then triggers a fresh\n     * rendering of the effect. Can be overridden in subclasses but must be called through.\n     * @param effect the effect of which a parameter value has changed\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onEffectChanged(Effect effect) {\n        requestRender(GLRenderer.RenderRequest.EFFECT);\n    }\n\n    /**\n     * Gets called when a parameter is added to an effect.\n     * Can be overridden in subclasses but must be called through.\n     * @param effect the effect to which a parameter was added\n     * @param parameter the added parameter\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onParameterAdded(Effect effect, Parameter parameter) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets called when a parameter is removed from an effect.\n     * Can be overridden in subclasses but must be called through.\n     * @param effect the effect from which a parameter was removed\n     * @param parameter the removed parameter\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onParameterRemoved(Effect effect, Parameter parameter) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets called when a new image frame has been written to the surface texture and requests a\n     * fresh rendering of the view. The texture can be obtained through {@link #onInputSurfaceCreated(InputSurfaceHolder)}\n     * or {@link #getInputHolder()}.\n     * Can be overridden in subclasses but must be called through.\n     * @param surfaceTexture the updated surface texture\n     */\n    @Override\n    public void onFrameAvailable(SurfaceTexture surfaceTexture) {\n        requestRender(GLRenderer.RenderRequest.ALL);\n    }\n\n    /**\n     * Requests a render pass of the specified render pipeline section.\n     * @param renderRequest specifies the pipeline section to be rendered\n     */\n    protected void requestRender(final GLRenderer.RenderRequest renderRequest) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.setRenderRequest(renderRequest);\n                requestRender();\n            }\n        });\n    }\n\n    /**\n     * Requests a capture of the current frame on the view. The frame is asynchronously requested\n     * from the renderer and will be passed back on the UI thread to {@link #onFrameCaptured(Bitmap)}\n     * and the event listener that can be set with {@link #setOnFrameCapturedCallback(OnFrameCapturedCallback)}.\n     */\n    public void captureFrame() {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.saveCurrentFrame(new GLRenderer.OnFrameCapturedCallback() {\n                    @Override\n                    public void onFrameCaptured(final Bitmap bitmap) {\n                        mRunOnUiThreadHandler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                SpectaculumView.this.onFrameCaptured(bitmap);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Receives a captured frame from the renderer. Can be overwritten in subclasses but must be\n     * called through. External callers should use {@link #setOnFrameCapturedCallback(OnFrameCapturedCallback)}.\n     */\n    @Override\n    public void onFrameCaptured(Bitmap bitmap) {\n        if(mOnFrameCapturedCallback != null) {\n            mOnFrameCapturedCallback.onFrameCaptured(bitmap);\n        }\n    }\n\n    /**\n     * Sets a callback event handler that receives a bitmap of the captured frame.\n     */\n    public void setOnFrameCapturedCallback(OnFrameCapturedCallback callback) {\n        mOnFrameCapturedCallback = callback;\n    }\n\n    /**\n     * Sets the resolution mode of the processing pipeline.\n     * @see PipelineResolution\n     */\n    public void setPipelineResolution(PipelineResolution resolution) {\n        mPipelineResolution = resolution;\n    }\n\n    /**\n     * Gets the configured resolution mode of the processing pipeline.\n     */\n    public PipelineResolution getPipelineResolution() {\n        return mPipelineResolution;\n    }\n\n    /**\n     * Sets the resolution of the source data and recomputes the layout. This implicitly also sets\n     * the resolution of the view output surface if pipeline resolution mode {@link PipelineResolution#SOURCE}\n     * is set. In SOURCE mode, output will therefore be computed in the input resolution and then\n     * at the very end scaled (most often downscaled) to fit the view in the layout.\n     *\n     * TODO decouple input, processing and output resolution\n     *\n     * @param width the width of the input image data\n     * @param height the height of the input image data\n     */\n    public void updateResolution(int width, int height) {\n        if(width == mImageWidth && height == mImageHeight) {\n            // Don't do anything if resolution has stayed the same\n            return;\n        }\n\n        mImageWidth = width;\n        mImageHeight = height;\n\n        // If desired, set output resolution to source resolution\n        if (width != 0 && height != 0 && mPipelineResolution == PipelineResolution.SOURCE) {\n            getHolder().setFixedSize(width, height);\n        }\n\n        // Resize view according to the new size to fit the layout\n        requestLayout();\n    }\n\n    private GLRenderer.OnExternalSurfaceTextureCreatedListener mExternalSurfaceTextureCreatedListener =\n            new GLRenderer.OnExternalSurfaceTextureCreatedListener() {\n        @Override\n        public void onExternalSurfaceTextureCreated(final ExternalSurfaceTexture surfaceTexture) {\n            // dispatch event to UI thread\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    // Create an input surface holder and call the event handler\n                    mInputSurfaceHolder.update(surfaceTexture);\n                    onInputSurfaceCreated(mInputSurfaceHolder);\n                }\n            });\n\n            surfaceTexture.setOnFrameAvailableListener(SpectaculumView.this);\n        }\n    };\n\n    /**\n     * Effect event listener that transfers the events to the UI thread.\n     */\n    private EffectEventListener mRendererEffectEventListener = new EffectEventListener() {\n        @Override\n        public void onEffectInitialized(final int index, final Effect effect) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectInitialized(index, effect);\n                }\n            });\n        }\n\n        @Override\n        public void onEffectSelected(final int index, final Effect effect) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectSelected(index, effect);\n                }\n            });\n        }\n\n        @Override\n        public void onEffectError(final int index, final Effect effect, final EffectException e) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectError(index, effect, e);\n                }\n            });\n        }\n    };\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelGaussBlurEffect.java\npublic class KernelGaussBlurEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.BLUR_GAUSS);\n    }\n}\nSpectaculum-Effect-FlowAbs/src/main/java/net/protyposis/android/spectaculum/effects/FlowAbsEffect.java\npublic class FlowAbsEffect extends BaseEffect {\n\n    protected FlowAbs mFlowAbs;\n\n    private float mSstSigma;\n\n    private int mBfNE;\n    private int mBfNA;\n    private float mBfSigmaD;\n    private float mBfSigmaR;\n\n    private int mFDogType;\n    private int mFDogN;\n    private float mFDogSigmaE;\n    private float mFDogSigmaR;\n    private float mFDogSigmaM;\n    private float mFDogTau;\n    private float mFDogPhi;\n\n    private int mCqFilter;\n    private int mCqNumBins;\n    private float mCqPhiQ;\n\n    private float[] mEdgeColor;\n\n    private int mFsType;\n    private float mFsSigma;\n\n    public FlowAbsEffect() {\n        super();\n\n        mSstSigma = 2.0f;\n\n        mBfNE = 0; // TODO default to 1 once the bilateral filter is working correctly\n        mBfNA = 0; // TODO default to 4 once the bilateral filter is working correctly\n        mBfSigmaD = 3.0f;\n        mBfSigmaR = 4.25f;\n\n        mFDogType = 0;\n        mFDogN = 1;\n        mFDogSigmaE = 1.0f;\n        mFDogSigmaR = 1.6f;\n        mFDogSigmaM = 3.0f;\n        mFDogTau = 0.99f;\n        mFDogPhi = 2.0f;\n\n        mCqFilter = 1;\n        mCqNumBins = 8;\n        mCqPhiQ = 3.4f;\n\n        mEdgeColor = new float[] { 0.0f, 0.0f, 0.0f };\n\n        mFsType = 1;\n        mFsSigma = 1.0f;\n\n        addParameter(new FloatParameter(\"SST Sigma\", 0f, 10f, mSstSigma, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mSstSigma = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"BF N E\", 0, 10, mBfNE, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mBfNE = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"BF N A\", 0, 10, mBfNA, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mBfNA = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"BF sigmaD\", 0f, 10f, mBfSigmaD, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBfSigmaD = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"BF sigmaR\", 0f, 10f, mBfSigmaR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBfSigmaR = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"(F)DOG Type\", 0, 1, mFDogType, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFDogType = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"(F)DOG N\", 0, 10, mFDogN, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFDogN = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG sigmaE\", 0f, 10f, mFDogSigmaE, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaE = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG sigmaR\", 0f, 10f, mFDogSigmaR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaR = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"FDOG sigmaM\", 0f, 10f, mFDogSigmaM, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaM = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG tau\", 0f, 10f, mFDogTau, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogTau = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG phi\", 0f, 10f, mFDogPhi, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogPhi = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"CQ Filter\", 0, 2, mCqFilter, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mCqFilter = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"CQ Bins\", 0, 20, mCqNumBins, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mCqNumBins = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"CQ phiQ\", 0f, 10f, mCqPhiQ, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mCqPhiQ = value;\n            }\n        }));\n\n        addParameter(new FloatParameter(\"Edge R\", 0f, 1f, mEdgeColor[0], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[0] = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"Edge G\", 0f, 1f, mEdgeColor[1], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[1] = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"Edge B\", 0f, 1f, mEdgeColor[2], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[2] = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"FS Type\", 0, 3, mFsType, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFsType = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"FS Sigma\", 0f, 10f, mFsSigma, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFsSigma = value;\n            }\n        }));\n    }\n\n    @Override\n    public void init(int width, int height) {\n        mFlowAbs = new FlowAbs(width, height);\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        mFlowAbs.flowAbs(source, target,\n                mSstSigma,\n                mBfNE, mBfNA, mBfSigmaD, mBfSigmaR,\n                mFDogType, mFDogN, mFDogSigmaE, mFDogSigmaR, mFDogSigmaM, mFDogTau, mFDogPhi,\n                mCqFilter, mCqNumBins, mCqPhiQ,\n                mEdgeColor,\n                mFsType, mFsSigma);\n    }\n\n    public FlowAbsGaussEffect getGaussEffect() {\n        return (FlowAbsGaussEffect) new FlowAbsGaussEffect().init(this);\n    }\n\n    public FlowAbsSmoothEffect getSmoothEffect() {\n        return (FlowAbsSmoothEffect) new FlowAbsSmoothEffect().init(this);\n    }\n\n    public FlowAbsBilateralFilterEffect getBilateralFilterEffect() {\n        return (FlowAbsBilateralFilterEffect) new FlowAbsBilateralFilterEffect().init(this);\n    }\n\n    public FlowAbsColorQuantizationEffect getColorQuantizationEffect() {\n        return (FlowAbsColorQuantizationEffect) new FlowAbsColorQuantizationEffect().init(this);\n    }\n\n    public FlowAbsDOGEffect getDOGEffect() {\n        return (FlowAbsDOGEffect) new FlowAbsDOGEffect().init(this);\n    }\n\n    public FlowAbsFDOGEffect getFDOGEffect() {\n        return (FlowAbsFDOGEffect) new FlowAbsFDOGEffect().init(this);\n    }\n\n    public FlowAbsTangentFlowMapEffect getTangentFlowMapEffect() {\n        return (FlowAbsTangentFlowMapEffect) new FlowAbsTangentFlowMapEffect().init(this);\n    }\n\n    public FlowAbsNoiseTextureEffect getNoiseTextureEffect() {\n        return (FlowAbsNoiseTextureEffect) new FlowAbsNoiseTextureEffect().init(this);\n    }\n}\n", "answers": ["        mEffects.add(new NoEffect());"], "length": 8194, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "cb75af27199120a4d11be40c2968da895ebd2e8795dfc692"}
{"input": "import doctest\nimport unittest\nfrom hypothesis import given\nfrom hypothesis.strategies import integers\nfrom arxpy.bitvector.core import Variable, Constant\nfrom arxpy.bitvector.operation import RotateLeft, RotateRight\nfrom arxpy.primitives.primitives import BvFunction, KeySchedule, Encryption, Cipher\nfrom arxpy.differential.difference import XorDiff, RXDiff\nfrom arxpy.differential import characteristic\nfrom arxpy.differential.characteristic import BvCharacteristic, SingleKeyCh, RelatedKeyCh\n\"\"\"Tests for the Characteristic module.\"\"\"\n\n\n\n\n\n\nVERBOSE = False\n\n\n# 1st cipher: linear key schedule and encryption with modular addition (no ctes)\n\nclass MyFunction(BvFunction):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x ^ Constant(1, 8), 1)\n        y = ~y\n        return tuple([x + y])\n\n\nclass KeySchedule1(KeySchedule):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8, 8]\n\n    @classmethod\n    def eval(cls, mk):\n        return tuple([mk, mk ^ Constant(1, 8)])\n\n\n", "context": "arxpy/differential/characteristic.py\nclass RelatedKeyCh(object):\n    \"\"\"Represent related-key characteristics of block ciphers.\n\n    A related-key characteristic of a `Cipher` is a pair `BvCharacteristic`,\n    one over the `KeySchedule` of the cipher, and another one over the\n    the `Encryption` function of the cipher, where the output differences\n    of the key schedule characteristic are used as round key differences\n    in the encryption characteristic.\n\n    The master key differences start with the prefix ``\"dmk\"``,\n    the round key differences start with the prefix ``\"dk\"``,\n    the plaintext differences start with the prefix ``\"dp\"``\n    and the non-linear differences start with the prefix ``\"dx\"``.\n\n        >>> from arxpy.bitvector.core import Variable\n        >>> from arxpy.differential.difference import XorDiff\n        >>> from arxpy.differential.characteristic import RelatedKeyCh\n        >>> from arxpy.primitives.primitives import Cipher\n        >>> from arxpy.primitives.lea import LeaCipher\n        >>> issubclass(LeaCipher, Cipher)\n        True\n        >>> LeaCipher.set_rounds(1)\n        >>> rkch = RelatedKeyCh(LeaCipher, XorDiff)\n        >>> rkch .key_schedule_ch.ssa  # doctest: +NORMALIZE_WHITESPACE\n        {'input_vars': (dmk0, dmk1, dmk2, dmk3),\n        'output_vars': (dk1, dk3, dk5, dk3, dk7, dk3),\n        'assignments': ((dk0, 0xc3efe9db + dmk0), (dk1, dk0 <<< 1), (dk2, 0x87dfd3b7 + dmk1), (dk3, dk2 <<< 3),\n        (dk4, 0x0fbfa76f + dmk2), (dk5, dk4 <<< 6), (dk6, 0x1f7f4ede + dmk3), (dk7, dk6 <<< 11))}\n        >>> rkch.key_schedule_ch.input_diff\n        (XorDiff(dmk0), XorDiff(dmk1), XorDiff(dmk2), XorDiff(dmk3))\n        >>> rkch.key_schedule_ch.output_diff  # doctest: +NORMALIZE_WHITESPACE\n        [[XorDiff(dk1), XorDiff(dk0 <<< 1)], [XorDiff(dk3), XorDiff(dk2 <<< 3)],\n        [XorDiff(dk5), XorDiff(dk4 <<< 6)], [XorDiff(dk3), XorDiff(dk2 <<< 3)],\n        [XorDiff(dk7), XorDiff(dk6 <<< 11)], [XorDiff(dk3), XorDiff(dk2 <<< 3)]]\n        >>> rkch.key_schedule_ch.nonlinear_diffs  # doctest: +NORMALIZE_WHITESPACE\n        OrderedDict([(XorDiff(dk0), XDCA_0xc3efe9db(XorDiff(dmk0))),\n        (XorDiff(dk2), XDCA_0x87dfd3b7(XorDiff(dmk1))),\n        (XorDiff(dk4), XDCA_0x0fbfa76f(XorDiff(dmk2))),\n        (XorDiff(dk6), XDCA_0x1f7f4ede(XorDiff(dmk3)))])\n        >>> rkch.encryption_ch.ssa  # doctest: +NORMALIZE_WHITESPACE\n        {'input_vars': (dp0, dp1, dp2, dp3),\n        'output_vars': (dx3, dx7, dx11, dp0),\n        'assignments': ((dx0, dk1 ^ dp0), (dx1, dk3 ^ dp1), (dx2, dx0 + dx1), (dx3, dx2 <<< 9),\n        (dx4, dk5 ^ dp1), (dx5, dk3 ^ dp2), (dx6, dx4 + dx5), (dx7, dx6 >>> 5), (dx8, dk7 ^ dp2),\n        (dx9, dk3 ^ dp3), (dx10, dx8 + dx9), (dx11, dx10 >>> 3))}\n        >>> rkch.encryption_ch.input_diff\n        (XorDiff(dp0), XorDiff(dp1), XorDiff(dp2), XorDiff(dp3))\n        >>> rkch.encryption_ch.output_diff # doctest: +NORMALIZE_WHITESPACE\n        [[XorDiff(dx3), XorDiff(dx2 <<< 9)], [XorDiff(dx7), XorDiff(dx6 >>> 5)],\n        [XorDiff(dx11), XorDiff(dx10 >>> 3)], [XorDiff(dp0), XorDiff(dp0)]]\n        >>> rkch.encryption_ch.nonlinear_diffs  # doctest: +NORMALIZE_WHITESPACE\n        OrderedDict([(XorDiff(dx2), XDA(XorDiff(dp0 ^ (dk0 <<< 1)), XorDiff(dp1 ^ (dk2 <<< 3)))),\n        (XorDiff(dx6), XDA(XorDiff(dp1 ^ (dk4 <<< 6)), XorDiff(dp2 ^ (dk2 <<< 3)))),\n        (XorDiff(dx10), XDA(XorDiff(dp2 ^ (dk6 <<< 11)), XorDiff(dp3 ^ (dk2 <<< 3))))])\n\n    Attributes:\n        key_schedule_ch: the `BvCharacteristic` over the key schedule\n        encryption_ch: the `BvCharacteristic` over the encryption function\n    \"\"\"\n\n    def __init__(self, bv_cipher, diff_type):\n        assert issubclass(bv_cipher, primitives.Cipher)\n        assert issubclass(diff_type, difference.Difference)\n\n        func = bv_cipher.key_schedule\n        prefix = \"dk\"\n        input_diff_names = tuple([\"dmk\" + str(i) for i in range(len(func.input_widths))])\n        ks_ch = BvCharacteristic(func, diff_type, input_diff_names, prefix)\n\n        class Encryption(bv_cipher.encryption):\n            round_keys = ks_ch.ssa[\"output_vars\"]\n\n        func = Encryption\n        prefix = \"dx\"\n        input_diff_names = [\"dp\" + str(i) for i in range(len(func.input_widths))]\n        round_key_diff = {}\n        for var, diff in ks_ch.output_diff:\n            round_key_diff[var.val] = diff\n        encryption_ch = BvCharacteristic(func, diff_type, input_diff_names,\n                                         prefix, round_key_diff)\n\n        self.diff_type = diff_type\n        self.key_schedule_ch = ks_ch\n        self.encryption_ch = encryption_ch\n        self._cipher = bv_cipher\n\n    def empirical_weight(self, key_input_diff, key_output_diff, key_samples,\n                         enc_input_diff, enc_output_diff, enc_samples, precision=1):\n        \"\"\"Return the empirical weight of a given differential for multiple keys.\n\n        This method returns the differential probability weight for the\n        key schedule characteristic (see `BvCharacteristic.empirical_weight`)\n        and the `collections.Counter` storing the distribution of weights for the encryption\n        characteristic (see `SingleKeyCh.empirical_weight`).\n\n            >>> from arxpy.bitvector.core import Variable, Constant\n            >>> from arxpy.differential.difference import XorDiff\n            >>> from arxpy.differential.characteristic import RelatedKeyCh\n            >>> from arxpy.primitives.lea import LeaCipher\n            >>> LeaCipher.set_rounds(1)\n            >>> rkch = RelatedKeyCh(LeaCipher, XorDiff)\n            >>> zero, one = XorDiff(Constant(0, 32)), XorDiff(Constant(1, 32))\n            >>> kid, kod = [zero]*4, [zero]*6\n            >>> eid, eod = [zero]*4, [zero]*4\n            >>> rkch.empirical_weight(kid, kod, 10, eid, eod, 100)\n            (0.0, Counter({0.0: 10}))\n            >>> kid, kod = [zero]*4, [one]*6\n            >>> eid, eod = [zero]*4, [one]*4\n            >>> rkch.empirical_weight(kid, kod, 10, eid, eod, 100)\n            (inf, Counter({inf: 10}))\n\n        \"\"\"\n        key_weight = self.key_schedule_ch.empirical_weight(key_input_diff, key_output_diff, key_samples)\n        # noinspection PyProtectedMember\n        enc_counter = self.encryption_ch._empirical_weight_distribution(self._cipher,\n                                                                        enc_input_diff, enc_output_diff, enc_samples,\n                                                                        key_samples, precision, key_output_diff)\n        return key_weight, enc_counter\n\n    def signature(self, ch_signature_type):\n        \"\"\"Return the signature of the related-key characteristic.\n\n        The signature of a related-key characteristic is the\n        concatenation of the key schedule and encryption signatures.\n\n        See also `BvCharacteristic.signature`.\n\n            >>> from arxpy.bitvector.core import Variable\n            >>> from arxpy.differential.difference import XorDiff\n            >>> from arxpy.differential.characteristic import RelatedKeyCh, ChSignatureType\n            >>> from arxpy.primitives.primitives import Cipher\n            >>> from arxpy.primitives.lea import LeaCipher\n            >>> LeaCipher.set_rounds(1)\n            >>> rkch = RelatedKeyCh(LeaCipher, XorDiff)\n            >>> rkch.signature(ChSignatureType.Full)  # doctest:+NORMALIZE_WHITESPACE\n            [dmk0, dmk1, dmk2, dmk3, dk0, dk2, dk4, dk6, dp0, dp1, dp2, dp3, dx2, dx6, dx10]\n            >>> rkch.signature(ChSignatureType.InputOutput)  # doctest:+NORMALIZE_WHITESPACE\n            [dmk0, dmk1, dmk2, dmk3, dk1, dk3, dk5, dk3, dk7, dk3, dp0, dp1, dp2, dp3, dx3, dx7, dx11]\n\n        \"\"\"\n        return self.key_schedule_ch.signature(ch_signature_type) + self.encryption_ch.signature(ch_signature_type)\n\n    def _to_dict(self):\n        dict_ch = {\n            \"key_schedule_ch\": self.key_schedule_ch._to_dict(),\n            \"encryption_ch\": self.encryption_ch._to_dict(),\n        }\n        return dict_ch\n\n    def __str__(self):\n        return pprint.pformat(self._to_dict(), width=100, compact=True)\narxpy/bitvector/operation.py\nclass RotateLeft(Operation):\n    \"\"\"Circular left rotation operation.\n\n        >>> from arxpy.bitvector.core import Constant, Variable\n        >>> from arxpy.bitvector.operation import RotateLeft\n        >>> RotateLeft(Constant(150, 8), 2)\n        0x5a\n        >>> RotateLeft(Variable(\"x\", 8), 2)\n        x <<< 2\n\n    \"\"\"\n\n    arity = [1, 1]\n    is_symmetric = False\n    infix_symbol = \"<<<\"\n    operand_types = [core.Term, int]\n\n    @classmethod\n    def condition(cls, x, r):\n        return x.width > r >= 0\n\n    @classmethod\n    def output_width(cls, x, r):\n        return x.width\n\n    @classmethod\n    def eval(cls, x, r):\n        def doit(val, r, width):\n            \"\"\"Left cyclic rotation operation when both operands are int.\"\"\"\n            mask = 2 ** width - 1\n            r = r % width\n            return ((val << r) & mask) | ((val & mask) >> (width - r))\n\n        if isinstance(x, core.Constant):\n            return core.Constant(doit(int(x), r, x.width), x.width)\n        elif r == 0:\n            return x\n        elif isinstance(x, RotateLeft):\n            return RotateLeft(x.args[0], (x.args[1] + r) % x.args[0].width)\n        elif isinstance(x, RotateRight):\n            return RotateRight(x.args[0], (x.args[1] - r) % x.args[0].width)\narxpy/bitvector/operation.py\nclass RotateRight(Operation):\n    \"\"\"Circular right rotation operation.\n\n    It provides Automatic Constant Conversion. See `Operation` for more\n    information.\n\n        >>> from arxpy.bitvector.core import Constant, Variable\n        >>> from arxpy.bitvector.operation import RotateRight\n        >>> RotateRight(Constant(150, 8), 3)\n        0xd2\n        >>> RotateRight(Variable(\"x\", 8), 3)\n        x >>> 3\n\n    \"\"\"\n\n    arity = [1, 1]\n    is_symmetric = False\n    infix_symbol = \">>>\"\n    operand_types = [core.Term, int]\n\n    @classmethod\n    def condition(cls, x, r):\n        return x.width > r >= 0\n\n    @classmethod\n    def output_width(cls, x, r):\n        return x.width\n\n    @classmethod\n    def eval(cls, x, r):\n        def doit(val, r, width):\n            \"\"\"Right cyclic rotation operation when both operands are int.\"\"\"\n            mask = 2 ** width - 1\n            r = r % width\n            return ((val & mask) >> r) | (val << (width - r) & mask)\n\n        if isinstance(x, core.Constant):\n            return core.Constant(doit(int(x), r, x.width), x.width)\n        elif r == 0:\n            return x\n        elif isinstance(x, RotateRight):\n            return RotateRight(x.args[0], (x.args[1] + r) % x.args[0].width)\n        elif isinstance(x, RotateLeft):\n            return RotateLeft(x.args[0], (x.args[1] - r) % x.args[0].width)\narxpy/differential/difference.py\nclass XorDiff(Difference):\n    \"\"\"Represent XOR differences.\n\n    The XOR difference of two `Term` is given by the XOR\n    of the terms. In other words, the *difference operation*\n    of `XorDiff` is the `BvXor` (see `Difference`).\n\n        >>> from arxpy.bitvector.core import Constant, Variable\n        >>> from arxpy.differential.difference import XorDiff\n        >>> x, y = Constant(0b000, 3), Constant(0b000, 3)\n        >>> alpha = XorDiff.from_pair(x, y)\n        >>> alpha\n        XorDiff(0b000)\n        >>> alpha.get_pair_element(x)\n        0b000\n        >>> x, y = Constant(0b010, 3), Constant(0b101, 3)\n        >>> alpha = XorDiff.from_pair(x, y)\n        >>> alpha\n        XorDiff(0b111)\n        >>> alpha.get_pair_element(x)\n        0b101\n        >>> k = Variable(\"k\", 8)\n        >>> alpha = XorDiff.from_pair(k, k)\n        >>> alpha\n        XorDiff(0x00)\n        >>> alpha.get_pair_element(k)\n        k\n    \"\"\"\n\n    diff_op = operation.BvXor\n    inv_diff_op = operation.BvXor\n\n    @classmethod\n    def derivative(cls, op, input_diff):\n        \"\"\"Return the derivative of ``op`` at the point ``input_diff``.\n\n        See `Difference.derivative` for more information.\n\n            >>> from arxpy.bitvector.core import Variable, Constant\n            >>> from arxpy.bitvector.operation import BvAdd, BvXor, RotateLeft, BvSub\n            >>> from arxpy.bitvector.extraop import make_partial_operation\n            >>> from arxpy.differential.difference import XorDiff\n            >>> d1, d2 = XorDiff(Variable(\"d1\", 8)), XorDiff(Variable(\"d2\", 8))\n            >>> XorDiff.derivative(BvXor, [d1, d2])\n            XorDiff(d1 ^ d2)\n            >>> Xor1 = make_partial_operation(BvXor, tuple([None, Constant(1, 8)]))\n            >>> XorDiff.derivative(Xor1, d1)\n            XorDiff(d1)\n            >>> Rotate1 = make_partial_operation(RotateLeft, tuple([None, 1]))\n            >>> XorDiff.derivative(Rotate1, d1)\n            XorDiff(d1 <<< 1)\n            >>> XorDiff.derivative(BvAdd, [d1, d2])\n            XDA(XorDiff(d1), XorDiff(d2))\n            >>> XorDiff.derivative(BvSub, [d1, d2])\n            XDS(XorDiff(d1), XorDiff(d2))\n            >>> CteAdd1 = make_partial_operation(BvAdd, tuple([None, Constant(1, 8)]))\n            >>> XorDiff.derivative(CteAdd1, d1)\n            XDCA_0x01(XorDiff(d1))\n\n        \"\"\"\n        input_diff = _tuplify(input_diff)\n        assert len(input_diff) == sum(op.arity)\n\n        msg = \"invalid arguments: op={}, input_diff={}\".format(\n            op.__name__,\n            [d.vrepr() if isinstance(d, core.Term) else d for d in input_diff])\n\n        if not all(isinstance(diff, cls) for diff in input_diff):\n            raise ValueError(msg)\n\n        if op == operation.BvNot:\n            return input_diff[0]\n\n        if op == operation.BvXor:\n            return cls(op(*[d.val for d in input_diff]))\n\n        if op == operation.Concat:\n            return cls(op(*[d.val for d in input_diff]))\n\n        if op == operation.BvAdd:\n            from arxpy.differential import derivative\n            return derivative.XDA(input_diff)\n\n        if op == operation.BvSub:\n            from arxpy.differential import derivative\n            return derivative.XDS(input_diff)\n\n        if issubclass(op, extraop.PartialOperation):\n            if op.base_op == operation.BvXor:\n                assert len(input_diff) == 1\n                d1 = input_diff[0]\n                val = op.fixed_args[0] if op.fixed_args[0] is not None else op.fixed_args[1]\n                d2 = cls.from_pair(val, val)\n                input_diff = [d1, d2]\n                return cls(op.base_op(*[d.val for d in input_diff]))\n\n            if op.base_op == operation.BvAnd:\n                assert len(input_diff) == 1\n                d1 = input_diff[0]\n                val = op.fixed_args[0] if op.fixed_args[0] is not None else op.fixed_args[1]\n                if isinstance(val, core.Constant):\n                    return cls(op.base_op(d1.val, val))\n\n            if op.base_op in [operation.RotateLeft, operation.RotateRight]:\n                if op.fixed_args[0] is None and op.fixed_args[1] is not None:\n                    assert len(input_diff) == 1\n                    d = input_diff[0]\n                    return cls(op.base_op(d.val, op.fixed_args[1]))\n                else:\n                    raise ValueError(msg)\n\n            if op.base_op in [operation.BvShl, operation.BvLshr]:\n                if op.fixed_args[0] is None and op.fixed_args[1] is not None:\n                    assert len(input_diff) == 1\n                    d = input_diff[0]\n                    return cls(op.base_op(d.val, op.fixed_args[1]))\n                else:\n                    raise ValueError(msg)\n\n            if op.base_op == operation.Extract:\n                if op.fixed_args[0] is None and op.fixed_args[1] is not None and op.fixed_args[2] is not None:\n                    assert len(input_diff) == 1\n                    d = input_diff[0]\n                    return cls(op.base_op(d.val, op.fixed_args[1], op.fixed_args[2]))\n                else:\n                    raise ValueError(msg)\n\n            if op.base_op == operation.Concat:\n                assert len(input_diff) == 1\n                d1 = input_diff[0]\n                if op.fixed_args[0] is not None:\n                    val = op.fixed_args[0]\n                    input_diff = [cls.from_pair(val, val), d1]\n                else:\n                    val = op.fixed_args[1]\n                    input_diff = [d1, cls.from_pair(val, val)]\n                return cls(op.base_op(*[d.val for d in input_diff]))\n\n            if op.base_op == operation.BvAdd:\n                assert len(input_diff) == 1\n                d = input_diff[0]\n                cte = op.fixed_args[0] if op.fixed_args[0] is not None else op.fixed_args[1]\n                from arxpy.differential import derivative\n                return derivative.XDCA(d, cte)\n            else:\n                raise ValueError(msg)\n\n        if hasattr(op, \"xor_derivative\"):\n            return op.xor_derivative(input_diff)\n\n        raise ValueError(msg)\narxpy/bitvector/core.py\nclass Constant(basic.Atom, Term):\n    \"\"\"Represent bit-vector constants.\n\n    Bit-vector constants are interpreted as unsigned integers in base 2,\n    that is, a bit-vector :math:`(x_{n-1}, \\dots, x_1, x_0)` represents\n    the non-negative integer :math:`x_0 + 2 x_1 + \\dots + 2^{n-1} x_{n-1}`.\n\n    Args:\n        val: the integer value.\n        width: the bit-width.\n\n    ::\n\n        >>> from arxpy.bitvector.core import Constant\n        >>> Constant(3, 12)\n        0x003\n        >>> Constant(0b11, 12)\n        0x003\n        >>> Constant(0x003, 12)\n        0x003\n        >>> Constant(3, 12).vrepr()\n        'Constant(0b000000000011, width=12)'\n\n    \"\"\"\n\n    def __int__(self):\n        return self.val\n\n    def __hash__(self):\n        return super().__hash__()\n\n    def __eq__(self, other):\n        \"\"\"Override == operator.\"\"\"\n        if isinstance(other, int):\n            return self.val == other\n        elif isinstance(other, Constant) and self.width == other.width:\n            return self.val == other.val\n        else:\n            return False\n\n    # def __index__(self):\n    #     \"\"\"Return an int to be used inside a slice [ : : ].\"\"\"\n    #     return self.int\n\n    def _hashable_content(self):\n        \"\"\"Return a tuple of information about self to compute its hash.\"\"\"\n        return self.val, self.width\n\n    @classmethod\n    def class_key(cls):\n        \"\"\"Return the key (identifier) of the class for sorting.\"\"\"\n        return 1, 0, cls.__name__\n\n    # end Integer\n\n    __slots__ = [\"_val\"]\n\n    def __new__(cls, val, width):\n        assert isinstance(val, int) and 0 <= val < 2 ** width\n        obj = Term.__new__(cls, width=width)\n        obj._val = val\n        return obj\n\n    def __bool__(self):\n        if self.width == 1:\n            return self == Constant(1, 1)\n        else:\n            raise AttributeError(\"only 1-bit constants implement bool()\")\n\n    @property\n    def val(self):\n        \"\"\"The integer represented by the bit-vector constant.\"\"\"\n        return self._val\n\n    @property\n    def formula_size(self):\n        \"\"\"The formula size of the constant.\"\"\"\n        def log2(n):\n            return int(math.ceil(math.log(n, 2)))\n\n        def bin_enc(n):\n            return 1 + log2(n + 1)\n\n        return 1 + log2(int(self) + 1) + bin_enc(self.width)\n\n    def bin(self):\n        \"\"\"Return the binary representation.\n\n            >>> from arxpy.bitvector.core import Constant\n            >>> print(Constant(3, 4).bin())\n            0b0011\n            >>> print(Constant(4, 6).bin())\n            0b000100\n\n        \"\"\"\n        width = self.width + 2  # 2 due to '0b'\n        return format(self.val, r'0=#{}b'.format(width))\n\n    def hex(self):\n        \"\"\"Return the hexadecimal representation.\n\n            >>> from arxpy.bitvector.core import Constant\n            >>> print(Constant(3, 4).hex())\n            0x3\n\n        \"\"\"\n        assert self.width % 4 == 0\n        width = (self.width // 4) + 2\n        return format(self.val, '0=#{}x'.format(width))\n\n    def oct(self):\n        \"\"\"Return the octal representation.\n\n            >>> from arxpy.bitvector.core import Constant\n            >>> print(Constant(4, 6).oct())\n            0o04\n\n        \"\"\"\n        assert self.width % 3 == 0\n        width = (self.width // 3) + 2\n        return format(self.val, '0=#{}o'.format(width))\narxpy/differential/characteristic.py\nclass BvCharacteristic(object):\n    \"\"\"Represent characteristics of bit-vector functions.\n\n    Given a bit-vector function `BvFunction` :math:`f`,\n    a characteristic is a trail of differences obtained by\n    propagating an input difference over :math:`f`.\n\n    In particular, a characteristic is composed of the\n    input difference and the output difference of each\n    non-linear operation.\n\n    This class manages symbolic characteristics,\n    where the input difference is given symbolically\n    and the intermediate differences are `Term`\n    that depend on the input difference.\n\n        >>> from arxpy.bitvector.core import Variable\n        >>> from arxpy.differential.difference import XorDiff, RXDiff\n        >>> from arxpy.differential.characteristic import BvCharacteristic\n        >>> from arxpy.primitives.primitives import BvFunction\n        >>> from arxpy.primitives.chaskey import ChaskeyPi\n        >>> issubclass(ChaskeyPi, BvFunction)\n        True\n        >>> ChaskeyPi.set_rounds(1)\n        >>> ch = BvCharacteristic(ChaskeyPi, XorDiff, [\"dv0\", \"dv1\", \"dv2\", \"dv3\"])\n        >>> ch.ssa  # doctest: +NORMALIZE_WHITESPACE\n        {'input_vars': (dv0, dv1, dv2, dv3),\n        'output_vars': (d7, d12, d13, d9),\n        'assignments': ((d0, dv0 + dv1), (d1, dv1 <<< 5), (d2, d0 ^ d1), (d3, d0 <<< 16), (d4, dv2 + dv3),\n        (d5, dv3 <<< 8), (d6, d4 ^ d5), (d7, d3 + d6), (d8, d6 <<< 13), (d9, d7 ^ d8), (d10, d2 + d4),\n        (d11, d2 <<< 7), (d12, d10 ^ d11), (d13, d10 <<< 16))}\n        >>> ch.input_diff\n        (XorDiff(dv0), XorDiff(dv1), XorDiff(dv2), XorDiff(dv3))\n        >>> ch.nonlinear_diffs # doctest: +NORMALIZE_WHITESPACE\n        OrderedDict([(XorDiff(d0), XDA(XorDiff(dv0), XorDiff(dv1))),\n        (XorDiff(d4), XDA(XorDiff(dv2), XorDiff(dv3))),\n        (XorDiff(d7), XDA(XorDiff(d0 <<< 16), XorDiff(d4 ^ (dv3 <<< 8)))),\n        (XorDiff(d10), XDA(XorDiff(d0 ^ (dv1 <<< 5)), XorDiff(d4)))])\n        >>> ch.output_diff # doctest: +NORMALIZE_WHITESPACE\n        [[XorDiff(d7), XorDiff(d7)],\n        [XorDiff(d12), XorDiff(d10 ^ ((d0 ^ (dv1 <<< 5)) <<< 7))],\n        [XorDiff(d13), XorDiff(d10 <<< 16)],\n        [XorDiff(d9), XorDiff(d7 ^ ((d4 ^ (dv3 <<< 8)) <<< 13))]]\n        >>> ch = BvCharacteristic(ChaskeyPi, RXDiff, [\"dv0\", \"dv1\", \"dv2\", \"dv3\"])\n        >>> ch.input_diff\n        (RXDiff(dv0), RXDiff(dv1), RXDiff(dv2), RXDiff(dv3))\n        >>> ch.nonlinear_diffs # doctest: +NORMALIZE_WHITESPACE\n        OrderedDict([(RXDiff(d0), RXDA(RXDiff(dv0), RXDiff(dv1))),\n        (RXDiff(d4), RXDA(RXDiff(dv2), RXDiff(dv3))),\n        (RXDiff(d7), RXDA(RXDiff(d0 <<< 16), RXDiff(d4 ^ (dv3 <<< 8)))),\n        (RXDiff(d10), RXDA(RXDiff(d0 ^ (dv1 <<< 5)), RXDiff(d4)))])\n        >>> ch.output_diff # doctest: +NORMALIZE_WHITESPACE\n        [[RXDiff(d7), RXDiff(d7)],\n        [RXDiff(d12), RXDiff(d10 ^ ((d0 ^ (dv1 <<< 5)) <<< 7))],\n        [RXDiff(d13), RXDiff(d10 <<< 16)],\n        [RXDiff(d9), RXDiff(d7 ^ ((d4 ^ (dv3 <<< 8)) <<< 13))]]\n\n    Attributes:\n        func: the `BvFunction`\n        diff_type: the `Difference` of the characteristic\n        input_diff: a list containing the input symbolic differences\n        nonlinear_diffs: an `collections.OrderedDict` mapping non-linear symbolic differences\n            to their corresponding `Derivative`\n        output_diff: a list, where the i-th element is a pair containing\n            the i-th output symbolic difference and its value\n    \"\"\"\n\n    def __init__(self, func, diff_type, input_diff_names, prefix=\"d\", initial_var2diff=None):\n        assert issubclass(func, primitives.BvFunction)\n        assert issubclass(diff_type, difference.Difference)\n\n        assert len(input_diff_names) == len(func.input_widths)\n        input_diff = []\n        for name, width in zip(input_diff_names, func.input_widths):\n            input_diff.append(diff_type(core.Variable(name, width)))\n        input_diff = tuple(input_diff)\n\n        self.func = func\n        self.diff_type = diff_type\n        self.input_diff = input_diff\n\n        # Propagate the input difference through the function\n\n        names = [d.val.name for d in self.input_diff]\n        ssa = self.func.ssa(names, id_prefix=prefix)\n        self.ssa = ssa\n        self._prefix = prefix\n        self._input_diff_names = input_diff_names\n\n        for var in ssa[\"output_vars\"]:\n            if isinstance(var, core.Constant):\n                raise ValueError(\"constant outputs (independent of the inputs) are not supported\")\n\n        var2diff = {}  # Variable to Difference\n        for var, diff in zip(ssa[\"input_vars\"], self.input_diff):\n            var2diff[var] = diff\n\n        if initial_var2diff is not None:\n            for var in initial_var2diff:\n                if str(var) in names:\n                    raise ValueError(\"the input differences cannot be replaced by initial_var2diff\")\n            var2diff.update(initial_var2diff)\n\n        self.nonlinear_diffs = collections.OrderedDict()\n        for var, expr in ssa[\"assignments\"]:\n            expr_args = []\n            for arg in expr.args:\n                if isinstance(arg, int):\n                    expr_args.append(arg)  # 'int' object has no attribute 'xreplace'\n                else:\n                    expr_args.append(arg.xreplace(var2diff))\n\n            if all(not isinstance(arg, diff_type) for arg in expr_args):\n                # symbolic computations with the key\n                var2diff[var] = expr\n                continue\n\n            if all(isinstance(arg, diff_type) for arg in expr_args):\n                der = self.diff_type.derivative(type(expr), expr_args)\n            else:\n                def contains_key_var(term):\n                    from sympy import basic\n                    for sub in basic.preorder_traversal(term):\n                        if sub in func.round_keys:\n                            return True\n                    else:\n                        return False\n\n                if type(expr) == operation.BvAdd and hasattr(func, 'round_keys') and \\\n                        all(isinstance(r, core.Variable) for r in func.round_keys) and \\\n                        any(contains_key_var(a) for a in expr_args):\n                    # temporary solution to Derivative(BvAddCte_k(x)) != Derivative(x + k)\n                    # with x a Diff and k a key variable\n                    keyed_indices = []\n                    for i, a in enumerate(expr_args):\n                        if contains_key_var(a):\n                            keyed_indices.append(i)\n                    if len(keyed_indices) != 1 or expr_args[keyed_indices[0]] not in func.round_keys:\n                        raise NotImplementedError(\"invalid expression: op={}, args={}\".format(\n                            type(expr).__name__, expr_args))\n                    # expr_args[keyed_indices[0]] replaced to the zero diff\n                    zero_diff = diff_type(core.Constant(0, expr_args[keyed_indices[0]].width))\n                    der = self.diff_type.derivative(type(expr), [expr_args[(keyed_indices[0] + 1) % 2], zero_diff])\n                elif hasattr(expr, \"xor_derivative\"):\n                    # temporary solution to operations containing a custom derivative\n                    input_diff_expr = []\n                    for i, arg in enumerate(expr_args):\n                        if isinstance(arg, diff_type):\n                            input_diff_expr.append(arg)\n                        else:\n                            assert isinstance(arg, core.Term)  # int arguments currently not supported\n                            input_diff_expr.append(diff_type.from_pair(arg, arg))\n                    der = self.diff_type.derivative(type(expr), input_diff_expr)\n                else:\n                    fixed_args = []\n                    for i, arg in enumerate(expr_args):\n                        if not isinstance(arg, diff_type):\n                            fixed_args.append(arg)\n                        else:\n                            fixed_args.append(None)\n                    new_op = extraop.make_partial_operation(type(expr), tuple(fixed_args))\n                    der = self.diff_type.derivative(new_op, [arg for arg in expr_args if isinstance(arg, diff_type)])\n\n            if isinstance(der, derivative.Derivative):\n                diff = self.diff_type(var)\n                var2diff[var] = diff\n                self.nonlinear_diffs[diff] = der\n            else:\n                var2diff[var] = der\n\n        self._var2diff = var2diff\n\n        self.output_diff = []\n        for var in ssa[\"output_vars\"]:\n            self.output_diff.append([self.diff_type(var), var2diff[var]])\n\n    def empirical_weight(self, input_diff, output_diff, pair_samples):\n        \"\"\"Return the empirical weight of a given differential.\n\n        Given a differential (a pair of input and output differences),\n        the differential probability is the fraction of input pairs\n        with the given input difference leading to output pairs\n        with the given output difference.\n\n        This method returns an approximation of the weight of the\n        differential probability by sampling a given number\n        of input pairs.\n\n        If no correct output pairs are found, `math.inf` is returned.\n\n            >>> from arxpy.bitvector.core import Constant\n            >>> from arxpy.differential.difference import XorDiff, RXDiff\n            >>> from arxpy.differential.characteristic import BvCharacteristic\n            >>> from arxpy.primitives.chaskey import ChaskeyPi\n            >>> ChaskeyPi.set_rounds(1)\n            >>> ch = BvCharacteristic(ChaskeyPi, XorDiff, [\"dv\" + str(i) for i in range(4)])\n            >>> zero, one = XorDiff(Constant(0, 32)), XorDiff(Constant(1, 32))\n            >>> ch.empirical_weight([zero, zero, zero, zero], [zero, zero, zero, zero], 100)\n            0.0\n            >>> ch.empirical_weight([zero, zero, zero, zero], [one, one, one, one], 100)\n            inf\n            >>> ch = BvCharacteristic(ChaskeyPi, RXDiff, [\"dv\" + str(i) for i in range(4)])\n            >>> zero, one = RXDiff(Constant(0, 32)), RXDiff(Constant(1, 32))\n            >>> 4 - 1 <= ch.empirical_weight([zero]*4, [zero]*4, 3 * 2**6) <= 8\n            True\n            >>> ch.empirical_weight([zero]*4, [one]*4, 3 * 2**6)\n            inf\n\n        \"\"\"\n        assert isinstance(input_diff, collections.abc.Sequence)\n        assert isinstance(output_diff, collections.abc.Sequence)\n        assert all(isinstance(d, difference.Difference) for d in input_diff)\n        assert all(isinstance(d, difference.Difference) for d in output_diff)\n        assert all(isinstance(d.val, core.Constant) for d in input_diff)\n        assert all(isinstance(d.val, core.Constant) for d in output_diff)\n\n        assert len(input_diff) == len(self.input_diff)\n        assert len(output_diff) == len(self.output_diff)\n        assert len(self.ssa[\"input_vars\"]) == len(input_diff)\n        assert len(self.ssa[\"output_vars\"]) == len(output_diff)\n\n        with context.Simplification(False):\n            input_widths = [d.val.width for d in self.input_diff]\n            if pair_samples >= 2**sum(input_widths):\n                iterators = [range(2 ** w) for w in input_widths]\n                list_pairs = []\n                for x in itertools.product(*iterators):\n                    pt = [core.Constant(x_i, w) for x_i, w in zip(x, input_widths)]\n                    other_pt = [diff.get_pair_element(pt[i]) for i, diff in enumerate(input_diff)]\n                    list_pairs.append([pt, other_pt])\n                pair_samples = len(list_pairs)\n                assert pair_samples == 2**sum(input_widths)\n            else:\n                list_pairs = []\n                for _ in range(pair_samples):\n                    pt = []\n                    other_pt = []\n                    for diff in input_diff:\n                        random_int = random.randrange(2 ** diff.val.width)\n                        random_bv = core.Constant(random_int, diff.val.width)\n                        pt.append(random_bv)\n                        other_pt.append(diff.get_pair_element(random_bv))\n                    list_pairs.append([pt, other_pt])\n\n            correct_pairs = 0\n\n            for index_input in range(pair_samples):\n                pt, other_pt = list_pairs[index_input]\n                ct = self.func(*pt)\n                other_ct = self.func(*other_pt)\n\n                assert all(isinstance(x, core.Constant) for x in ct), str(ct)\n                assert all(isinstance(x, core.Constant) for x in other_ct), str(other_ct)\n\n                for i, diff in enumerate(output_diff):\n                    # noinspection PyUnresolvedReferences\n                    if self.diff_type.from_pair(ct[i], other_ct[i]) != diff:\n                        break\n                else:\n                    correct_pairs += 1\n\n            if correct_pairs == 0:\n                weight = math.inf\n            else:\n                weight = abs(-math.log(correct_pairs * 1.0 / pair_samples, 2))\n\n        return weight\n\n    def _empirical_weight_distribution(self, cipher, input_diff, output_diff, pair_samples, key_samples,\n                                       precision=1, rk_output_diff=None):\n        # this function is not part of SingleKeyCh since it must be accessible\n        # for the encryption characteristic of RelatedKeyCh (which is a\n        # plain BvCharacteristic)\n        assert isinstance(input_diff, collections.abc.Sequence)\n        assert isinstance(output_diff, collections.abc.Sequence)\n        assert all(isinstance(d, difference.Difference) for d in input_diff)\n        assert all(isinstance(d, difference.Difference) for d in output_diff)\n        assert all(isinstance(d.val, core.Constant) for d in input_diff)\n        assert all(isinstance(d.val, core.Constant) for d in output_diff)\n\n        assert len(input_diff) == len(self.input_diff)\n        assert len(output_diff) == len(self.output_diff)\n        assert len(self.ssa[\"input_vars\"]) == len(input_diff)\n        assert len(self.ssa[\"output_vars\"]) == len(output_diff)\n\n        old_round_keys = self.func.round_keys\n\n        empirical_weights = collections.Counter()\n\n        if rk_output_diff is not None:\n            class RelatedFunc(self.func):\n                pass\n        else:\n            RelatedFunc = self.func\n\n        with context.Simplification(False):\n            input_widths = [d.val.width for d in self.input_diff]\n            if pair_samples >= 2**sum(input_widths):\n                iterators = [range(2 ** w) for w in input_widths]\n                list_pairs = []\n                for x in itertools.product(*iterators):\n                    pt = [core.Constant(x_i, w) for x_i, w in zip(x, input_widths)]\n                    other_pt = [diff.get_pair_element(pt[i]) for i, diff in enumerate(input_diff)]\n                    list_pairs.append([pt, other_pt])\n                pair_samples = len(list_pairs)\n                assert pair_samples == 2**sum(input_widths)\n            else:\n                list_pairs = []\n                for _ in range(pair_samples):\n                    pt = []\n                    other_pt = []\n                    for diff in input_diff:\n                        random_int = random.randrange(2 ** diff.val.width)\n                        random_bv = core.Constant(random_int, diff.val.width)\n                        pt.append(random_bv)\n                        other_pt.append(diff.get_pair_element(random_bv))\n                    list_pairs.append([pt, other_pt])\n\n            for _ in range(key_samples):\n                master_key = []\n                for width in cipher.key_schedule.input_widths:\n                    master_key.append(core.Constant(random.randrange(2 ** width), width))\n                self.func.round_keys = cipher.key_schedule(*master_key)\n                assert all(isinstance(rk, core.Constant) for rk in self.func.round_keys), str(self.func.round_keys)\n\n                if rk_output_diff is not None:\n                    RelatedFunc.round_keys = [d.get_pair_element(r) for r, d in zip(self.func.round_keys, rk_output_diff)]\n                    assert all(isinstance(rk, core.Constant) for rk in RelatedFunc.round_keys), str(RelatedFunc.round_keys)\n\n                correct_pairs = 0\n\n                for index_input in range(pair_samples):\n                    pt, other_pt = list_pairs[index_input]\n                    ct = self.func(*pt)\n                    other_ct = RelatedFunc(*other_pt)\n\n                    assert all(isinstance(x, core.Constant) for x in ct), str(ct)\n                    assert all(isinstance(x, core.Constant) for x in other_ct), str(other_ct)\n\n                    for i, diff in enumerate(output_diff):\n                        # noinspection PyUnresolvedReferences\n                        if self.diff_type.from_pair(ct[i], other_ct[i]) != diff:\n                            break\n                    else:\n                        correct_pairs += 1\n\n                if correct_pairs == 0:\n                    weight = math.inf\n                else:\n                    weight = abs(-math.log(correct_pairs * 1.0 / pair_samples, 2))\n                # weight = float((\"{0:.\"+str(precision)+\"f}\").format(weight))\n                weight = round(weight, precision)\n                empirical_weights[weight] += 1\n\n        self.func.round_keys = old_round_keys\n\n        return empirical_weights\n\n    def signature(self, ch_signature_type):\n        \"\"\"Return the signature of the characteristic.\n\n        The signature is a \"hash\" of the characteristic used for comparing.\n\n        For the type of the signature, see `ChSignatureType`.\n\n            >>> from arxpy.bitvector.core import Variable\n            >>> from arxpy.differential.difference import XorDiff\n            >>> from arxpy.differential.characteristic import BvCharacteristic, ChSignatureType\n            >>> from arxpy.primitives.primitives import BvFunction\n            >>> from arxpy.primitives.chaskey import ChaskeyPi\n            >>> issubclass(ChaskeyPi, BvFunction)\n            True\n            >>> ChaskeyPi.set_rounds(1)\n            >>> ch = BvCharacteristic(ChaskeyPi, XorDiff, [\"dv0\", \"dv1\", \"dv2\", \"dv3\"])\n            >>> ch.signature(ChSignatureType.Full)\n            [dv0, dv1, dv2, dv3, d0, d4, d7, d10]\n            >>> ch.signature(ChSignatureType.InputOutput)\n            [dv0, dv1, dv2, dv3, d7, d12, d13, d9]\n\n        \"\"\"\n        if ch_signature_type == ChSignatureType.Full:\n            return [d.val for d in self.input_diff] + [d.val for d in self.nonlinear_diffs]\n        elif ch_signature_type == ChSignatureType.InputOutput:\n            # sig = [d for d in self.input_diff]\n            sig_var = [d.val for d in self.input_diff]\n\n            for out_diff, _ in self.output_diff:\n                for aux_var in self._var2diff[out_diff.val].val.atoms(core.Variable):\n                    if aux_var not in sig_var:\n                        # sig.append(out_diff)\n                        sig_var.append(out_diff.val)\n                        break\n\n            return sig_var\n        else:\n            raise ValueError(\"invalid ch_signature_type: {}\".format(ch_signature_type))\n\n    def _to_dict(self):\n        dict_ch = {\n            \"ssa\": self.ssa,\n            \"input_diff\": self.input_diff,\n            \"output_diff\": self.output_diff,\n            \"nonlinear_diffs\": self.nonlinear_diffs,\n        }\n        return dict_ch\n\n    def __str__(self):\n        return pprint.pformat(self._to_dict(), width=100, compact=True)\narxpy/primitives/primitives.py\nclass Encryption(BvFunction):\n    \"\"\"Represent encryption functions.\n\n    An encryption function is a `BvFunction` that takes\n    the plaintext as input and returns the ciphertext\n    for some fixed key.\n    See `BvFunction` for more information.\n\n    Attributes:\n        round_keys: a list of `Term` representing the round keys\n\n    \"\"\"\n    round_keys = None\narxpy/bitvector/core.py\nclass Variable(basic.Atom, Term):\n    \"\"\"Represent bit-vector variables.\n\n    Args:\n        name: the name of the variable.\n        width: the bit-width.\n\n    ::\n\n        >>> from arxpy.bitvector.core import Variable\n        >>> Variable(\"x\", 12)\n        x\n        >>> Variable(\"x\", 12).vrepr()\n        \"Variable('x', width=12)\"\n\n    \"\"\"\n\n    def _hashable_content(self):\n        \"\"\"Return a tuple of information about self to compute hash.\"\"\"\n        return self.name, self.width\n\n    # def __call__(self, *args):\n    #     from sympy.core.function as function\n    #     return function.UndefinedFunction(self.name, self.width)(*args)\n\n    # end Symbol\n\n    __slots__ = ['_name']\n\n    def __new__(cls, name, width):\n        assert isinstance(name, str)\n        obj = Term.__new__(cls, width=width)\n        obj._name = name\n\n        return obj\n\n    @property\n    def name(self):\n        \"\"\"The name of the variable.\"\"\"\n        return self._name\n\n    @property\n    def formula_size(self):\n        \"\"\"The formula size of the variable.\"\"\"\n        def log2(n):\n            return int(math.ceil(math.log(n, 2)))\n\n        def bin_enc(n):\n            return 1 + log2(n + 1)\n\n        return 1 + bin_enc(self.width)\narxpy/differential/characteristic.py\nclass SingleKeyCh(BvCharacteristic):\n    \"\"\"Represent single-key characteristics of block ciphers.\n\n    A single-key characteristic of a `Cipher` is a `BvCharacteristic`\n    over the `Encryption` function of the cipher.\n\n    The plaintext differences start with the prefix ``\"dp\"``\n    and the non-linear differences start with the prefix ``\"dx\"``.\n\n        >>> from arxpy.bitvector.core import Variable\n        >>> from arxpy.differential.difference import XorDiff\n        >>> from arxpy.differential.characteristic import SingleKeyCh\n        >>> from arxpy.primitives.primitives import Cipher\n        >>> from arxpy.primitives import speck\n        >>> Speck32 = speck.get_Speck_instance(speck.SpeckInstance.speck_32_64)\n        >>> issubclass(Speck32, Cipher)\n        True\n        >>> Speck32.set_rounds(1)\n        >>> ch = SingleKeyCh(Speck32, XorDiff)\n        >>> ch .ssa  # doctest: +NORMALIZE_WHITESPACE\n        {'input_vars': (dp0, dp1), 'output_vars': (dx2, dx4),\n        'assignments': ((dx0, dp0 >>> 7), (dx1, dp1 + dx0), (dx2, dx1 ^ k0), (dx3, dp1 <<< 2), (dx4, dx2 ^ dx3))}\n        >>> ch.input_diff\n        (XorDiff(dp0), XorDiff(dp1))\n        >>> ch.nonlinear_diffs\n        OrderedDict([(XorDiff(dx1), XDA(XorDiff(dp1), XorDiff(dp0 >>> 7)))])\n        >>> ch.output_diff\n        [[XorDiff(dx2), XorDiff(dx1)], [XorDiff(dx4), XorDiff(dx1 ^ (dp1 <<< 2))]]\n\n    \"\"\"\n\n    def __init__(self, bv_cipher, diff_type):\n        assert issubclass(bv_cipher, primitives.Cipher)\n        assert issubclass(diff_type, difference.Difference)\n\n        rk = []\n        for i, width in enumerate(bv_cipher.key_schedule.output_widths):\n            rk.append(core.Variable(\"k\" + str(i), width))\n\n        class Encryption(bv_cipher.encryption):\n            round_keys = tuple(rk)\n\n        func = Encryption\n        num_inputs = len(func.input_widths)\n        input_diff_names = [\"dp\" + str(i) for i in range(num_inputs)]\n        prefix = \"dx\"\n        super().__init__(func, diff_type, input_diff_names, prefix)\n        self._cipher = bv_cipher\n\n    def empirical_weight(self, input_diff, output_diff, pair_samples, key_samples,\n                         precision=1, rk_diffs=None):\n        \"\"\"Return the empirical weight distribution of a given differential.\n\n        This method returns a `collections.Counter` storing the distribution of\n        differential probability weights over the given number of keys.\n\n        The weights are rounded to the given number of precision\n        digits after the decimal point.\n\n        See also `BvCharacteristic.empirical_weight`.\n\n            >>> from arxpy.bitvector.core import Constant\n            >>> from arxpy.differential.difference import XorDiff\n            >>> from arxpy.differential.characteristic import SingleKeyCh\n            >>> from arxpy.primitives import speck\n            >>> Speck32 = speck.get_Speck_instance(speck.SpeckInstance.speck_32_64)\n            >>> Speck32.set_rounds(1)\n            >>> ch = SingleKeyCh(Speck32, XorDiff)\n            >>> zero, one = XorDiff(Constant(0, 16)), XorDiff(Constant(1, 16))\n            >>> ch.empirical_weight([zero, zero], [zero, zero], 100, 10)\n            Counter({0.0: 10})\n            >>> ch.empirical_weight([zero, zero], [one, one], 100, 10)\n            Counter({inf: 10})\n\n        \"\"\"\n        return self._empirical_weight_distribution(self._cipher, input_diff, output_diff, pair_samples, key_samples,\n                                                   precision, rk_diffs)\narxpy/differential/characteristic.py\nclass ChSignatureType(enum.Enum):\nclass BvCharacteristic(object):\n            class RelatedFunc(self.func):\nclass SingleKeyCh(BvCharacteristic):\n        class Encryption(bv_cipher.encryption):\nclass RelatedKeyCh(object):\n        class Encryption(bv_cipher.encryption):\n    def __init__(self, func, diff_type, input_diff_names, prefix=\"d\", initial_var2diff=None):\n                def contains_key_var(term):\n    def empirical_weight(self, input_diff, output_diff, pair_samples):\n    def _empirical_weight_distribution(self, cipher, input_diff, output_diff, pair_samples, key_samples,\n                                       precision=1, rk_output_diff=None):\n    def signature(self, ch_signature_type):\n    def _to_dict(self):\n    def __str__(self):\n    def __init__(self, bv_cipher, diff_type):\n    def empirical_weight(self, input_diff, output_diff, pair_samples, key_samples,\n                         precision=1, rk_diffs=None):\n    def __init__(self, bv_cipher, diff_type):\n    def empirical_weight(self, key_input_diff, key_output_diff, key_samples,\n                         enc_input_diff, enc_output_diff, enc_samples, precision=1):\n    def signature(self, ch_signature_type):\n    def _to_dict(self):\n    def __str__(self):\narxpy/differential/difference.py\nclass RXDiff(Difference):\n    \"\"\"Represent rotational-XOR (RX) differences.\n\n    The pair ``(x, (x <<< 1) ^ d)`` has RX difference ``d``.\n    In other words,  the RX difference of two `Term` ``x`` and ``y``\n    is defined as ``(x <<< 1) ^ y``.\n\n    See `Difference` for more information.\n\n        >>> from arxpy.bitvector.core import Constant, Variable\n        >>> from arxpy.differential.difference import RXDiff\n        >>> x, y = Constant(0b000, 3), Constant(0b000, 3)\n        >>> alpha = RXDiff.from_pair(x, y)\n        >>> alpha\n        RXDiff(0b000)\n        >>> alpha.get_pair_element(x)\n        0b000\n        >>> x, y = Constant(0b000, 3), Constant(0b001, 3)\n        >>> alpha = RXDiff.from_pair(x, y)\n        >>> alpha\n        RXDiff(0b001)\n        >>> alpha.get_pair_element(x)\n        0b001\n        >>> k = Variable(\"k\", 8)\n        >>> alpha = RXDiff.from_pair(k, k)\n        >>> alpha\n        RXDiff(k ^ (k <<< 1))\n        >>> alpha.get_pair_element(k)\n        k\n    \"\"\"\n\n    diff_op = RXOp\n    inv_diff_op = RXInvOp\n\n    @classmethod\n    def derivative(cls, op, input_diff):\n        \"\"\"Return the derivative of ``op`` at the point ``input_diff``.\n\n        See `Difference.derivative` for more information.\n\n            >>> from arxpy.bitvector.core import Variable, Constant\n            >>> from arxpy.bitvector.operation import BvAdd, BvXor, RotateLeft\n            >>> from arxpy.bitvector.extraop import make_partial_operation\n            >>> from arxpy.differential.difference import RXDiff\n            >>> d1, d2 = RXDiff(Variable(\"d1\", 8)), RXDiff(Variable(\"d2\", 8))\n            >>> RXDiff.derivative(BvXor, [d1, d2])\n            RXDiff(d1 ^ d2)\n            >>> Xor1 = make_partial_operation(BvXor, tuple([None, Constant(1, 8)]))\n            >>> RXDiff.derivative(Xor1, d1)\n            RXDiff(0x03 ^ d1)\n            >>> Rotate1 = make_partial_operation(RotateLeft, tuple([None, 1]))\n            >>> RXDiff.derivative(Rotate1, d1)\n            RXDiff(d1 <<< 1)\n            >>> RXDiff.derivative(BvAdd, [d1, d2])\n            RXDA(RXDiff(d1), RXDiff(d2))\n\n        \"\"\"\n        input_diff = _tuplify(input_diff)\n        assert len(input_diff) == sum(op.arity)\n\n        msg = \"invalid arguments: op={}, input_diff={}\".format(\n            op.__name__,\n            [d.vrepr() if isinstance(d, core.Term) else d for d in input_diff])\n\n        if not all(isinstance(diff, cls) for diff in input_diff):\n            raise ValueError(msg)\n\n        if op == operation.BvNot:\n            return input_diff[0]\n\n        if op == operation.BvXor:\n            return cls(op(*[d.val for d in input_diff]))\n\n        if op == operation.BvAdd:\n            from arxpy.differential import derivative\n            return derivative.RXDA(input_diff)\n\n        # Concact, BvSub\n\n        if issubclass(op, extraop.PartialOperation):\n            if op.base_op == operation.BvXor:\n                assert len(input_diff) == 1\n                d1 = input_diff[0]\n                val = op.fixed_args[0] if op.fixed_args[0] is not None else op.fixed_args[1]\n                d2 = cls.from_pair(val, val)\n                input_diff = [d1, d2]\n                return cls(op.base_op(*[d.val for d in input_diff]))\n\n            if op.base_op in [operation.RotateLeft, operation.RotateRight]:\n                if op.fixed_args[0] is None and op.fixed_args[1] is not None:\n                    assert len(input_diff) == 1\n                    d = input_diff[0]\n                    return cls(op.base_op(d.val, op.fixed_args[1]))\n                else:\n                    raise ValueError(msg)\n\n            # BvShl, Extract\n\n        if hasattr(op, \"rx_derivative\"):\n            return op.rx_derivative(input_diff)\n\n        raise ValueError(msg)\narxpy/primitives/primitives.py\nclass BvFunction(object):\n    \"\"\"Represent (iterated) fixed-width bit-vector functions.\n\n    A `BvFunction` takes fixed-width `Constant` operands and return a\n    tuple of fixed-width `Constant`. An iterated bit-vector function\n    contains a subroutine that is iterated a certain number of *rounds*,\n    which can be changed using `set_rounds`.\n\n    Similar to `Operation`, `BvFunction` is evaluated\n    using the operator ``()`` and provides *Automatic Constant Conversion*.\n    Note that `BvFunction` only accepts `Constant` operands and\n    always return a tuple, as opposed to `Operation` that accepts\n    `Term` and scalar operands and returns a single `Term`.\n\n        >>> from arxpy.primitives.primitives import BvFunction\n        >>> from arxpy.primitives.chaskey import ChaskeyPi\n        >>> issubclass(ChaskeyPi, BvFunction)\n        True\n        >>> ChaskeyPi(0, 0, 0, 0)  # automatic conversion from int to Constant\n        (0x00000000, 0x00000000, 0x00000000, 0x00000000)\n\n    Attributes:\n        input_widths: a list containing the widths of the inputs\n        output_widths: a list containing the widths of the outputs\n        rounds: the number of iterations\n\n    \"\"\"\n    input_widths = None\n    output_widths = None\n    rounds = None\n\n    def __new__(cls, *args, **options):\n        if len(cls.input_widths) != len(args):\n            raise ValueError(\"{} requires {} inputs but {} were given: {}\".format(\n                cls.__name__, len(cls.input_widths), len(args), args))\n        newargs = []\n        for arg, width in zip(args, cls.input_widths):\n            newargs.append(core.bitvectify(arg, width))\n        args = newargs\n\n        if all(isinstance(arg, core.Constant) for arg in args) or \\\n                options.pop(\"symbolic_inputs\", False):\n            result = cls.eval(*args)\n        else:\n            raise TypeError(\"expected bit-vector constant arguments\")\n\n        assert isinstance(result, collections.abc.Sequence)\n        assert len(cls.output_widths) == len(result)\n\n        output = []\n        for r, width in zip(result, cls.output_widths):\n            output.append(core.bitvectify(r, width))\n\n        return tuple(output)\n\n    @classmethod\n    def eval(cls, *args):\n        \"\"\"Evaluate the function (internal method).\"\"\"\n        raise NotImplementedError(\"subclasses need to override this method\")\n\n    @classmethod\n    def set_rounds(cls, new_rounds):\n        \"\"\"Change the number of rounds and adjust the input/output widths.\"\"\"\n        raise NotImplementedError(\"subclasses need to override this method\")\n\n    # noinspection PyArgumentList\n    @classmethod\n    def ssa(cls, input_names, id_prefix):\n        \"\"\"Return a static single assignment program representing the function.\n\n        Args:\n            input_names: the names  for the input variables\n            id_prefix: the prefix to denote the intermediate variables\n\n        Return:\n            : a dictionary with three keys\n\n            - *input_vars*: a list of `Variable` representing the inputs\n            - *output_vars*: a list of `Variable` representing the outputs\n            - *assignments*: an ordered sequence of pairs\n              (`Variable`, `Operation`) representing each assignment\n              of the SSA program.\n\n        ::\n\n                >>> from arxpy.primitives.chaskey import ChaskeyPi\n                >>> ChaskeyPi.set_rounds(1)\n                >>> ChaskeyPi.ssa([\"v0\", \"v1\", \"v2\", \"v3\"], \"x\")  # doctest: +NORMALIZE_WHITESPACE\n                {'input_vars': (v0, v1, v2, v3),\n                'output_vars': (x7, x12, x13, x9),\n                'assignments': ((x0, v0 + v1), (x1, v1 <<< 5), (x2, x0 ^ x1), (x3, x0 <<< 16), (x4, v2 + v3),\n                (x5, v3 <<< 8), (x6, x4 ^ x5), (x7, x3 + x6), (x8, x6 <<< 13), (x9, x7 ^ x8), (x10, x2 + x4),\n                (x11, x2 <<< 7), (x12, x10 ^ x11), (x13, x10 <<< 16))}\n\n        \"\"\"\n        input_vars = []\n        for name, width in zip(input_names, cls.input_widths):\n            input_vars.append(core.Variable(name, width))\n        input_vars = tuple(input_vars)\n\n        table = context.MemoizationTable(id_prefix=id_prefix)\n\n        with context.Memoization(table):\n            # noinspection PyArgumentList\n            output_vars = cls(*input_vars, symbolic_inputs=True)\n\n        ssa_dict = {\n            \"input_vars\": input_vars,\n            \"output_vars\": output_vars,\n            \"assignments\": tuple(table.items())\n        }\n\n        for var, expr in ssa_dict[\"assignments\"]:\n            for arg in expr.args:\n                if isinstance(arg, operation.Operation):\n                    raise ValueError(\"assignment {} <- {} was not decomposed\".format(var, expr))\n\n        to_delete = []\n        vars_needed = set()\n        for var in output_vars:\n            vars_needed.add(var)\n        for var, expr in reversed(ssa_dict[\"assignments\"]):\n            if var in vars_needed:\n                for arg in expr.atoms(core.Variable):\n                    vars_needed.add(arg)\n            else:\n                to_delete.append((var, expr))\n                # raise ValueError(\"assignment {} <- {} is redundant in \\n{}\".format(var, expr, ssa_dict))\n\n        if len(to_delete) > 0:\n            import warnings\n            warnings.warn(\"removing redundant assignments {} in \\n{}\".format(to_delete, ssa_dict))\n            ssa_dict[\"assignments\"] = list(ssa_dict[\"assignments\"])\n            for assignment in to_delete:\n                ssa_dict[\"assignments\"].remove(assignment)\n            ssa_dict[\"assignments\"] = tuple(ssa_dict[\"assignments\"])\n\n        return ssa_dict\narxpy/primitives/primitives.py\nclass KeySchedule(BvFunction):\n    \"\"\"Represent key schedule functions.\n\n    A key schedule function is a `BvFunction` that takes\n    the masterkey as input and returns the round keys.\n    See `BvFunction` for more information.\n    \"\"\"\narxpy/primitives/primitives.py\nclass Cipher(object):\n    \"\"\"Represent (iterated) block ciphers.\n\n    A (iterated) block cipher consists of `KeySchedule` function\n    that computes round keys from a master key and an `Encryption`\n    function that computes a ciphertext from a given plaintext\n    and the round keys.\n\n    Given a ``cipher``, it can be evaluated with the operator ``()``\n    by passing it as arguments the plaintext and the master key,\n    that is, ``cipher(plaintext, masterkey)`` returns the ciphertext.\n\n        >>> from arxpy.primitives.primitives import Cipher\n        >>> from arxpy.primitives import speck\n        >>> Speck32 = speck.get_Speck_instance(speck.SpeckInstance.speck_32_64)\n        >>> issubclass(Speck32, Cipher)\n        True\n        >>> plaintext = [0, 0]\n        >>> masterkey = [0, 0, 0, 0]\n        >>> Speck32(plaintext, masterkey)\n        (0x2bb9, 0xc642)\n\n    Attributes:\n        key_schedule: the `KeySchedule` function of the cipher\n        encryption: the `Encryption` function of the cipher\n\n    \"\"\"\n    key_schedule = None\n    encryption = None\n    rounds = None\n\n    _minimum_rounds = 1  # for testing\n\n    def __new__(cls, plaintext, masterkey, **options):\n        assert isinstance(plaintext, collections.abc.Sequence)\n        assert isinstance(masterkey, collections.abc.Sequence)\n        assert cls.rounds >= cls._minimum_rounds\n\n        previous_round_keys = cls.encryption.round_keys\n\n        round_keys = cls.key_schedule(*masterkey, **options)\n        cls.encryption.round_keys = round_keys\n        result = cls.encryption(*plaintext, **options)\n\n        cls.encryption.round_keys = previous_round_keys\n\n        return result\n\n    @classmethod\n    def set_rounds(cls, new_rounds):\n        \"\"\"Change the number of rounds and adjust the input/output widths.\"\"\"\n        raise NotImplementedError(\"subclasses need to override this method\")\n", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "length": 5302, "dataset": "repobench-p", "language": "python", "all_classes": null, "_id": "348e33db9dd7512c0d821c5d1fc6a5b74a412a1e9be012f7"}
{"input": "import android.app.Activity;\nimport android.graphics.BitmapFactory;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.SubMenu;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Toast;\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.protyposis.android.spectaculum.SpectaculumView;\nimport net.protyposis.android.spectaculum.effects.Parameter;\nimport net.protyposis.android.spectaculum.effects.ImmersiveSensorNavigation;\nimport net.protyposis.android.spectaculum.effects.ContrastBrightnessAdjustmentEffect;\nimport net.protyposis.android.spectaculum.effects.EffectException;\nimport net.protyposis.android.spectaculum.effects.FlowAbsSubEffect;\nimport net.protyposis.android.spectaculum.effects.QrMarkerEffect;\nimport net.protyposis.android.spectaculum.effects.Effect;\nimport net.protyposis.android.spectaculum.effects.FlipEffect;\nimport net.protyposis.android.spectaculum.effects.FlowAbsEffect;\nimport net.protyposis.android.spectaculum.effects.KernelBlurEffect;\nimport net.protyposis.android.spectaculum.effects.KernelEdgeDetectEffect;\nimport net.protyposis.android.spectaculum.effects.KernelEmbossEffect;\nimport net.protyposis.android.spectaculum.effects.KernelGaussBlurEffect;\nimport net.protyposis.android.spectaculum.effects.KernelSharpenEffect;\nimport net.protyposis.android.spectaculum.effects.NoEffect;\nimport net.protyposis.android.spectaculum.effects.SimpleToonEffect;\nimport net.protyposis.android.spectaculum.effects.SobelEffect;\nimport net.protyposis.android.spectaculum.effects.ImmersiveTouchNavigation;\nimport net.protyposis.android.spectaculum.effects.StackEffect;\nimport net.protyposis.android.spectaculum.effects.WatermarkEffect;\nimport net.protyposis.android.spectaculum.gles.GLUtils;\nimport net.protyposis.android.spectaculum.effects.ColorFilterEffect;\nimport net.protyposis.android.spectaculum.effects.ImmersiveEffect;\nimport net.protyposis.android.spectaculumdemo.testeffect.InterlaceEffect;\n/*\n * Copyright 2014 Mario Guggenberger <mg@protyposis.net>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.protyposis.android.spectaculumdemo;\n\n\n\n\n/**\n * Created by Mario on 18.07.2014.\n *\n * Helper class for easy effect handling in the various Spectaculum views in this demo.\n * Provides a list of effects for the actionbar and displays a parameter control panel for\n * selected effects with parameters that the demo user can player play with.\n */\npublic class EffectManager implements SpectaculumView.EffectEventListener, Effect.Listener {\n\n    private Activity mActivity;\n    private ViewGroup mParameterListView;\n    private EffectParameterListAdapter mParameterListAdapter;\n    private MenuItem mParameterToggleMenuItem;\n    private SpectaculumView mSpectaculumView;\n    private List<Effect> mEffects;\n    private Effect mSelectedEffect;\n    private ImmersiveSensorNavigation mImmersiveSensorNavigation;", "context": "Spectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/NoEffect.java\npublic class NoEffect extends ShaderEffect {\n\n    public NoEffect() {\n        super(\"None\");\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureShaderProgram();\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/StackEffect.java\npublic class StackEffect extends BaseEffect {\n\n    private List<Effect> mEffects;\n    private Framebuffer mFramebuffer;\n\n    public StackEffect(String name) {\n        super(name);\n        mEffects = new ArrayList<>();\n    }\n\n    public StackEffect(String name, Effect... effects) {\n        this(name);\n        addEffects(effects);\n    }\n\n    public StackEffect() {\n        this((String)null);\n    }\n\n    public StackEffect(Effect... effects) {\n        this(null, effects);\n    }\n\n    public void addEffects(Effect... effects) {\n        Collections.addAll(mEffects, effects);\n    }\n\n    @Override\n    public void init(int width, int height) {\n        // Create an internal framebuffer which is required to apply a sequence of effects\n        mFramebuffer = new Framebuffer(width, height);\n\n        setEventBlocking(true);\n\n        // Initialize all effects\n        for (Effect e : mEffects) {\n            e.init(width, height);\n\n            // Add effect parameters\n            for(Parameter p : e.getParameters()) {\n                addParameter(p);\n            }\n        }\n\n        setEventBlocking(false);\n\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        Iterator<Effect> i = mEffects.iterator();\n\n        /*\n         * The first source texture must always be the passed in texture, the last output framebuffer\n         * must always be the passed in target framebuffer. In between, we need to switch source\n         * textures and target framebuffers between the passed in external framebuffer and the internal\n         * framebuffer, because we cannot read and write to the same framebuffer in one render pass.\n         * If the number of effects is even, we start by writing the internal framebuffer, else we\n         * start with the external framebuffer.\n         */\n        Framebuffer internalFB = mFramebuffer;\n        Framebuffer externalFB = target;\n        boolean useInternalFB = mEffects.size() % 2 == 0; // keeps track of which framebuffer to use as target\n\n        while(i.hasNext()) {\n            Effect e = i.next();\n\n            if(i.hasNext()) {\n                e.apply(source, useInternalFB ? internalFB : externalFB);\n                source = useInternalFB ? internalFB.getTexture() : externalFB.getTexture();\n                useInternalFB = !useInternalFB; // switch framebuffer flag\n            } else {\n                // Last effect; always write result to the target framebuffer\n                e.apply(source, target);\n            }\n        }\n    }\n}\nSpectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveSensorNavigation.java\npublic class ImmersiveSensorNavigation implements SensorEventListener {\n\n    private static final String TAG = ImmersiveSensorNavigation.class.getSimpleName();\n\n    private Context mContext;\n    private ImmersiveEffect mEffect;\n    private BooleanParameter mParameter;\n    private SensorManager mSensorManager;\n    private Sensor mSensor;\n    private boolean mActive;\n    private float[] mRotationMatrix = new float[16];\n    private float[] mRemappedRotationMatrix = new float[16];\n    private float[] mInitialRotationMatrix = null;\n\n    /**\n     * Creates a sensor navigation instance for the immersive effect.\n     * @param context context providing the sensor manager\n     * @throws RuntimeException if no rotation sensor is available\n     */\n    public ImmersiveSensorNavigation(Context context) throws RuntimeException {\n        mContext = context;\n\n        // Get sensor\n        mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);\n        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR);\n\n        if(mSensor == null) {\n            throw new RuntimeException(\"No rotation sensor available\");\n        }\n\n        // Make a UI handler for activation state toggling\n        final Handler h = new Handler();\n\n        // Create an effect parameter to toggle the sensor navigation on/off\n        mParameter = new BooleanParameter(\"SensorNav\", false, new BooleanParameter.Delegate() {\n            @Override\n            public void setValue(final Boolean value) {\n                // Activate/deactivate on UI thread\n                // Parameters are usually set on the GL thread, so we need to transfer this back to the UI thread\n                h.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        mActive = value;\n                        if(mActive) {\n                            activate();\n                        } else {\n                            deactivate();\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Attaches to the effect and adds parameter to toggle sensor navigation on/off.\n     * @param effect the effect to attach sensor navigation to\n     * @throws RuntimeException thrown if there is already an effect attached\n     */\n    public void attachTo(ImmersiveEffect effect) throws RuntimeException {\n        if(mEffect != null) {\n            throw new RuntimeException(\"Previous effect is still attached, call detach() first\");\n        }\n        mEffect = effect;\n        mEffect.addParameter(mParameter);\n    }\n\n    /**\n     * Detaches sensor navigation from an effect.\n     */\n    public void detach() {\n        mEffect.removeParameter(mParameter);\n        mEffect = null;\n    }\n\n    /**\n     * Activates sensor input.\n     */\n    public void activate() {\n        mSensorManager.registerListener(this, mSensor, SensorManager.SENSOR_DELAY_UI);\n        mActive = true;\n    }\n\n    /**\n     * Deactivates sensor input. Should be called when pausing a fragment or activity.\n     */\n    public void deactivate() {\n        mSensorManager.unregisterListener(this);\n        mInitialRotationMatrix = null; // reset matrix so it reinits on next activation\n        mActive = false;\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if(mEffect != null && mActive) {\n            // TODO understand those sensor coordinate spaces\n            // TODO find out how the sensor rotation can be mapped to the sphere shader correctly\n            // TODO should we store the initial rotation value to set the zero rotation point to the current phone rotation?\n\n            // Get the rotation matrix from the sensor\n            SensorManager.getRotationMatrixFromVector(mRotationMatrix, event.values);\n\n            // When the first sensor data comes in, we set the initial rotation matrix as\n            // \"zero rotation point\" to be able to calculate the relative rotation from the initial\n            // device rotation, instead of the absolute rotation from true north.\n            // Later, we subtract the initial rotation from the rotation matrix to get the relative rotation\n            if(mInitialRotationMatrix == null) {\n                mInitialRotationMatrix = new float[16];\n                // Matrix subtraction works by multiplying the inverse (Mb - Ma == inv(Ma) * Mb),\n                // so we directly store the inverse\n                Matrix.invertM(mInitialRotationMatrix, 0, mRotationMatrix, 0);\n            }\n\n            // Remove initial rotation\n            Matrix.multiplyMM(mRotationMatrix, 0, mInitialRotationMatrix, 0, mRotationMatrix, 0);\n\n            // Some axes seem like they need to be exchanged\n            Matrix.invertM(mRemappedRotationMatrix, 0, mRotationMatrix, 0);\n            // FIXME this does not seem to remap axes at all!?\n            //SensorManager.remapCoordinateSystem(mRotationMatrix, SensorManager.AXIS_X, SensorManager.AXIS_Z, mRemappedRotationMatrix);\n\n            // Debug output\n            //float[] orientation = new float[3];\n            //SensorManager.getOrientation(mRemappedRotationMatrix, orientation);\n            //debugOutputOrientationInDegree(orientation);\n\n            // Update effect and thus the viewport too\n            mEffect.setRotationMatrix(mRemappedRotationMatrix);\n        }\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n\n    }\n\n    private void debugOutputOrientationInDegree(float[] orientation) {\n        float azimuth = (float) Math.toDegrees(orientation[0]); // -z\n        float pitch = (float) Math.toDegrees(orientation[1]); // x\n        float roll = (float) Math.toDegrees(orientation[2]); // y\n        Log.d(TAG, azimuth + \", \" + pitch + \", \" + roll);\n    }\n}\nSpectaculum-Effect-FlowAbs/src/main/java/net/protyposis/android/spectaculum/effects/FlowAbsSubEffect.java\npublic abstract class FlowAbsSubEffect extends BaseEffect {\n\n    protected FlowAbsEffect mFlowAbsEffect;\n\n    FlowAbsSubEffect(String name) {\n        super(name);\n    }\n\n    FlowAbsSubEffect() {\n    }\n\n    @Override\n    public void init(int width, int height) {\n        if(!mFlowAbsEffect.isInitialized()) {\n            mFlowAbsEffect.init(width, height);\n        }\n    }\n\n    FlowAbsSubEffect init(FlowAbsEffect flowAbsEffect) {\n        mFlowAbsEffect = flowAbsEffect;\n        return this;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/SobelEffect.java\npublic class SobelEffect extends ShaderEffect {\n\n    private float mLow, mHigh;\n    private float mR, mG, mB;\n\n    public SobelEffect() {\n        super(\"Sobel Edge Detect\");\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final TextureSobelShaderProgram sobelShader = new TextureSobelShaderProgram();\n\n        mLow = 0.3f;\n        mHigh = 0.8f;\n        mR = 0.0f;\n        mG = 1.0f;\n        mB = 0.0f;\n\n        addParameter(new FloatParameter(\"Low\", 0.0f, 1.0f, mLow, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mLow = value;\n                sobelShader.setThreshold(mLow, mHigh);\n            }\n        }));\n        addParameter(new FloatParameter(\"High\", 0.0f, 1.0f, mHigh, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mHigh = value;\n                sobelShader.setThreshold(mLow, mHigh);\n            }\n        }));\n        addParameter(new FloatParameter(\"Red\", 0.0f, 1.0f, mR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mR = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n        addParameter(new FloatParameter(\"Green\", 0.0f, 1.0f, mG, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mG = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n        addParameter(new FloatParameter(\"Blue\", 0.0f, 1.0f, mB, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mB = value;\n                sobelShader.setColor(mR, mG, mB);\n            }\n        }));\n\n        return sobelShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/gles/GLUtils.java\npublic class GLUtils {\n\n    private static final String TAG = GLUtils.class.getSimpleName();\n\n    public static boolean HAS_GLES30;\n    public static boolean HAS_GL_OES_texture_half_float;\n    public static boolean HAS_GL_OES_texture_float;\n    public static boolean HAS_FLOAT_FRAMEBUFFER_SUPPORT;\n    public static boolean HAS_GPU_TEGRA;\n\n    /**\n     * Sets the static feature flags. Needs to be called from a GLES context.\n     */\n    public static void init() {\n        HAS_GLES30 = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;\n        HAS_GL_OES_texture_half_float = checkExtension(\"GL_OES_texture_half_float\");\n        HAS_GL_OES_texture_float = checkExtension(\"GL_OES_texture_float\");\n        HAS_GPU_TEGRA = GLES20.glGetString(GLES20.GL_RENDERER).toLowerCase().contains(\"tegra\");\n\n        /* Try to create a framebuffer with an attached floating point texture. If this fails,\n         * the device does not support floating point FB attachments and needs to fall back to\n         * byte textures ... and possibly deactivate features that demand FP textures.\n         */\n        if(HAS_GL_OES_texture_half_float || HAS_GL_OES_texture_float) {\n            try {\n                // must be set to true before the check, otherwise the fallback kicks in\n                HAS_FLOAT_FRAMEBUFFER_SUPPORT = true;\n                new Framebuffer(8, 8);\n            } catch (RuntimeException e) {\n                Log.w(TAG, \"float framebuffer test failed\");\n                HAS_FLOAT_FRAMEBUFFER_SUPPORT = false;\n                GLUtils.clearError();\n            }\n        }\n    }\n\n    /**\n     * Checks if the system supports OpenGL ES 2.0.\n     */\n    public static boolean isGlEs2Supported(Context context) {\n        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n        ConfigurationInfo configurationInfo = activityManager.getDeviceConfigurationInfo();\n        return configurationInfo != null && configurationInfo.reqGlEsVersion >= 0x20000;\n    }\n\n    private static void checkError(String operation, boolean throwException) {\n        int errorCount = 0;\n        int error;\n        String msg = null;\n\n        while((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {\n            msg = \"GL ERROR \" + String.format(\"0x%X\", error) + \" @ \" + operation;\n            Log.e(TAG, msg);\n            errorCount++;\n        }\n\n        if(throwException && errorCount > 0) {\n            throw new RuntimeException(msg);\n        }\n    }\n\n    public static void checkError(String operation) {\n        checkError(operation, true);\n    }\n\n    public static void clearError() {\n        checkError(\"error clearance\", false);\n    }\n\n    public static String[] getExtensions() {\n        String extensionsString = GLES20.glGetString(GLES20.GL_EXTENSIONS);\n        if(extensionsString != null) {\n            return extensionsString.split(\" \");\n        }\n        return new String[0];\n    }\n\n    /**\n     * Checks if an extension is supported.\n     */\n    public static boolean checkExtension(String query) {\n        for(String ext : getExtensions()) {\n            if(ext.equals(query)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void printSysConfig() {\n        for(String ext : GLUtils.getExtensions()) {\n            Log.d(TAG, ext);\n        }\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_SHADING_LANGUAGE_VERSION));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_VENDOR));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_RENDERER));\n        Log.d(TAG, GLES20.glGetString(GLES20.GL_VERSION));\n    }\n\n    public static Bitmap getFrameBuffer(int width, int height) {\n        // read pixels from GLES context\n        long startTime = SystemClock.elapsedRealtime();\n        ByteBuffer buffer = ByteBuffer.allocateDirect(width * height * 4).order(ByteOrder.LITTLE_ENDIAN);\n        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, buffer);\n        GLUtils.checkError(\"glReadPixels\");\n        buffer.rewind();\n        Log.d(TAG, \"glReadPixels \" + (SystemClock.elapsedRealtime() - startTime) + \"ms\");\n\n        // transfer pixels to bitmap\n        Bitmap bmp1 = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        bmp1.copyPixelsFromBuffer(buffer);\n\n        // horizontally flip bitmap to make it upright, since GL origin is at bottom left\n        android.graphics.Matrix matrix = new android.graphics.Matrix();\n        matrix.setRotate(180);\n        matrix.postScale(-1, 1);\n        Bitmap bmp2 = Bitmap.createBitmap(bmp1, 0, 0, bmp1.getWidth(), bmp1.getHeight(), matrix, true);\n        bmp1.recycle();\n        Log.d(TAG, \"glReadPixels+rotate \" + (SystemClock.elapsedRealtime() - startTime) + \"ms\");\n\n        return bmp2;\n    }\n\n    public static boolean saveBitmapToFile(Bitmap bmp, File file) {\n        try {\n            BufferedOutputStream bos = null;\n            try {\n                bos = new BufferedOutputStream(new FileOutputStream(file));\n\n                // compress to file\n                bmp.compress(Bitmap.CompressFormat.PNG, 90, bos);\n            } finally {\n                if (bos != null) bos.close();\n            }\n            return true;\n        } catch (IOException e) {\n            Log.e(TAG, \"failed to save frame\", e);\n        }\n        return false;\n    }\n\n    public static void saveFramebufferToFile(int width, int height, File file) {\n        Bitmap bmp = getFrameBuffer(width, height);\n        if(saveBitmapToFile(bmp, file)) {\n            Log.d(TAG, \"frame saved to \" + file.getName());\n        }\n        bmp.recycle();\n    }\n\n    public static class Matrix {\n        /**\n         * Android's {@link android.opengl.Matrix#setRotateEulerM(float[], int, float, float, float)}\n         * is broken and returns an invalid matrix when rotating around the Y axis.\n         *\n         * See comment #3 in https://code.google.com/p/android/issues/detail?id=12964 for fix\n         * @see android.opengl.Matrix#setRotateEulerM(float[], int, float, float, float)\n         */\n        public static void setRotateEulerM(float[] rm, int rmOffset, float x, float y, float z) {\n            x = x * 0.01745329f;\n            y = y * 0.01745329f;\n            z = z * 0.01745329f;\n            float sx = (float) Math.sin(x);\n            float sy = (float) Math.sin(y);\n            float sz = (float) Math.sin(z);\n            float cx = (float) Math.cos(x);\n            float cy = (float) Math.cos(y);\n            float cz = (float) Math.cos(z);\n            float cxsy = cx * sy;\n            float sxsy = sx * sy;\n\n            rm[rmOffset + 0] = cy * cz;\n            rm[rmOffset + 1] = -cy * sz;\n            rm[rmOffset + 2] = sy;\n            rm[rmOffset + 3] = 0.0f;\n\n            rm[rmOffset + 4] = sxsy * cz + cx * sz;\n            rm[rmOffset + 5] = -sxsy * sz + cx * cz;\n            rm[rmOffset + 6] = -sx * cy;\n            rm[rmOffset + 7] = 0.0f;\n\n            rm[rmOffset + 8] = -cxsy * cz + sx * sz;\n            rm[rmOffset + 9] = cxsy * sz + sx * cz;\n            rm[rmOffset + 10] = cx * cy;\n            rm[rmOffset + 11] = 0.0f;\n\n            rm[rmOffset + 12] = 0.0f;\n            rm[rmOffset + 13] = 0.0f;\n            rm[rmOffset + 14] = 0.0f;\n            rm[rmOffset + 15] = 1.0f;\n        }\n    }\n}\nSpectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveEffect.java\npublic class ImmersiveEffect extends ShaderEffect {\n\n    /**\n     * Image source render mode.\n     */\n    public enum Mode {\n        /**\n         * Monoscopic rendering of mono sources.\n         */\n        MONO,\n\n        /**\n         * Stereoscopic rendering of side-by-side (SBS) sources, where two pictures are packed\n         * horizontally in the image source.\n         */\n        STEREO_SBS,\n\n        /**\n         * Stereoscopic rendering of top-and-bottom (TAB) sources, where two pictures are packed\n         * vertically in the image source.\n         */\n        STEREO_TAB,\n    }\n\n    private EquirectangularSphereShaderProgram mShaderProgram;\n    private float mRotX, mRotY, mRotZ;\n    private float[] mRotationMatrix = new float[16];\n    private Mode mMode;\n\n    private FloatParameter mParameterRotX, mParameterRotY, mParameterRotZ;\n    private EnumParameter<Mode> mParameterMode;\n\n    public ImmersiveEffect() {\n        mRotX = 0.0f;\n        mRotY = 0.0f;\n        mRotZ = 0.0f;\n        Matrix.setIdentityM(mRotationMatrix, 0);\n        mMode = Mode.MONO;\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        mShaderProgram = new EquirectangularSphereShaderProgram();\n\n        mParameterRotX = new FloatParameter(\"RotX\", -360.0f, 360.0f, mRotX, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotX = value;\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the X-axis in degrees\");\n        mParameterRotY = new FloatParameter(\"RotY\", -360.0f, 360.0f, mRotY, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotY = -value; // invert to rotate to the right with a positive value\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the Y-axis in degrees\");\n        mParameterRotZ = new FloatParameter(\"RotZ\", -360.0f, 360.0f, mRotZ, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mRotZ = value;\n                updateRotationMatrix();\n            }\n        }, \"Sets the rotation angle around the Z-axis in degrees\");\n        mParameterMode = new EnumParameter<>(\"Mode\", Mode.class, mMode, new EnumParameter.Delegate<Mode>() {\n            @Override\n            public void setValue(Mode value) {\n                mMode = value;\n                mShaderProgram.setMode(mMode.ordinal());\n            }\n        }, \"Sets the render mode\");\n\n        addParameter(mParameterRotX);\n        addParameter(mParameterRotY);\n        addParameter(mParameterRotZ);\n        addParameter(mParameterMode);\n\n        return mShaderProgram;\n    }\n\n    private void updateRotationMatrix() {\n        GLUtils.Matrix.setRotateEulerM(mRotationMatrix, 0, mRotX, mRotY, mRotZ);\n        mShaderProgram.setRotationMatrix(mRotationMatrix);\n    }\n\n    /**\n     * Sets the rotation matrix directly without going through the 3 parameters and provoking\n     * lots of function calls (rotation matrix can be updated very frequently).\n     * @param R a 4x4 rotation matrix\n     */\n    public void setRotationMatrix(float[] R) {\n        if(R.length < 16) {\n            throw new RuntimeException(\"4x4 matrix expected\");\n        }\n\n        // Take a copy of the matrix into the local variable\n        System.arraycopy(R, 0, mRotationMatrix, 0, 16);\n\n        if(isInitialized()) {\n            // Update the shader rotation matrix on the correct thread\n            getParameterHandler().post(mRotationMatrixUpdateRunnable);\n\n            // Fire event to trigger a view update\n            fireEffectChanged();\n        }\n    }\n\n    /**\n     * Gets the rotation matrix. The rotation matrix will be written into the supplied\n     * parameter.\n     * @param R a 4x4 output matrix\n     */\n    public void getRotationMatrix(float[] R) {\n        if(R.length < 16) {\n            throw new RuntimeException(\"4x4 matrix expected\");\n        }\n\n        // Copy the local matrix into the output matrix\n        System.arraycopy(mRotationMatrix, 0, R, 0, 16);\n    }\n\n    /**\n     * Sets the rotation along the Y-axis.\n     * @param rotX rotation in degrees\n     */\n    public void setRotationX(float rotX) {\n        if(isInitialized()) {\n            mParameterRotX.setValue(rotX);\n        } else {\n            mRotX = rotX;\n        }\n    }\n\n    /**\n     * Sets the rotation along the Y-axis.\n     * @param rotY rotation in degrees\n     */\n    public void setRotationY(float rotY) {\n        if(isInitialized()) {\n            mParameterRotY.setValue(rotY);\n        } else {\n            mRotX = rotY;\n        }\n    }\n\n    /**\n     * Sets the rotation along the Z-axis.\n     * @param rotZ rotation in degrees\n     */\n    public void setRotationZ(float rotZ) {\n        if(isInitialized()) {\n            mParameterRotZ.setValue(rotZ);\n        } else {\n            mRotX = rotZ;\n        }\n    }\n\n    /**\n     * Sets the content render mode. Should be set to match the image source.\n     * @param mode the image source render mode\n     */\n    public void setMode(Mode mode) {\n        if(isInitialized()) {\n            mParameterMode.setValue(mode);\n        } else {\n            mMode = mode;\n        }\n    }\n\n    private Runnable mRotationMatrixUpdateRunnable = new Runnable() {\n        @Override\n        public void run() {\n            mShaderProgram.setRotationMatrix(mRotationMatrix);\n        }\n    };\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/SimpleToonEffect.java\npublic class SimpleToonEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureToonShaderProgram();\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/ContrastBrightnessAdjustmentEffect.java\npublic class ContrastBrightnessAdjustmentEffect extends ShaderEffect {\n\n    private float mContrast;\n    private float mBrightness;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final ContrastBrightnessAdjustmentShaderProgram adjustmentsShader = new ContrastBrightnessAdjustmentShaderProgram();\n\n        mContrast = 1.0f;\n        mBrightness = 1.0f;\n\n        addParameter(new FloatParameter(\"Contrast\", 0.0f, 5.0f, mContrast, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mContrast = value;\n                adjustmentsShader.setContrast(mContrast);\n            }\n        }));\n        addParameter(new FloatParameter(\"Brightness\", 0.0f, 5.0f, mBrightness, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBrightness = value;\n                adjustmentsShader.setBrightness(mBrightness);\n            }\n        }));\n\n        return adjustmentsShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/WatermarkEffect.java\npublic class WatermarkEffect extends ShaderEffect {\n\n    public enum Alignment {\n        LOWER_LEFT,\n        UPPER_LEFT,\n        UPPER_RIGHT,\n        LOWER_RIGHT,\n        CENTER\n    }\n\n    private WatermarkShaderProgram mShaderProgram;\n    private float mScale;\n    private float mOpacity;\n    private float mMarginX, mMarginY;\n    private Alignment mAlignment;\n\n    private Bitmap mWatermarkBitmap;\n    private Texture2D mWatermarkTexture;\n\n    private FloatParameter mScaleParameter;\n    private FloatParameter mOpacityParameter;\n    private FloatParameter mMarginXParameter;\n    private FloatParameter mMarginYParameter;\n    private EnumParameter<Alignment> mAlignmentParameter;\n\n    public WatermarkEffect() {\n        mScale = 1.0f;\n        mOpacity = 0.8f;\n        mMarginX = mMarginY = 0.5f;\n        mAlignment = Alignment.LOWER_RIGHT;\n    }\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        mShaderProgram = new WatermarkShaderProgram();\n\n        mScaleParameter = new FloatParameter(\"Scale\", 0f, 10f, mScale, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mShaderProgram.setWatermarkScale(value);\n            }\n        });\n        addParameter(mScaleParameter);\n\n        mOpacityParameter = new FloatParameter(\"Opacity\", 0f, 1f, mOpacity, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mShaderProgram.setWatermarkOpacity(value);\n            }\n        });\n        addParameter(mOpacityParameter);\n\n        mMarginXParameter = new FloatParameter(\"Margin X\", -1f, 1f, mMarginX, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mMarginX = value;\n                mShaderProgram.setWatermarkMargin(mMarginX, mMarginY);\n            }\n        });\n        addParameter(mMarginXParameter);\n\n        mMarginYParameter = new FloatParameter(\"Margin Y\", -1f, 1f, mMarginY, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mMarginY = value;\n                mShaderProgram.setWatermarkMargin(mMarginX, mMarginY);\n            }\n        });\n        addParameter(mMarginYParameter);\n\n        mAlignmentParameter = new EnumParameter<>(\"Alignment\", Alignment.class, mAlignment, new EnumParameter.Delegate<Alignment>() {\n            @Override\n            public void setValue(Alignment value) {\n                mAlignment = value;\n                mShaderProgram.setWatermarkAlignment(mAlignment.ordinal());\n            }\n        });\n        addParameter(mAlignmentParameter);\n\n        if(mWatermarkBitmap != null) {\n            mWatermarkTexture = new Texture2D(mWatermarkBitmap);\n            mShaderProgram.setWatermark(mWatermarkTexture);\n        }\n\n        return mShaderProgram;\n    }\n\n    public void setWatermark(Bitmap watermark) {\n        // TODO clear previous texture\n        mWatermarkBitmap = watermark;\n        if(isInitialized()) {\n            mWatermarkTexture = new Texture2D(watermark);\n            mShaderProgram.setWatermark(mWatermarkTexture);\n        }\n    }\n\n    public void setScale(float scale) {\n        if(isInitialized()) {\n            mScaleParameter.setValue(scale);\n        } else {\n            mScale = scale;\n        }\n    }\n\n    public void setOpacity(float opacity) {\n        if(isInitialized()) {\n            mOpacityParameter.setValue(opacity);\n        } else {\n            mOpacity = opacity;\n        }\n    }\n\n    public void setMargin(float x, float y) {\n        if(isInitialized()) {\n            mMarginXParameter.setValue(x);\n            mMarginYParameter.setValue(y);\n        } else {\n            mMarginX = x;\n            mMarginY = y;\n        }\n    }\n\n    public void setAlignment(Alignment alignment) {\n        if(isInitialized()) {\n            mAlignmentParameter.setValue(alignment);\n        } else {\n            mAlignment = alignment;\n        }\n    }\n}\nSpectaculum-Effect-Immersive/src/main/java/net/protyposis/android/spectaculum/effects/ImmersiveTouchNavigation.java\npublic class ImmersiveTouchNavigation {\n\n    private static final String TAG = ImmersiveTouchNavigation.class.getSimpleName();\n\n    private SpectaculumView mSpectaculumView;\n    private boolean mSpectaculumViewTouchEnabled;\n    private GestureDetector mGestureDetector;\n    private float mPanX;\n    private float mPanY;\n    private ImmersiveEffect mEffect;\n    private BooleanParameter mParameter;\n    private boolean mActive;\n    private float[] mRotationMatrix = new float[16];\n\n    /**\n     * Creates a touch navigation instance for the supplied view widget.\n     * @param spectaculumView the view widget where the touch gestures should be read from\n     */\n    public ImmersiveTouchNavigation(SpectaculumView spectaculumView) {\n        mSpectaculumView = spectaculumView;\n\n        mGestureDetector = new GestureDetector(mSpectaculumView.getContext(), mOnGestureListener);\n\n        // Make a UI handler for activation state toggling\n        final Handler h = new Handler();\n\n        // Create an effect parameter to toggle the touch navigation on/off\n        mParameter = new BooleanParameter(\"TouchNav\", false, new BooleanParameter.Delegate() {\n            @Override\n            public void setValue(final Boolean value) {\n                // Activate/deactivate on UI thread\n                // Parameters are usually set on the GL thread, so we need to transfer this back to the UI thread\n                h.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        mActive = value;\n                        if(mActive) {\n                            activate();\n                        } else {\n                            deactivate();\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Attaches to the effect and adds parameter to toggle touch navigation on/off.\n     * @param effect the effect to attach touch navigation to\n     * @throws RuntimeException thrown if there is already an effect attached\n     */\n    public void attachTo(ImmersiveEffect effect) throws RuntimeException {\n        if(mEffect != null) {\n            throw new RuntimeException(\"Previous effect is still attached, call detach() first\");\n        }\n        mEffect = effect;\n        mEffect.addParameter(mParameter);\n    }\n\n    /**\n     * Detaches touch navigation from the effect it is attached to and removes the toggle parameter.\n     */\n    public void detach() {\n        mEffect.removeParameter(mParameter);\n        mEffect = null;\n    }\n\n    /**\n     * Activates touch navigation.\n     */\n    public void activate() {\n        mSpectaculumView.setOnTouchListener(mOnTouchListener);\n\n        // Store touch enabled state and enable touch which is required for this to work\n        mSpectaculumViewTouchEnabled = mSpectaculumView.isTouchEnabled();\n        mSpectaculumView.setTouchEnabled(true);\n\n        mActive = true;\n    }\n\n    /**\n     * Deactivates touch navigation.\n     */\n    public void deactivate() {\n        mSpectaculumView.setOnTouchListener(null);\n        mSpectaculumView.setTouchEnabled(mSpectaculumViewTouchEnabled);\n        mActive = false;\n    }\n\n    private void setRotation(float x, float y) {\n        // Set rotation matrix\n        GLUtils.Matrix.setRotateEulerM(mRotationMatrix, 0, x, y, 0);\n\n        // Update effect and thus the viewport too\n        mEffect.setRotationMatrix(mRotationMatrix);\n    }\n\n    private View.OnTouchListener mOnTouchListener = new View.OnTouchListener() {\n        @Override\n        public boolean onTouch(View v, MotionEvent event) {\n            return mActive && mGestureDetector.onTouchEvent(event);\n        }\n    };\n\n    private GestureDetector.SimpleOnGestureListener mOnGestureListener = new GestureDetector.SimpleOnGestureListener() {\n\n        @Override\n        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n            // Scale the scroll/panning distance to rotation degrees\n            // The view's with and height are mapped to 180 degree each\n            // TODO map motion event positions from view to the rendered sphere and derive rotation\n            //      angles to keep touchscreen positions and sphere positions in sync\n            mPanX += distanceX / mSpectaculumView.getWidth() * 180f;\n            mPanY += distanceY / mSpectaculumView.getHeight() * 180f;\n\n            // Clamp horizontal rotation to avoid rotations beyond 90 degree which inverts the vertical\n            // rotation and makes rotation handling more complicated\n            mPanY = LibraryHelper.clamp(mPanY, -90, 90);\n\n            // Apply the panning to the viewport\n            // Horizontal panning along the view's X axis translates to a rotation around the viewport's Y axis\n            // Vertical panning along the view's Y axis translates to a rotation around the viewport's X axis\n            setRotation(-mPanY, -mPanX);\n            return true;\n        }\n\n        @Override\n        public boolean onDoubleTap(MotionEvent e) {\n            // Reset rotation/viewport to initial value\n            mPanX = 0;\n            mPanY = 0;\n            setRotation(0, 0);\n            return true;\n        }\n    };\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/SpectaculumView.java\npublic class SpectaculumView extends GLSurfaceView implements\n        SurfaceTexture.OnFrameAvailableListener,\n        Effect.Listener, GLRenderer.EffectEventListener,\n        GLRenderer.OnFrameCapturedCallback {\n\n    private static final String TAG = SpectaculumView.class.getSimpleName();\n\n    public interface EffectEventListener extends GLRenderer.EffectEventListener {}\n    public interface OnFrameCapturedCallback extends GLRenderer.OnFrameCapturedCallback {}\n\n    private GLRenderer mRenderer;\n    private InputSurfaceHolder mInputSurfaceHolder;\n    private Handler mRunOnUiThreadHandler = new Handler();\n    private ScaleGestureDetector mScaleGestureDetector;\n    private GestureDetector mGestureDetector;\n\n    private EffectEventListener mEffectEventListener;\n    private OnFrameCapturedCallback mOnFrameCapturedCallback;\n\n    private PipelineResolution mPipelineResolution = PipelineResolution.SOURCE;\n\n    private float mZoomLevel = 1.0f;\n    private float mZoomSnappingRange = 0.02f;\n    private float mPanX;\n    private float mPanY;\n    private float mPanSnappingRange = 0.02f;\n    private boolean mTouchEnabled = false;\n\n    protected int mImageWidth;\n    protected int mImageHeight;\n\n    public SpectaculumView(Context context) {\n        super(context);\n        init(context);\n    }\n\n    public SpectaculumView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context);\n    }\n\n    private void init(Context context) {\n        if(isInEditMode()) {\n            // do not start renderer in layout editor\n            return;\n        }\n        if(!net.protyposis.android.spectaculum.gles.GLUtils.isGlEs2Supported(context)) {\n            Log.e(TAG, \"GLES 2.0 is not supported\");\n            return;\n        }\n\n        LibraryHelper.setContext(context);\n\n        mRenderer = new GLRenderer();\n        mRenderer.setOnExternalSurfaceTextureCreatedListener(mExternalSurfaceTextureCreatedListener);\n        mRenderer.setEffectEventListener(mRendererEffectEventListener);\n\n        mInputSurfaceHolder = new InputSurfaceHolder();\n\n        setEGLContextClientVersion(2);\n        setRenderer(mRenderer);\n        setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);\n        // TODO setPreserveEGLContextOnPause(true);\n\n        mScaleGestureDetector = new ScaleGestureDetector(context,\n                new ScaleGestureDetector.SimpleOnScaleGestureListener() {\n                    @Override\n                    public boolean onScale(ScaleGestureDetector detector) {\n                        mZoomLevel *= detector.getScaleFactor();\n\n                        if(LibraryHelper.isBetween(mZoomLevel, 1-mZoomSnappingRange, 1+mZoomSnappingRange)) {\n                            mZoomLevel = 1.0f;\n                        }\n\n                        // limit zooming to magnification zooms (zoom-ins)\n                        if(mZoomLevel < 1.0f) {\n                            mZoomLevel = 1.0f;\n                        }\n\n                        setZoom(mZoomLevel);\n                        return true;\n                    }\n                });\n\n        mGestureDetector = new GestureDetector(context,\n                new GestureDetector.SimpleOnGestureListener() {\n                    @Override\n                    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n                        // divide by zoom level to adjust panning speed to zoomed picture size\n                        // multiply by fixed scaling factor to compensate for panning lag\n                        mPanX += distanceX / getWidth() / mZoomLevel * 1.2f;\n                        mPanY += distanceY / getHeight() / mZoomLevel * 1.2f;\n\n                        float panSnappingRange = mPanSnappingRange / mZoomLevel;\n                        if(LibraryHelper.isBetween(mPanX, -panSnappingRange, +panSnappingRange)) {\n                            mPanX = 0;\n                        }\n                        if(LibraryHelper.isBetween(mPanY, -panSnappingRange, +panSnappingRange)) {\n                            mPanY = 0;\n                        }\n\n                        // limit panning to the texture bounds so it always covers the complete view\n                        float maxPanX = Math.abs((1.0f / mZoomLevel) - 1.0f);\n                        float maxPanY = Math.abs((1.0f / mZoomLevel) - 1.0f);\n                        mPanX = LibraryHelper.clamp(mPanX, -maxPanX, maxPanX);\n                        mPanY = LibraryHelper.clamp(mPanY, -maxPanY, maxPanY);\n\n                        setPan(mPanX, mPanY);\n                        return true;\n                    }\n\n                    @Override\n                    public boolean onDoubleTap(MotionEvent e) {\n                        mZoomLevel = 1;\n                        mPanX = 0;\n                        mPanY = 0;\n\n                        setZoom(mZoomLevel);\n                        setPan(mPanX, mPanY);\n\n                        return true;\n                    }\n                });\n    }\n\n    /**\n     * Sets the zoom factor of the texture in the view. 1.0 means no zoom, 2.0 2x zoom, etc.\n     */\n    public void setZoom(float zoomFactor) {\n        mZoomLevel = zoomFactor;\n        mRenderer.setZoomLevel(mZoomLevel);\n        requestRender(GLRenderer.RenderRequest.GEOMETRY);\n    }\n\n    /**\n     * Gets the zoom level.\n     * @see #setZ(float) for an explanation if the value\n     * @return\n     */\n    public float getZoomLevel() {\n        return mZoomLevel;\n    }\n\n    /**\n     * Sets the panning of the texture in the view. (0.0, 0.0) centers the texture and means no\n     * panning, (-1.0, -1.0) moves the texture to the lower right quarter.\n     */\n    public void setPan(float x, float y) {\n        mPanX = x;\n        mPanY = y;\n        mRenderer.setPan(-mPanX, mPanY);\n        requestRender(GLRenderer.RenderRequest.GEOMETRY);\n    }\n\n    /**\n     * Gets the horizontal panning. Zero means centered, positive is to the left.\n     */\n    public float getPanX() {\n        return mPanX;\n    }\n\n    /**\n     * Gets the vertical panning. Zero means centered, positive is to the bottom.\n     */\n    public float getPanY() {\n        return mPanY;\n    }\n\n    /**\n     * Enables or disables touch zoom/pan gestures. When disabled, a parent container (e.g. an activity)\n     * can still pass touch events to this view's {@link #onTouchEvent(MotionEvent)} to process\n     * zoom/pan gestures.\n     * @see #isTouchEnabled()\n     */\n    public void setTouchEnabled(boolean enabled) {\n        mTouchEnabled = enabled;\n    }\n\n    /**\n     * Checks if touch gestures are enabled. Touch gestures are disabled by default.\n     * @see #setTouchEnabled(boolean)\n     */\n    public boolean isTouchEnabled() {\n        return mTouchEnabled;\n    }\n\n    /**\n     * Resizes the video view according to the video size to keep aspect ratio.\n     * Code copied from {@link android.widget.VideoView#onMeasure(int, int)}.\n     */\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        Log.i(\"@@@@\", \"onMeasure(\" + MeasureSpec.toString(widthMeasureSpec) + \", \"\n                + MeasureSpec.toString(heightMeasureSpec) + \")\");\n\n        int width = getDefaultSize(mImageWidth, widthMeasureSpec);\n        int height = getDefaultSize(mImageHeight, heightMeasureSpec);\n        if (mImageWidth > 0 && mImageHeight > 0) {\n\n            int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n            int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n            int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n            int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n\n            if (widthSpecMode == MeasureSpec.EXACTLY && heightSpecMode == MeasureSpec.EXACTLY) {\n                // the size is fixed\n                width = widthSpecSize;\n                height = heightSpecSize;\n\n                // for compatibility, we adjust size based on aspect ratio\n                if ( mImageWidth * height  < width * mImageHeight) {\n                    //Log.i(\"@@@\", \"image too wide, correcting\");\n                    width = height * mImageWidth / mImageHeight;\n                } else if ( mImageWidth * height  > width * mImageHeight) {\n                    //Log.i(\"@@@\", \"image too tall, correcting\");\n                    height = width * mImageHeight / mImageWidth;\n                }\n            } else if (widthSpecMode == MeasureSpec.EXACTLY) {\n                // only the width is fixed, adjust the height to match aspect ratio if possible\n                width = widthSpecSize;\n                height = width * mImageHeight / mImageWidth;\n                if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) {\n                    // couldn't match aspect ratio within the constraints\n                    height = heightSpecSize;\n                }\n            } else if (heightSpecMode == MeasureSpec.EXACTLY) {\n                // only the height is fixed, adjust the width to match aspect ratio if possible\n                height = heightSpecSize;\n                width = height * mImageWidth / mImageHeight;\n                if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) {\n                    // couldn't match aspect ratio within the constraints\n                    width = widthSpecSize;\n                }\n            } else {\n                // neither the width nor the height are fixed, try to use actual video size\n                width = mImageWidth;\n                height = mImageHeight;\n                if (heightSpecMode == MeasureSpec.AT_MOST && height > heightSpecSize) {\n                    // too tall, decrease both width and height\n                    height = heightSpecSize;\n                    width = height * mImageWidth / mImageHeight;\n                }\n                if (widthSpecMode == MeasureSpec.AT_MOST && width > widthSpecSize) {\n                    // too wide, decrease both width and height\n                    width = widthSpecSize;\n                    height = width * mImageHeight / mImageWidth;\n                }\n            }\n        } else {\n            // no size yet, just adopt the given spec sizes\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        /*\n         * NOTE: These calls should not be simplified to a logical chain, because the evaluation\n         * would stop at the first true value and not execute the following functions.\n         */\n        boolean event1 = mScaleGestureDetector.onTouchEvent(event);\n        boolean event2 = mGestureDetector.onTouchEvent(event);\n        return event1 || event2;\n    }\n\n    @Override\n    public boolean dispatchTouchEvent(MotionEvent event) {\n        if(!mTouchEnabled) {\n            // Touch events are disabled and we return false to route all events to the parent\n            return false;\n        }\n        return super.dispatchTouchEvent(event);\n    }\n\n    /**\n     * Implement this method to receive the input surface holder when it is ready to be used.\n     * The input surface holder holds the surface and surface texture to which input data, i.e. image\n     * data from some source that should be processed and displayed, should be written to display\n     * it in the view.\n     *\n     * External callers should add a callback to the holder through {@link InputSurfaceHolder#addCallback(InputSurfaceHolder.Callback)}\n     * to be notified about this event in {@link InputSurfaceHolder.Callback#surfaceCreated(InputSurfaceHolder)}.\n     *\n     * @param inputSurfaceHolder the input surface holder which holds the surface where image data should be written to\n     */\n    public void onInputSurfaceCreated(InputSurfaceHolder inputSurfaceHolder) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets the input surface holder that holds the surface where image data should be written to\n     * for processing and display. The holder is always available but only holds an actual surface\n     * after {@link #onInputSurfaceCreated(InputSurfaceHolder)} respectively\n     * {@link InputSurfaceHolder.Callback#surfaceCreated(InputSurfaceHolder)} have been called.\n     *\n     * The input surface holder holds the input surface (texture) that is used to write image data\n     * into the processing pipeline, opposed to the surface holder from {@link #getHolder()} that holds\n     * the surface to which the final result of the processing pipeline will be written to for display.\n     *\n     * @return the input surface holder or null if it is not available yet\n     */\n    public InputSurfaceHolder getInputHolder() {\n        return mInputSurfaceHolder;\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n        // Delete the external texture, else it stays in RAM\n        if(getInputHolder().getExternalSurfaceTexture() != null) {\n            getInputHolder().getExternalSurfaceTexture().delete();\n            getInputHolder().update(null);\n        }\n        super.surfaceDestroyed(holder);\n    }\n\n    /**\n     * Adds one or more effects to the view. Added effects can then be activated/selected by calling\n     * {@link #selectEffect(int)}. The effect indices start at zero and are in the order that they\n     * are added to the view.\n     * @param effects effects to add\n     */\n    public void addEffect(final Effect... effects) {\n        for(Effect effect : effects) {\n            effect.addListener(this);\n            effect.setParameterHandler(new ParameterHandler(this));\n        }\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.addEffect(effects);\n            }\n        });\n    }\n\n    /**\n     * Selects/activates the effect with the given index as it has been added through {@link #addEffect(Effect...)}.\n     * @param index the index of the effect to activate\n     */\n    public void selectEffect(final int index) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.selectEffect(index);\n                requestRender(GLRenderer.RenderRequest.EFFECT);\n            }\n        });\n    }\n\n    /**\n     * Gets called when an effect has been initialized after being selected for the first time\n     * with {@link #selectEffect(int)}. Effect initialization happens asynchronously and can take\n     * some time when a lot of data (framebuffers, textures, ...) is loaded.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the initialized effect\n     * @param effect the initialized effect\n     */\n    @Override\n    public void onEffectInitialized(int index, Effect effect) {\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectInitialized(index, effect);\n        }\n        requestRender(GLRenderer.RenderRequest.EFFECT);\n    }\n\n    /**\n     * Gets called when an effect has been successfully selected with {@link #selectEffect(int)}.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the selected effect\n     * @param effect the selected effect\n     */\n    @Override\n    public void onEffectSelected(int index, Effect effect) {\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectSelected(index, effect);\n        }\n    }\n\n    /**\n     * Gets called when an effect selection with {@link #selectEffect(int)} fails.\n     * Can be overwritten in subclasses but must be called through. External callers should use\n     * {@link #setEffectEventListener(EffectEventListener)}.\n     * @param index the index of the failed effect\n     * @param effect the failed effect\n     */\n    @Override\n    public void onEffectError(int index, Effect effect, EffectException e) {\n        Log.e(TAG, \"effect error\", e);\n        if(mEffectEventListener != null) {\n            mEffectEventListener.onEffectError(index, effect, e);\n        }\n    }\n\n    /**\n     * Sets an event listener that gets called when effect-related event happens.\n     * @param listener the event listener to be called on an event\n     */\n    public void setEffectEventListener(EffectEventListener listener) {\n        mEffectEventListener = listener;\n    }\n\n    /**\n     * Gets called when a parameter of an effect has changed. This method then triggers a fresh\n     * rendering of the effect. Can be overridden in subclasses but must be called through.\n     * @param effect the effect of which a parameter value has changed\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onEffectChanged(Effect effect) {\n        requestRender(GLRenderer.RenderRequest.EFFECT);\n    }\n\n    /**\n     * Gets called when a parameter is added to an effect.\n     * Can be overridden in subclasses but must be called through.\n     * @param effect the effect to which a parameter was added\n     * @param parameter the added parameter\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onParameterAdded(Effect effect, Parameter parameter) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets called when a parameter is removed from an effect.\n     * Can be overridden in subclasses but must be called through.\n     * @param effect the effect from which a parameter was removed\n     * @param parameter the removed parameter\n     * @see net.protyposis.android.spectaculum.effects.Effect.Listener\n     */\n    @Override\n    public void onParameterRemoved(Effect effect, Parameter parameter) {\n        // nothing to do here\n    }\n\n    /**\n     * Gets called when a new image frame has been written to the surface texture and requests a\n     * fresh rendering of the view. The texture can be obtained through {@link #onInputSurfaceCreated(InputSurfaceHolder)}\n     * or {@link #getInputHolder()}.\n     * Can be overridden in subclasses but must be called through.\n     * @param surfaceTexture the updated surface texture\n     */\n    @Override\n    public void onFrameAvailable(SurfaceTexture surfaceTexture) {\n        requestRender(GLRenderer.RenderRequest.ALL);\n    }\n\n    /**\n     * Requests a render pass of the specified render pipeline section.\n     * @param renderRequest specifies the pipeline section to be rendered\n     */\n    protected void requestRender(final GLRenderer.RenderRequest renderRequest) {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.setRenderRequest(renderRequest);\n                requestRender();\n            }\n        });\n    }\n\n    /**\n     * Requests a capture of the current frame on the view. The frame is asynchronously requested\n     * from the renderer and will be passed back on the UI thread to {@link #onFrameCaptured(Bitmap)}\n     * and the event listener that can be set with {@link #setOnFrameCapturedCallback(OnFrameCapturedCallback)}.\n     */\n    public void captureFrame() {\n        queueEvent(new Runnable() {\n            @Override\n            public void run() {\n                mRenderer.saveCurrentFrame(new GLRenderer.OnFrameCapturedCallback() {\n                    @Override\n                    public void onFrameCaptured(final Bitmap bitmap) {\n                        mRunOnUiThreadHandler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                SpectaculumView.this.onFrameCaptured(bitmap);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Receives a captured frame from the renderer. Can be overwritten in subclasses but must be\n     * called through. External callers should use {@link #setOnFrameCapturedCallback(OnFrameCapturedCallback)}.\n     */\n    @Override\n    public void onFrameCaptured(Bitmap bitmap) {\n        if(mOnFrameCapturedCallback != null) {\n            mOnFrameCapturedCallback.onFrameCaptured(bitmap);\n        }\n    }\n\n    /**\n     * Sets a callback event handler that receives a bitmap of the captured frame.\n     */\n    public void setOnFrameCapturedCallback(OnFrameCapturedCallback callback) {\n        mOnFrameCapturedCallback = callback;\n    }\n\n    /**\n     * Sets the resolution mode of the processing pipeline.\n     * @see PipelineResolution\n     */\n    public void setPipelineResolution(PipelineResolution resolution) {\n        mPipelineResolution = resolution;\n    }\n\n    /**\n     * Gets the configured resolution mode of the processing pipeline.\n     */\n    public PipelineResolution getPipelineResolution() {\n        return mPipelineResolution;\n    }\n\n    /**\n     * Sets the resolution of the source data and recomputes the layout. This implicitly also sets\n     * the resolution of the view output surface if pipeline resolution mode {@link PipelineResolution#SOURCE}\n     * is set. In SOURCE mode, output will therefore be computed in the input resolution and then\n     * at the very end scaled (most often downscaled) to fit the view in the layout.\n     *\n     * TODO decouple input, processing and output resolution\n     *\n     * @param width the width of the input image data\n     * @param height the height of the input image data\n     */\n    public void updateResolution(int width, int height) {\n        if(width == mImageWidth && height == mImageHeight) {\n            // Don't do anything if resolution has stayed the same\n            return;\n        }\n\n        mImageWidth = width;\n        mImageHeight = height;\n\n        // If desired, set output resolution to source resolution\n        if (width != 0 && height != 0 && mPipelineResolution == PipelineResolution.SOURCE) {\n            getHolder().setFixedSize(width, height);\n        }\n\n        // Resize view according to the new size to fit the layout\n        requestLayout();\n    }\n\n    private GLRenderer.OnExternalSurfaceTextureCreatedListener mExternalSurfaceTextureCreatedListener =\n            new GLRenderer.OnExternalSurfaceTextureCreatedListener() {\n        @Override\n        public void onExternalSurfaceTextureCreated(final ExternalSurfaceTexture surfaceTexture) {\n            // dispatch event to UI thread\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    // Create an input surface holder and call the event handler\n                    mInputSurfaceHolder.update(surfaceTexture);\n                    onInputSurfaceCreated(mInputSurfaceHolder);\n                }\n            });\n\n            surfaceTexture.setOnFrameAvailableListener(SpectaculumView.this);\n        }\n    };\n\n    /**\n     * Effect event listener that transfers the events to the UI thread.\n     */\n    private EffectEventListener mRendererEffectEventListener = new EffectEventListener() {\n        @Override\n        public void onEffectInitialized(final int index, final Effect effect) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectInitialized(index, effect);\n                }\n            });\n        }\n\n        @Override\n        public void onEffectSelected(final int index, final Effect effect) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectSelected(index, effect);\n                }\n            });\n        }\n\n        @Override\n        public void onEffectError(final int index, final Effect effect, final EffectException e) {\n            mRunOnUiThreadHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    SpectaculumView.this.onEffectError(index, effect, e);\n                }\n            });\n        }\n    };\n}\nSpectaculum-Effect-FlowAbs/src/main/java/net/protyposis/android/spectaculum/effects/FlowAbsEffect.java\npublic class FlowAbsEffect extends BaseEffect {\n\n    protected FlowAbs mFlowAbs;\n\n    private float mSstSigma;\n\n    private int mBfNE;\n    private int mBfNA;\n    private float mBfSigmaD;\n    private float mBfSigmaR;\n\n    private int mFDogType;\n    private int mFDogN;\n    private float mFDogSigmaE;\n    private float mFDogSigmaR;\n    private float mFDogSigmaM;\n    private float mFDogTau;\n    private float mFDogPhi;\n\n    private int mCqFilter;\n    private int mCqNumBins;\n    private float mCqPhiQ;\n\n    private float[] mEdgeColor;\n\n    private int mFsType;\n    private float mFsSigma;\n\n    public FlowAbsEffect() {\n        super();\n\n        mSstSigma = 2.0f;\n\n        mBfNE = 0; // TODO default to 1 once the bilateral filter is working correctly\n        mBfNA = 0; // TODO default to 4 once the bilateral filter is working correctly\n        mBfSigmaD = 3.0f;\n        mBfSigmaR = 4.25f;\n\n        mFDogType = 0;\n        mFDogN = 1;\n        mFDogSigmaE = 1.0f;\n        mFDogSigmaR = 1.6f;\n        mFDogSigmaM = 3.0f;\n        mFDogTau = 0.99f;\n        mFDogPhi = 2.0f;\n\n        mCqFilter = 1;\n        mCqNumBins = 8;\n        mCqPhiQ = 3.4f;\n\n        mEdgeColor = new float[] { 0.0f, 0.0f, 0.0f };\n\n        mFsType = 1;\n        mFsSigma = 1.0f;\n\n        addParameter(new FloatParameter(\"SST Sigma\", 0f, 10f, mSstSigma, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mSstSigma = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"BF N E\", 0, 10, mBfNE, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mBfNE = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"BF N A\", 0, 10, mBfNA, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mBfNA = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"BF sigmaD\", 0f, 10f, mBfSigmaD, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBfSigmaD = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"BF sigmaR\", 0f, 10f, mBfSigmaR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mBfSigmaR = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"(F)DOG Type\", 0, 1, mFDogType, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFDogType = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"(F)DOG N\", 0, 10, mFDogN, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFDogN = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG sigmaE\", 0f, 10f, mFDogSigmaE, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaE = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG sigmaR\", 0f, 10f, mFDogSigmaR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaR = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"FDOG sigmaM\", 0f, 10f, mFDogSigmaM, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogSigmaM = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG tau\", 0f, 10f, mFDogTau, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogTau = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"(F)DOG phi\", 0f, 10f, mFDogPhi, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFDogPhi = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"CQ Filter\", 0, 2, mCqFilter, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mCqFilter = value;\n            }\n        }));\n        addParameter(new IntegerParameter(\"CQ Bins\", 0, 20, mCqNumBins, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mCqNumBins = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"CQ phiQ\", 0f, 10f, mCqPhiQ, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mCqPhiQ = value;\n            }\n        }));\n\n        addParameter(new FloatParameter(\"Edge R\", 0f, 1f, mEdgeColor[0], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[0] = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"Edge G\", 0f, 1f, mEdgeColor[1], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[1] = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"Edge B\", 0f, 1f, mEdgeColor[2], new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mEdgeColor[2] = value;\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"FS Type\", 0, 3, mFsType, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                mFsType = value;\n            }\n        }));\n        addParameter(new FloatParameter(\"FS Sigma\", 0f, 10f, mFsSigma, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mFsSigma = value;\n            }\n        }));\n    }\n\n    @Override\n    public void init(int width, int height) {\n        mFlowAbs = new FlowAbs(width, height);\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        mFlowAbs.flowAbs(source, target,\n                mSstSigma,\n                mBfNE, mBfNA, mBfSigmaD, mBfSigmaR,\n                mFDogType, mFDogN, mFDogSigmaE, mFDogSigmaR, mFDogSigmaM, mFDogTau, mFDogPhi,\n                mCqFilter, mCqNumBins, mCqPhiQ,\n                mEdgeColor,\n                mFsType, mFsSigma);\n    }\n\n    public FlowAbsGaussEffect getGaussEffect() {\n        return (FlowAbsGaussEffect) new FlowAbsGaussEffect().init(this);\n    }\n\n    public FlowAbsSmoothEffect getSmoothEffect() {\n        return (FlowAbsSmoothEffect) new FlowAbsSmoothEffect().init(this);\n    }\n\n    public FlowAbsBilateralFilterEffect getBilateralFilterEffect() {\n        return (FlowAbsBilateralFilterEffect) new FlowAbsBilateralFilterEffect().init(this);\n    }\n\n    public FlowAbsColorQuantizationEffect getColorQuantizationEffect() {\n        return (FlowAbsColorQuantizationEffect) new FlowAbsColorQuantizationEffect().init(this);\n    }\n\n    public FlowAbsDOGEffect getDOGEffect() {\n        return (FlowAbsDOGEffect) new FlowAbsDOGEffect().init(this);\n    }\n\n    public FlowAbsFDOGEffect getFDOGEffect() {\n        return (FlowAbsFDOGEffect) new FlowAbsFDOGEffect().init(this);\n    }\n\n    public FlowAbsTangentFlowMapEffect getTangentFlowMapEffect() {\n        return (FlowAbsTangentFlowMapEffect) new FlowAbsTangentFlowMapEffect().init(this);\n    }\n\n    public FlowAbsNoiseTextureEffect getNoiseTextureEffect() {\n        return (FlowAbsNoiseTextureEffect) new FlowAbsNoiseTextureEffect().init(this);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/Effect.java\npublic interface Effect {\n\n    /**\n     * Callback interface for effect events.\n     */\n    interface Listener {\n        /**\n         * Gets called when a parameter of the effect has changed.\n         * @param effect the effect whose parameter has changed\n         */\n        void onEffectChanged(Effect effect);\n\n        /**\n         * Gets called when a parameter is added to an effect.\n         * @param effect the effect to which the parameter was added\n         * @param parameter the added parameter\n         */\n        void onParameterAdded(Effect effect, Parameter parameter);\n\n        /**\n         * Gets called when a parameter is removed from an effect.\n         * @param effect the effect from which the parameter was removed\n         * @param parameter the removed parameter\n         */\n        void onParameterRemoved(Effect effect, Parameter parameter);\n    }\n\n    /**\n     * Gets the name of the effect.\n     * @return the name of the effect\n     */\n    String getName();\n\n    /**\n     * Initializes the effect by loading all required resources (shaders, framebuffers, textures,\n     * subeffects, ...) and preparing it for usage. The resolution of the render pipeline respectively\n     * the texture resolution for internal processing must be supplied.\n     * @param width the texture width\n     * @param height the texture height\n     */\n    void init(int width, int height);\n\n    /**\n     * Returns the initialization status of the effect.\n     * @return true if the effect is initialized and ready to use, else false\n     */\n    boolean isInitialized();\n\n    /**\n     * Applies the effect to a source texture and writes it to the target framebuffer. The source\n     * texture is the input image data that the effect is applied to, and the target can be an\n     * intermediate framebuffer (for chaining to another effect) or the screen for direct output.\n     * @param source the source texture where the input image is read from\n     * @param target the target framebuffer where the result with the applied effect is written to\n     */\n    void apply(Texture2D source, Framebuffer target);\n\n    /**\n     * Sets a parameter handler for the parameters of this effect. The parameter handler takes\n     * care that the parameter values are set on the correct thread (i.e. the GL thread).\n     * Setting the handler on the effect makes sure that it is automatically set on its parameters.\n     * @see Parameter#setHandler(ParameterHandler)\n     * @param handler a handler to set, or null to unset\n     */\n    void setParameterHandler(ParameterHandler handler);\n\n    /**\n     * Adds a parameter to the effect. Parameters can be used to parameterize parameters of the effect :)\n     * Triggers {@link Listener#onParameterAdded(Effect, Parameter)} on an attached listener.\n     * @see Parameter\n     * @param parameter the parameter to add\n     */\n    void addParameter(Parameter parameter);\n\n    /**\n     * Removes a parameter from the effect.\n     * Triggers {@link Listener#onParameterRemoved(Effect, Parameter)} on an attached listener.\n     * @see Parameter\n     * @param parameter the parameter to remove\n     */\n    void removeParameter(Parameter parameter);\n\n    /**\n     * Gets a list of available parameters of the effect.\n     * @return list of effect parameters\n     */\n    List<Parameter> getParameters();\n\n    /**\n     * Checks if this effect has any parameters.\n     * @return true if there are parameters attached, else false\n     */\n    boolean hasParameters();\n\n    /**\n     * Resets all settings and parameters to their initial state.\n     */\n    void reset();\n\n    /**\n     * Sets a listener that gets called when any parameter value of the effect has changed.\n     * @see Listener#onEffectChanged(Effect)\n     * @param listener the listener to call back\n     * @deprecated Will be removed in next major version, use {@link #addListener} instead\n     */\n    void setListener(Listener listener);\n\n    /**\n     * Adds a listener that gets called when any parameter value of the effect has changed.\n     * @see Listener#onEffectChanged(Effect)\n     * @param listener the listener to call back\n     */\n    void addListener(Listener listener);\n\n    /**\n     * Removes a listener that has been added with {@link #addListener}.\n     * @param listener the listener to remove\n     */\n    void removeListener(Listener listener);\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelEmbossEffect.java\npublic class KernelEmbossEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.EMBOSS);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelEdgeDetectEffect.java\npublic class KernelEdgeDetectEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.EDGE_DETECT);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/EffectException.java\npublic class EffectException extends Exception {\n    public EffectException() {\n    }\n\n    public EffectException(String detailMessage) {\n        super(detailMessage);\n    }\n\n    public EffectException(String detailMessage, Throwable throwable) {\n        super(detailMessage, throwable);\n    }\n\n    public EffectException(Throwable throwable) {\n        super(throwable);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelBlurEffect.java\npublic class KernelBlurEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.BLUR);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/Parameter.java\npublic interface Parameter<T> {\n\n    interface Delegate<T> {\n        void setValue(T value);\n    }\n\n    /**\n     * Callback interface for parameter events.\n     */\n    interface Listener {\n        /**\n         * Gets called when the value of a parameter has changed.\n         * @param parameter the parameter whose value has changed\n         */\n        void onParameterChanged(Parameter parameter);\n    }\n\n    /**\n     * Gets the name of the parameter.\n     */\n    String getName();\n\n    /**\n     * Gets the description of the parameter. Returns null if no description has been set.\n     */\n    String getDescription();\n\n    /**\n     * Resets the parameter to its default value.\n     */\n    void reset();\n\n    /**\n     * Sets an event listener to listen for parameter value change events.\n     * @see Listener#onParameterChanged(Parameter)\n     * @param listener the listener to notify of events\n     * @deprecated Will be removed in next major version, use {@link #addListener} instead\n     */\n    void setListener(Listener listener);\n\n    /**\n     * Adds an event listener to listen for parameter value change events.\n     * @see Listener#onParameterChanged(Parameter)\n     * @param listener the listener to notify of events\n     */\n    void addListener(Listener listener);\n\n    /**\n     * Removes an event listener added with {@link #addListener}.\n     * @param listener the listener to remove\n     */\n    void removeListener(Listener listener);\n\n    /**\n     * Sets a ParameterHandler on which parameter value changes will be executed. Parameter values\n     * need to be set on the GL thread where the effect that the parameter belongs is active, and\n     * this handler can be used to hand the parameter setting over to the GL thread.\n     * If no handler is set, parameters will be set on the caller thread.\n     * @param handler the parameter handler to set, or null to unset\n     */\n    void setHandler(ParameterHandler handler);\n}\nSpectaculum-Effect-QrMarker/src/main/java/net/protyposis/android/spectaculum/effects/QrMarkerEffect.java\npublic class QrMarkerEffect extends BaseEffect {\n\n    private GaussShaderProgram mGaussShader;\n    private GradientShaderProgram mGradientShader;\n    private CannyShaderProgram mCannyShader;\n    private QrResponseShaderProgram mQrResponseShader;\n    private ConsenseShaderProgram mConsensusShader;\n\n    private Framebuffer mFramebuffer1;\n    private Framebuffer mFramebuffer2;\n\n    private TexturedRectangle mTexturedRectangle;\n\n    private CannyEdgeEffect mCannyEdgeEffect;\n\n    public QrMarkerEffect() {\n        mCannyEdgeEffect = new CannyEdgeEffect();\n    }\n\n    @Override\n    public void init(int width, int height) {\n        // PART OF THE UGLY HACK described in setTextureSizeHack\n        // Cannot call it on base class QrMarkerShaderProgram because it is hidden outside its package\n        GaussShaderProgram.setTextureSizeHack(width, height);\n\n        mGaussShader = new GaussShaderProgram();\n        mGaussShader.setTextureSize(width, height);\n\n        mGradientShader = new GradientShaderProgram();\n        mGradientShader.setTextureSize(width, height);\n\n        mCannyShader = new CannyShaderProgram();\n        mCannyShader.setTextureSize(width, height);\n\n        mQrResponseShader = new QrResponseShaderProgram();\n        mQrResponseShader.setTextureSize(width, height);\n\n        mConsensusShader = new ConsenseShaderProgram();\n        mConsensusShader.setTextureSize(width, height);\n\n        mFramebuffer1 = new Framebuffer(width, height);\n        mFramebuffer2 = new Framebuffer(width, height);\n\n        mTexturedRectangle = new TexturedRectangle();\n        mTexturedRectangle.reset();\n\n        setInitialized();\n    }\n\n    @Override\n    public void apply(Texture2D source, Framebuffer target) {\n        applyCannyEdge(source, mFramebuffer1);\n\n        mFramebuffer2.bind();\n        mQrResponseShader.use();\n        mQrResponseShader.setTexture(mFramebuffer1.getTexture());\n        mTexturedRectangle.draw(mQrResponseShader);\n\n        target.bind();\n        mConsensusShader.use();\n        mConsensusShader.setTexture(mFramebuffer2.getTexture());\n        mTexturedRectangle.draw(mConsensusShader);\n    }\n\n    private void applyCannyEdge(Texture2D source, Framebuffer target) {\n        mFramebuffer1.bind();\n        mGaussShader.use();\n        mGaussShader.setTexture(source);\n        mTexturedRectangle.draw(mGaussShader);\n\n        mFramebuffer2.bind();\n        mGradientShader.use();\n        mGradientShader.setTexture(mFramebuffer1.getTexture());\n        mTexturedRectangle.draw(mGradientShader);\n\n        target.bind();\n        mCannyShader.use();\n        mCannyShader.setTexture(mFramebuffer2.getTexture());\n        mTexturedRectangle.draw(mCannyShader);\n    }\n\n    public CannyEdgeEffect getCannyEdgeEffect() {\n        return mCannyEdgeEffect;\n    }\n\n    /**\n     * The CannyEdge Effect is a subeffect of the QrMarker Effect, it is therefore more efficient\n     * to share the resources and reuse a common cannyedge subroutine than to instantiate it as\n     * a separate effect. If one of the two effects is needed, the other comes with it for free.\n     */\n    public class CannyEdgeEffect extends BaseEffect {\n\n        @Override\n        public void init(int width, int height) {\n            if(!QrMarkerEffect.this.isInitialized()) {\n                QrMarkerEffect.this.init(width, height);\n            }\n        }\n\n        @Override\n        public void apply(Texture2D source, Framebuffer target) {\n            applyCannyEdge(source, target);\n        }\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelGaussBlurEffect.java\npublic class KernelGaussBlurEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.BLUR_GAUSS);\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/FlipEffect.java\npublic class FlipEffect extends ShaderEffect {\n\n    public enum Mode {\n        NONE,\n        VERTICAL,\n        HORIZONTAL,\n        BOTH\n    }\n\n    private Mode mMode;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final TextureFlipShaderProgram flipShader = new TextureFlipShaderProgram();\n        mMode = Mode.VERTICAL;\n\n        addParameter(new EnumParameter<>(\"Mode\", Mode.class, mMode, new EnumParameter.Delegate<Mode>() {\n            @Override\n            public void setValue(Mode value) {\n                mMode = value;\n                flipShader.setMode(mMode.ordinal());\n            }\n        }));\n\n        return flipShader;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/KernelSharpenEffect.java\npublic class KernelSharpenEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        return new TextureKernelShaderProgram(TextureKernelShaderProgram.Kernel.SHARPEN);\n    }\n}\nSpectaculum-Demo/src/main/java/net/protyposis/android/spectaculumdemo/testeffect/InterlaceEffect.java\npublic class InterlaceEffect extends ShaderEffect {\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final InterlaceShaderProgram shaderProgram = new InterlaceShaderProgram();\n\n        addParameter(new FloatParameter(\"Opacity\", 0f, 1f, 0.5f, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                shaderProgram.setOpacity(value);\n            }\n        }));\n\n        addParameter(new IntegerParameter(\"Distance\", 1, 10, 5, new IntegerParameter.Delegate() {\n            @Override\n            public void setValue(Integer value) {\n                shaderProgram.setDistance(value);\n            }\n        }));\n\n        return shaderProgram;\n    }\n}\nSpectaculum-Core/src/main/java/net/protyposis/android/spectaculum/effects/ColorFilterEffect.java\npublic class ColorFilterEffect extends ShaderEffect {\n\n    private float mR, mG, mB, mA;\n\n    @Override\n    protected TextureShaderProgram initShaderProgram() {\n        final ColorFilterShaderProgram colorFilterShader = new ColorFilterShaderProgram();\n\n        mR = 1.0f;\n        mG = 0.0f;\n        mB = 0.0f;\n        mA = 1.0f;\n\n        addParameter(new FloatParameter(\"Red\", 0.0f, 1.0f, mR, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mR = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Green\", 0.0f, 1.0f, mG, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mG = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Blue\", 0.0f, 1.0f, mB, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mB = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n        addParameter(new FloatParameter(\"Alpha\", 0.0f, 1.0f, mA, new FloatParameter.Delegate() {\n            @Override\n            public void setValue(Float value) {\n                mA = value;\n                colorFilterShader.setColor(mR, mG, mB, mA);\n            }\n        }));\n\n        return colorFilterShader;\n    }\n}\n", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "length": 8166, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "cf3d37ae2215d5f5123fcc3ad041ba23b56d19a3abad67e6"}
{"input": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.ulyssis.ipp.config.Config;\nimport org.ulyssis.ipp.config.ReaderConfig;\nimport org.ulyssis.ipp.config.Team;\nimport org.ulyssis.ipp.control.CommandProcessor;\nimport org.ulyssis.ipp.control.commands.AddTagCommand;\nimport org.ulyssis.ipp.control.commands.CorrectionCommand;\nimport org.ulyssis.ipp.control.commands.RemoveTagCommand;\nimport org.ulyssis.ipp.control.commands.SetEndTimeCommand;\nimport org.ulyssis.ipp.control.commands.SetStartTimeCommand;\nimport org.ulyssis.ipp.control.commands.SetStatusCommand;\nimport org.ulyssis.ipp.control.commands.SetStatusMessageCommand;\nimport org.ulyssis.ipp.control.commands.SetUpdateFrequencyCommand;\nimport org.ulyssis.ipp.control.handlers.EventCommandHandler;\nimport org.ulyssis.ipp.control.handlers.PingHandler;\nimport org.ulyssis.ipp.snapshot.Snapshot;\nimport org.ulyssis.ipp.snapshot.AddTagEvent;\nimport org.ulyssis.ipp.snapshot.CorrectionEvent;\nimport org.ulyssis.ipp.snapshot.EndEvent;\nimport org.ulyssis.ipp.snapshot.Event;\nimport org.ulyssis.ipp.snapshot.MessageEvent;\nimport org.ulyssis.ipp.snapshot.RemoveTagEvent;\nimport org.ulyssis.ipp.snapshot.StartEvent;\nimport org.ulyssis.ipp.snapshot.StatusChangeEvent;\nimport org.ulyssis.ipp.snapshot.UpdateFrequencyChangeEvent;\nimport org.ulyssis.ipp.status.StatusMessage;\nimport org.ulyssis.ipp.status.StatusReporter;\nimport org.ulyssis.ipp.utils.JedisHelper;\nimport org.ulyssis.ipp.utils.Serialization;\nimport org.ulyssis.ipp.TagId;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.sql.*;\nimport java.time.Instant;\nimport java.util.*;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Consumer;\nimport static org.ulyssis.ipp.processor.Database.ConnectionFlags.READ_ONLY;\nimport static org.ulyssis.ipp.processor.Database.ConnectionFlags.READ_WRITE;\n        }\n        URI uri = options.getRedisUri();\n        this.eventQueue = new LinkedBlockingQueue<>();\n        this.eventCallbacks  = new ConcurrentHashMap<>();\n        this.onStartedCallbacks = new CopyOnWriteArrayList<>();\n        this.readerListeners = new ArrayList<>();\n        this.threads = new ArrayList<>();\n        // TODO: Move status reporting and processing of commands to ZeroMQ?\n        // Also: post some stuff to a log in the db?\n        this.statusReporter = new StatusReporter(uri, Config.getCurrentConfig().getStatusChannel());\n        this.commandProcessor = new CommandProcessor(uri, Config.getCurrentConfig().getControlChannel(), statusReporter);\n        initCommandProcessor();\n        snapshot = new Snapshot(Instant.EPOCH);\n        if (!restoreFromDb()) {\n            registerInitialTags();\n        }\n    }\n\n    /**\n     * Restore the state from the database\n     *\n     * @return Whether we could restore from db, if false, we're starting from a clean slate\n     */\n    private boolean restoreFromDb() {\n        Connection connection = null;\n        Snapshot oldSnapshot = this.snapshot;\n        try {\n            connection = Database.createConnection(EnumSet.of(READ_WRITE));\n            Optional<Snapshot> snapshot = Snapshot.loadLatest(connection);\n            if (snapshot.isPresent()) {\n                this.snapshot = snapshot.get();\n                connection.commit();\n                return true;\n            } else {\n                List<Event> events = Event.loadAll(connection);\n                Snapshot snapshotBefore = this.snapshot;\n                // Instant now = Instant.now(); // TODO: Handle future events later!\n                for (Event event : events) {\n                    if (!event.isRemoved()/* && event.getTime().isBefore(now)*/) { // TODO: Future events later!\n                        this.snapshot = event.apply(this.snapshot);\n                        this.snapshot.save(connection);\n                    }\n                }\n                connection.commit();\n                return !Objects.equals(this.snapshot, snapshotBefore);\n            }\n        } catch (SQLException | IOException e) {\n            LOG.error(\"An error occurred when restoring from database!\", e);\n            this.snapshot = oldSnapshot;\n            try {\n                if (connection != null) {\n                    connection.rollback();\n                }\n            } catch (SQLException e2) {\n                LOG.error(\"Error in rollback after previous error\", e2);\n            }\n            return false;\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOG.error(\"Error while closing connection\", e);\n                }\n            }\n        }\n    }\n\n    private void registerInitialTags() {\n        Snapshot oldSnapshot = this.snapshot;\n        Connection connection = null;\n        try {\n            connection = Database.createConnection(EnumSet.of(READ_WRITE));\n            for (Team team : Config.getCurrentConfig().getTeams()) {\n                for (TagId tag : team.getTags()) {\n                    AddTagEvent e = new AddTagEvent(Instant.EPOCH, tag, team.getTeamNb());\n                    e.save(connection);\n                    this.snapshot = e.apply(this.snapshot);\n                    this.snapshot.save(connection);\n                }\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            LOG.error(\"An error occurred when registering initial tags!\", e);\n            this.snapshot = oldSnapshot;\n            try {\n                if (connection != null) {\n                    connection.rollback();\n                }\n            } catch (SQLException e2) {\n                LOG.error(\"Error in rollback after previous error\", e2);\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOG.error(\"Error while closing connection\", e);\n                }\n            }\n        }\n    }\n\n    private void initCommandProcessor() {\n        commandProcessor.addHandler(new PingHandler());\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(AddTagCommand.class, AddTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class, EndEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusCommand.class, StatusChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(", "context": "shared/src/main/java/org/ulyssis/ipp/control/commands/SetStatusCommand.java\n@JsonTypeName(\"SetStatus\")\npublic final class SetStatusCommand extends Command {\n    private final Status status;\n\n    public SetStatusCommand(Status status) {\n        super();\n        this.status = status;\n    }\n\n    @JsonCreator\n    private SetStatusCommand(@JsonProperty(\"time\") Instant time,\n                             @JsonProperty(\"status\") Status status) {\n        super(time);\n        this.status = status;\n    }\n\n    public Status getStatus() {\n        return status;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/SetUpdateFrequencyCommand.java\n@JsonTypeName(\"SetUpdateFrequency\")\npublic final class SetUpdateFrequencyCommand extends Command {\n    private final int updateFrequency;\n\n    public SetUpdateFrequencyCommand(int updateFrequency) {\n        super();\n        this.updateFrequency = updateFrequency;\n    }\n\n    @JsonCreator\n    private SetUpdateFrequencyCommand(Instant time, int updateFrequency) {\n        super(time);\n        this.updateFrequency = updateFrequency;\n    }\n\n    public int getUpdateFrequency() {\n        return updateFrequency;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/SetStatusMessageCommand.java\n@JsonTypeName(\"SetStatusMessage\")\npublic class SetStatusMessageCommand extends Command {\n    private final String message;\n\n    public SetStatusMessageCommand(String message) {\n        super();\n        this.message = message;\n    }\n\n    public SetStatusMessageCommand(Instant time, String message) {\n        super(time);\n        this.message = message;\n    }\n\n    @JsonCreator\n    private SetStatusMessageCommand(@JsonProperty(\"commandId\") String commandId,\n                                    @JsonProperty(\"time\") Instant time,\n                                    @JsonProperty(\"message\") String message) {\n        super(commandId, time);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/status/StatusReporter.java\npublic final class StatusReporter {\n    private static final Logger LOG = LogManager.getLogger(StatusReporter.class);\n    \n    private final Jedis jedis;\n    private final String statusChannel;\n\n    /**\n     * Create a new status reporter for the given Redis URI and status channel.\n     *\n     * @param redisURI\n     *        The URI for the Redis instance to report the status on. This should\n     *        be the \"own\" Redis instance.\n     * @param statusChannel\n     *        The channel to broadcast the status messages to. This channel is\n     *        made specific to the database, so if the `redisUri`\n     *        contains database `N`, and the channel is `status`,\n     *        then messages will be broadcast on channel `status:N`.\n     * @see org.ulyssis.ipp.utils.JedisHelper#dbLocalChannel(String, java.net.URI)\n     */\n    public StatusReporter(URI redisURI, String statusChannel) {\n        this.jedis = JedisHelper.get(redisURI);\n        this.statusChannel = JedisHelper.dbLocalChannel(statusChannel, redisURI);\n    }\n\n    /**\n     * Broadcast a status message.\n     *\n     * @param message\n     *        The message to broadcast\n     * @return True if the broadcast was successful, false if the broadcast was unsuccessful.\n     *         Failure to broadcast will be logged.\n     */\n    public synchronized boolean broadcast(StatusMessage message) {\n        if (jedis == null)\n            return false;\n        try {\n            jedis.publish(statusChannel.getBytes(), Serialization.getJsonMapper().writeValueAsBytes(message));\n            return true;\n        } catch (JsonProcessingException e) {\n            LOG.error(\"Error processing message {}\", message.getDetails(), e);\n            return false;\n        } catch (JedisConnectionException e) {\n            LOG.error(\"Couldn't connect to Redis when sending: {}\", message.getDetails(), e);\n            return false;\n        }\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/handlers/PingHandler.java\npublic final class PingHandler implements CommandHandler {\n\n    /**\n     * Handles the given command, which should be a PingCommand.\n     *\n     * @param command\n     *        The ping command to handle.\n     * @param callback\n     *        The ping callback, which is always invoked with true.\n     */\n    @Override\n    public void handle(Command command, Consumer<Boolean> callback) {\n        callback.accept(true);\n    }\n\n    /**\n     * Returns PingCommand.class\n     *\n     * @return PingCommand.class\n     */\n    @Override\n    public Class<? extends Command> getCommandClass() {\n        return PingCommand.class;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/config/ReaderConfig.java\npublic class ReaderConfig {\n    private URI uri;\n    private Type type = Type.LLRP;\n    private double position;\n    private List<SimulatedTeam> simulatedTeams = new ArrayList<>();\n\n    public static class SimulatedTeam {\n        private final TagId tag;\n        private final long lapTime;\n\n        @JsonCreator\n        public SimulatedTeam(\n                @JsonProperty(\"tag\") TagId tag,\n                @JsonProperty(\"lapTime\") long lapTime) {\n            this.tag = tag;\n            this.lapTime = lapTime;\n        }\n\n        public TagId getTag() {\n            return tag;\n        }\n\n        public long getLapTime() {\n            return lapTime;\n        }\n    }\n\n    public enum Type {\n        LLRP,\n        SIMULATOR\n    }\n\n    /**\n     * Private constructor used by Jackson\n     */\n    @SuppressWarnings(\"unused\")\n    private ReaderConfig() {\n    }\n\n    public URI getURI() {\n        return uri;\n    }\n    \n    /**\n     * Private setter used by Jackson\n     */\n    @SuppressWarnings(\"unused\")\n    private void setURI(URI uri) {\n        this.uri = uri;\n    }\n\n    public double getPosition() {\n        return position;\n    }\n\n    /**\n     * Private setter used by Jackson.\n     */\n    @SuppressWarnings(\"unused\")\n    private void setPosition(double position) {\n        this.position = position;\n    }\n\n    public Type getType() {\n        return type;\n    }\n\n    /**\n     * Private setter used by Jackson.\n     */\n    @SuppressWarnings(\"unused\")\n    private void setType(Type type) {\n        this.type = type;\n    }\n\n    public List<SimulatedTeam> getSimulatedTeams() {\n        return Collections.unmodifiableList(simulatedTeams);\n    }\n\n    public SimulatedTeam getSimulatedTeam(int id) {\n        return simulatedTeams.get(id);\n    }\n\n    /**\n     * Private setter used by Jackson.\n     */\n    @SuppressWarnings(\"unused\")\n    private void setSimulatedTeams(List<SimulatedTeam> simulatedTeams) {\n        this.simulatedTeams = simulatedTeams;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/RemoveTagCommand.java\n@JsonTypeName(\"RemoveTag\")\npublic final class RemoveTagCommand extends TagCommand {\n    public RemoveTagCommand(TagId tag, int teamNb) {\n        super(tag, teamNb);\n    }\n\n    public RemoveTagCommand(Instant time, TagId tag, int teamNb) {\n        super(time, tag, teamNb);\n    }\n\n    @JsonCreator\n    private RemoveTagCommand(@JsonProperty(\"commandId\") String commandId,\n                             @JsonProperty(\"time\") Instant time,\n                             @JsonProperty(\"tag\") TagId tag,\n                             @JsonProperty(\"teamNb\") int teamNb) {\n        super(commandId, time, tag, teamNb);\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/StartEvent.java\n@JsonTypeName(\"Start\")\npublic final class StartEvent extends Event {\n    /**\n     * Private constructor for Jackson\n     */\n    private StartEvent() {\n        super(Instant.MIN);\n    }\n\n    public StartEvent(Instant time) {\n        super(time);\n    }\n\n    @Override\n    protected Snapshot doApply(Snapshot snapshot) {\n        return Snapshot.builder(getTime(), snapshot).withStartTime(getTime()).build();\n    }\n\n    public static StartEvent fromCommand(Command command) {\n        assert(command instanceof SetStartTimeCommand);\n        SetStartTimeCommand cmd = (SetStartTimeCommand) command;\n        return new StartEvent(cmd.getTime());\n    }\n\n    @Override\n    public boolean isUnique() {\n        return true;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/utils/JedisHelper.java\npublic final class JedisHelper {\n\n    // Static methods only! No instances!\n    private JedisHelper() {\n    }\n\n    /**\n     * Get a new Jedis instance from the given URI\n     *\n     * The URI is formed as such:\n     * `new URI(\"redis://:password@host:port/database\")`\n     * for example:\n     * `new URI(\"redis://:hunter2@10.0.0.1:6379/0\")}`.\n     * The port, password and path can be omitted. If no path is\n     * supplied, database +0+ is selected. If no user\n     * info is supplied, then no authorization is performed.\n     * If no port is supplied, the default port +6379+\n     * is used.\n     *\n     * Use this instead of `new Jedis(uri)`, because\n     * that method does not allow to omit anything.\n     *\n     * @param uri\n     *        The URI for the Jedis instance.\n     * @return A new Jedis instance.\n     */\n    // TODO: Exceptions for wrong password, failing to parse database,...\n    public static Jedis get(URI uri) throws IllegalArgumentException {\n        int port = uri.getPort() != -1 ? uri.getPort() : 6379;\n        String host = uri.getHost();\n        Jedis result = new Jedis(host, port);\n        if (uri.getUserInfo() != null) {\n            String password = uri.getUserInfo().split(\":\")[1];\n            result.auth(password);\n        }\n        result.select(getDb(uri));\n        return result;\n    }\n\n    /**\n     * Extract the database number from the given Redis URI\n     *\n     * If the URI has the path +/N+, then +N+\n     * is returned. If the path is empty, +0+ is returned.\n     *\n     * @param uri\n     *        The URI\n     * @throws java.lang.IllegalArgumentException\n     *         The supplied path could not be parsed as an int\n     * @return The database number (+0+ for no path, +N+\n     *         if the path is +/N+)\n     */\n    public static int getDb(URI uri) throws IllegalArgumentException {\n        if (!Objects.equals(uri.getPath(), \"\")) {\n            try {\n                return Integer.parseInt(uri.getPath().split(\"/\", 2)[1]);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"The supplied path could not be parsed as an int\", e);\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Generates a channel name that is local to a database.\n     *\n     * Redis channels are not tied to a single database, but are\n     * global to the instance of Redis. We, however, want to tie\n     * these to a certain database, so we have to add some information\n     * that does that. For this reason, if the channel name is\n     * +channel+, the database number +N+ is added to it\n     * to form +channel:N+. The database number is extracted\n     * using `getDb(uri)`.\n     *\n     * @param channel\n     *        The base channel name\n     * @param uri\n     *        The URI containing the database info\n     * @return +channel:N+, where +N+ is the database number\n     * @see org.ulyssis.ipp.utils.JedisHelper#getDb(java.net.URI)\n     */\n    public static String dbLocalChannel(String channel, URI uri) {\n        return channel + \":\" + getDb(uri);\n    }\n\n    /**\n     * A helper class that implements +BinaryJedisPubSub+ using callbacks\n     * that can be registered.\n     *\n     * Instead of having to implement six methods where you probably\n     * only need one, you only need to supply callbacks for the ones you're\n     * interested in. This becomes extra useful when using Java 8, because\n     * function references or lambda functions can be used.\n     *\n     * Adding a callback is thread safe. +CopyOnWriteArrayList+ is used,\n     * because this class is optimized for frequent calling of callbacks,\n     * not for registering callback functions.\n     *\n     * All callbacks are called from the thread currently blocking on\n     * a +subscribe()+ (or similar) call.\n     *\n     * Currently, callbacks can only be added, not removed.\n     */\n    public static class BinaryCallBackPubSub extends BinaryJedisPubSub {\n        /**\n         * This is necessary, because there is no triconsumer.\n         */\n        @FunctionalInterface\n        public interface OnPMessageCallback {\n            public void accept(byte[] pattern, byte[] channel, byte[] message);\n        }\n\n        private final List<BiConsumer<byte[],byte[]>> onMessageCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<OnPMessageCallback> onPMessageCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<byte[],Integer>> onSubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<byte[],Integer>> onUnsubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<byte[],Integer>> onPSubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<byte[],Integer>> onPUnsubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n\n        /**\n         * Implementation of +onMessage+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnMessageListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onMessage(byte[] channel, byte[] message) {\n            onMessageCallbacks.stream().forEach(callback -> callback.accept(channel, message));\n        }\n\n        /**\n         * Add a callback for +onMessage+.\n         *\n         * @param callback\n         *        The callback to add. The first argument is the\n         *        channel, the second is the message.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onMessage(byte[], byte[])\n         */\n        public void addOnMessageListener(BiConsumer<byte[],byte[]> callback) {\n            onMessageCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPMessage+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnPMessageListener(org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub.OnPMessageCallback)\n         */\n        @Override\n        public void onPMessage(byte[] pattern, byte[] channel, byte[] message) {\n            onPMessageCallbacks.stream().forEach(callback -> callback.accept(pattern, channel, message));\n        }\n\n        /**\n         * Add a callback for +onPMessage+.\n         *\n         * @param callback\n         *        The callback to add. The first argument is the\n         *        pattern is the channel, the second is the channel,\n         *        and the third is the message.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onPMessage(byte[], byte[], byte[])\n         */\n        public void addOnPMessageListener(OnPMessageCallback callback) {\n            onPMessageCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onSubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnSubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onSubscribe(byte[] channel, int subscribedChannels) {\n            onSubscribeCallbacks.stream().forEach(callback -> callback.accept(channel, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onSubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the channel,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onSubscribe(byte[], int)\n         */\n        public void addOnSubscribeListener(BiConsumer<byte[], Integer> callback) {\n            onSubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onUnsubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnUnsubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onUnsubscribe(byte[] channel, int subscribedChannels) {\n            onUnsubscribeCallbacks.stream().forEach(callback -> callback.accept(channel, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onUnsubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the channel,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onUnsubscribe(byte[], int)\n         */\n        public void addOnUnsubscribeListener(BiConsumer<byte[], Integer> callback) {\n            onUnsubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPSubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnPSubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onPSubscribe(byte[] pattern, int subscribedChannels) {\n            onPSubscribeCallbacks.stream().forEach(callback -> callback.accept(pattern, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onPSubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the pattern,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onPSubscribe(byte[], int)\n         */\n        public void addOnPSubscribeListener(BiConsumer<byte[], Integer> callback) {\n            onPSubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPUnsubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#addOnPUnsubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onPUnsubscribe(byte[] pattern, int subscribedChannels) {\n            onPUnsubscribeCallbacks.stream().forEach(callback -> callback.accept(pattern, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onPUnsubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the pattern,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.BinaryCallBackPubSub#onPUnsubscribe(byte[], int)\n         */\n        public void addOnPUnsubscribeListener(BiConsumer<byte[], Integer> callback) {\n            onPUnsubscribeCallbacks.add(callback);\n        }\n    }\n\n    /**\n     * A helper class that implements +JedisPubSub+ using callbacks\n     * that can be registered.\n     *\n     * Instead of having to implement six methods where you probably\n     * only need one, you only need to supply callbacks for the ones you're\n     * interested in. This becomes extra useful when using Java 8, because\n     * function references or lambda functions can be used.\n     *\n     * Adding a callback is thread safe. +CopyOnWriteArrayList+ is used,\n     * because this class is optimized for frequent calling of callbacks,\n     * not for registering callback functions.\n     *\n     * All callbacks are called from the thread currently blocking on\n     * a +subscribe()+ (or similar) call.\n     *\n     * Currently, callbacks can only be added, not removed.\n     */\n    public static class CallBackPubSub extends JedisPubSub {\n        /**\n         * This is necessary, because there is no triconsumer.\n         */\n        @FunctionalInterface\n        public interface OnPMessageCallback {\n            public void accept(String pattern, String channel, String message);\n        }\n\n        private final List<BiConsumer<String,String>> onMessageCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<OnPMessageCallback> onPMessageCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<String,Integer>> onSubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<String,Integer>> onUnsubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<String,Integer>> onPSubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n        private final List<BiConsumer<String,Integer>> onPUnsubscribeCallbacks\n                = new CopyOnWriteArrayList<>();\n\n        /**\n         * Implementation of +onMessage+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnMessageListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onMessage(String channel, String message) {\n            onMessageCallbacks.stream().forEach(callback -> callback.accept(channel, message));\n        }\n\n        /**\n         * Add a callback for +onMessage+.\n         *\n         * @param callback\n         *        The callback to add. The first argument is the\n         *        channel, the second is the message.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onMessage(String, String)\n         */\n        public void addOnMessageListener(BiConsumer<String, String> callback) {\n            onMessageCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPMessage+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnPMessageListener(org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub.OnPMessageCallback)\n         */\n        @Override\n        public void onPMessage(String pattern, String channel, String message) {\n            onPMessageCallbacks.stream().forEach(callback -> callback.accept(pattern, channel, message));\n        }\n\n        /**\n         * Add a callback for +onPMessage+.\n         *\n         * @param callback\n         *        The callback to add. The first argument is the\n         *        pattern is the channel, the second is the channel,\n         *        and the third is the message.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onPMessage(String, String, String)\n         */\n        public void addOnPMessageListener(OnPMessageCallback callback) {\n            onPMessageCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onSubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnSubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onSubscribe(String channel, int subscribedChannels) {\n            onSubscribeCallbacks.stream().forEach(callback -> callback.accept(channel, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onSubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the channel,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onSubscribe(String, int)\n         */\n        public void addOnSubscribeListener(BiConsumer<String, Integer> callback) {\n            onSubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onUnsubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnUnsubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onUnsubscribe(String channel, int subscribedChannels) {\n            onUnsubscribeCallbacks.stream().forEach(callback -> callback.accept(channel, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onUnsubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the channel,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onUnsubscribe(String, int)\n         */\n        public void addOnUnsubscribeListener(BiConsumer<String, Integer> callback) {\n            onUnsubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPSubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnPSubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onPSubscribe(String pattern, int subscribedChannels) {\n            onPSubscribeCallbacks.stream().forEach(callback -> callback.accept(pattern, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onPSubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the pattern,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onPSubscribe(String, int)\n         */\n        public void addOnPSubscribeListener(BiConsumer<String, Integer> callback) {\n            onPSubscribeCallbacks.add(callback);\n        }\n\n        /**\n         * Implementation of +onPUnsubscribe+. Forwards the call to the registered callbacks.\n         *\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#addOnPUnsubscribeListener(java.util.function.BiConsumer)\n         */\n        @Override\n        public void onPUnsubscribe(String pattern, int subscribedChannels) {\n            onPUnsubscribeCallbacks.stream().forEach(callback -> callback.accept(pattern, subscribedChannels));\n        }\n\n        /**\n         * Add a callback for +onPUnsubscribe+\n         *\n         * @param callback\n         *        The callback to add. The first argument is the pattern,\n         *        the second is the number of subscribed channels.\n         * @see org.ulyssis.ipp.utils.JedisHelper.CallBackPubSub#onPUnsubscribe(String, int)\n         */\n        public void addOnPUnsubscribeListener(BiConsumer<String, Integer> callback) {\n            onPUnsubscribeCallbacks.add(callback);\n        }\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/Snapshot.java\npublic final class Snapshot {\n    private static final Logger LOG = LogManager.getLogger(Snapshot.class);\n\n    public static class Builder {\n        private Snapshot snapshot;\n\n        private Builder(Instant time, Snapshot other) {\n            snapshot = new Snapshot(time);\n            if (other != null) {\n                snapshot.teamTagMap = other.teamTagMap;\n                snapshot.startTime = other.startTime;\n                snapshot.endTime = other.endTime;\n                snapshot.teamStates = other.teamStates;\n                snapshot.publicTeamStates = other.publicTeamStates;\n                snapshot.statusMessage = other.statusMessage;\n                snapshot.status = other.status;\n                snapshot.updateFrequency = other.updateFrequency;\n            }\n        }\n\n        public Builder withTeamTagMap(TeamTagMap teamTagMap) {\n            this.snapshot.teamTagMap = teamTagMap;\n            return this;\n        }\n\n        public Builder withStartTime(Instant time) {\n            this.snapshot.startTime = time;\n            return this;\n        }\n\n        public Builder withEndTime(Instant time) {\n            this.snapshot.endTime = time;\n            return this;\n        }\n\n        public Builder withTeamStates(TeamStates teamStates) {\n            this.snapshot.teamStates = teamStates;\n            return this;\n        }\n\n        public Builder withPublicTeamStates(TeamStates teamStates) {\n            this.snapshot.publicTeamStates = teamStates;\n            return this;\n        }\n\n        public Builder withStatusMessage(String message) {\n            this.snapshot.statusMessage = message;\n            return this;\n        }\n\n        public Builder withStatus(Status status) {\n            this.snapshot.status = status;\n            return this;\n        }\n\n        public Builder withUpdateFrequency(int updateFrequency) {\n            this.snapshot.updateFrequency = updateFrequency;\n            return this;\n        }\n\n        public Snapshot build() {\n            return snapshot;\n        }\n    }\n\n    @JsonIgnore\n    private long id = -1;\n\n    @JsonIgnore\n    long eventId = -1;\n\n    public Optional<Long> getId() {\n        if (id != -1) return Optional.of(id);\n        else return Optional.empty();\n    }\n\n    public Optional<Long> getEventId() {\n        if (eventId != -1) return Optional.of(eventId);\n        else return Optional.empty();\n    }\n\n    /**\n     * Default constructor for Jackson\n     */\n    @SuppressWarnings(\"unused\")\n    private Snapshot() {\n    }\n\n    public Snapshot(Instant time) {\n        snapshotTime = time;\n    }\n\n    public Instant getSnapshotTime() {\n        return snapshotTime;\n    }\n\n    public TeamTagMap getTeamTagMap() {\n        return teamTagMap;\n    }\n\n    public Instant getStartTime() {\n        return startTime;\n    }\n\n    public Instant getEndTime() {\n        return endTime;\n    }\n\n    public TeamStates getTeamStates() {\n        return teamStates;\n    }\n\n    public TeamStates getPublicTeamStates() {\n        return publicTeamStates;\n    }\n\n    public String getStatusMessage() {\n        return statusMessage;\n    }\n\n    public Status getStatus() {\n        return status;\n    }\n\n    public int getUpdateFrequency() {\n        return updateFrequency;\n    }\n\n    private Instant snapshotTime = Instant.MIN;\n    private Instant startTime = Instant.MAX;\n    private Instant endTime = Instant.MAX;\n    private TeamTagMap teamTagMap = new TeamTagMap();\n    private TeamStates teamStates;\n    private TeamStates publicTeamStates;\n    {\n        teamStates = new TeamStates();\n        publicTeamStates = teamStates;\n    }\n    private String statusMessage = \"\";\n    private Status status = Status.NoResults;\n    private int updateFrequency = 3;\n\n    public static Builder builder(Instant time, Snapshot other) {\n        return new Builder(time, other);\n    }\n\n    public static Optional<Snapshot> loadForEvent(Connection connection, Event event) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\", \\\"data\\\" FROM \\\"snapshots\\\" WHERE \\\"event\\\" = ?\";\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            stmt.setLong(1, event.getId().get());\n            LOG.debug(\"executing query: {}\", stmt);\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                String data = rs.getString(\"data\");\n                Snapshot result = Serialization.getJsonMapper().readValue(data, Snapshot.class);\n                result.id = rs.getLong(\"id\");\n                result.eventId = event.getId().get();\n                return Optional.of(result);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public static Optional<Snapshot> loadLatest(Connection connection) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\", \\\"data\\\", \\\"event\\\" FROM \\\"snapshots\\\" ORDER BY \\\"time\\\" DESC FETCH FIRST ROW ONLY\";\n        try (Statement stmt = connection.createStatement();\n             ResultSet rs = stmt.executeQuery(statement)) {\n            if (rs.next()) {\n                String data = rs.getString(\"data\");\n                Snapshot result = Serialization.getJsonMapper().readValue(data, Snapshot.class);\n                result.id = rs.getLong(\"id\");\n                result.eventId = rs.getLong(\"event\");\n                return Optional.of(result);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public static Optional<Snapshot> loadBefore(Connection connection, Instant time) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\", \\\"data\\\", \\\"event\\\" FROM \\\"snapshots\\\" \" +\n                \"WHERE \\\"time\\\" < ? ORDER BY \\\"time\\\" DESC, \\\"event\\\" DESC FETCH FIRST ROW ONLY\";\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            stmt.setTimestamp(1, Timestamp.from(time));\n            LOG.debug(\"Executing query: {}\", stmt);\n            ResultSet rs = stmt.executeQuery();\n            if (rs.next()) {\n                String data = rs.getString(\"data\");\n                Snapshot result = Serialization.getJsonMapper().readValue(data, Snapshot.class);\n                result.id = rs.getLong(\"id\");\n                result.eventId = rs.getLong(\"event\");\n                return Optional.of(result);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public void save(Connection connection) throws SQLException {\n        if (id != -1) return;\n        try (PreparedStatement statement = connection.prepareStatement(\n                \"INSERT INTO \\\"snapshots\\\" (\\\"time\\\",\\\"data\\\",\\\"event\\\") VALUES (?,?,?)\", Statement.RETURN_GENERATED_KEYS)) {\n            statement.setTimestamp(1, Timestamp.from(snapshotTime));\n            String serialized;\n            try {\n                serialized = Serialization.getJsonMapper().writeValueAsString(this);\n            } catch (JsonProcessingException e) {\n                assert false; // TODO(Roel): Programming error\n                return;\n            }\n            statement.setString(2, serialized);\n            statement.setLong(3, eventId);\n            statement.executeUpdate();\n            ResultSet keys = statement.getGeneratedKeys();\n            keys.next();\n            this.id = keys.getLong(1);\n        }\n    }\n\n    public static void deleteAfter(Connection connection, Snapshot snapshot) throws SQLException {\n        String statement =\n                \"DELETE FROM \\\"snapshots\\\" WHERE \\\"time\\\" > ? OR (\\\"time\\\" = ? AND \\\"event\\\" > ?)\";\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            Timestamp timestamp = Timestamp.from(snapshot.getSnapshotTime());\n            stmt.setTimestamp(1, timestamp);\n            stmt.setTimestamp(2, timestamp);\n            stmt.setLong(3, snapshot.getEventId().orElse(-1L));\n            LOG.debug(\"Executing query: {}\", stmt);\n            int affectedRows = stmt.executeUpdate();\n            LOG.debug(\"deleteAfter affected {} rows\", affectedRows);\n        }\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/MessageEvent.java\n@JsonTypeName(\"Message\")\npublic final class MessageEvent extends Event {\n    private final String message;\n\n    @JsonCreator\n    public MessageEvent(\n            @JsonProperty(\"time\") Instant time,\n            @JsonProperty(\"message\") String message) {\n        super(time);\n        this.message = message;\n    }\n\n    @Override\n    protected Snapshot doApply(Snapshot before) {\n        return Snapshot.builder(getTime(), before).withStatusMessage(message).build();\n    }\n\n    public static MessageEvent fromCommand(Command command) {\n        assert(command instanceof SetStatusMessageCommand);\n        SetStatusMessageCommand cmd = (SetStatusMessageCommand) command;\n        return new MessageEvent(cmd.getTime(), cmd.getMessage());\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    @Override\n    public boolean isRemovable() {\n        return true;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/CorrectionEvent.java\n@JsonTypeName(\"Correction\")\npublic final class CorrectionEvent extends Event {\n    private int teamNb;\n    private int correction;\n\n    /**\n     * Constructor for Jackson\n     */\n    @SuppressWarnings(\"unused\")\n    private CorrectionEvent() {\n        super(Instant.MIN);\n    }\n\n    /**\n     * Create an event representing a correction of score.\n     *\n     * @param time\n     *        The time at which the corection is performed.\n     * @param teamNb\n     *        The number of the team to correct the score of.\n     * @param correction\n     *        The number of laps that should be added (positive)\n     *        or removed (negative)\n     */\n    public CorrectionEvent(Instant time, int teamNb, int correction) {\n        super(time);\n        this.teamNb = teamNb;\n        this.correction = correction;\n    }\n\n    @SuppressWarnings(\"unused\")\n    public int getTeamNb() {\n        return teamNb;\n    }\n\n    @SuppressWarnings(\"unused\")\n    public int getCorrection() {\n        return correction;\n    }\n\n    protected Snapshot doApply(Snapshot snapshot) {\n        TeamStates oldTeamStates = snapshot.getTeamStates();\n        Optional<TeamState> oldTeamState = oldTeamStates.getStateForTeam(teamNb);\n        TeamState newTeamState;\n        if (oldTeamState.isPresent()) {\n            newTeamState = oldTeamState.get().addCorrection(correction);\n        } else {\n            newTeamState = new TeamState().addCorrection(correction);\n        }\n        return Snapshot.builder(getTime(), snapshot)\n                .withTeamStates(snapshot.getTeamStates().setStateForTeam(teamNb, newTeamState))\n                .build();\n    }\n\n    public static CorrectionEvent fromCommand(Command command) {\n        assert(command instanceof CorrectionCommand);\n        CorrectionCommand cmd = (CorrectionCommand) command;\n        return new CorrectionEvent(cmd.getTime(), cmd.getTeamNb(), cmd.getCorrection());\n    }\n\n    @Override\n    public boolean isRemovable() {\n        return true;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/Event.java\n@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property=\"type\")\n@JsonSubTypes({ @JsonSubTypes.Type(value=StartEvent.class),\n                @JsonSubTypes.Type(value=EndEvent.class),\n                @JsonSubTypes.Type(value=AddTagEvent.class),\n                @JsonSubTypes.Type(value=RemoveTagEvent.class),\n                @JsonSubTypes.Type(value=CorrectionEvent.class),\n                @JsonSubTypes.Type(value=TagSeenEvent.class),\n                @JsonSubTypes.Type(value=IdentityEvent.class),\n                @JsonSubTypes.Type(value=MessageEvent.class),\n                @JsonSubTypes.Type(value=StatusChangeEvent.class)})\npublic abstract class Event {\n    private static final Logger LOG = LogManager.getLogger(Event.class);\n\n    @JsonIgnore\n    private long id = -1;\n    @JsonIgnore\n    private boolean removed = false;\n\n    private Instant time;\n\n    protected Event(Instant time) {\n        this.time = time;\n    }\n\n    @JsonIgnore\n    public final Optional<Long> getId() {\n        if (id != -1) return Optional.of(id);\n        else return Optional.empty();\n    }\n\n    @JsonIgnore\n    public final boolean isRemoved() {\n        if (id == -1) throw new IllegalStateException(\"Trying to request removed state of event not in db\");\n        return removed;\n    }\n\n    public final Instant getTime() {\n        return time;\n    }\n\n    /**\n     * Determines whether this event should be isUnique, defaults to false\n     *\n     * @return whether this event should be isUnique (default implementation = false)\n     */\n    @JsonIgnore\n    public boolean isUnique() {\n        return false;\n    }\n\n    /**\n     * Determines whether this event can be removed or undone.\n     *\n     * @return whether this event can be removed or undone (default implementation = isUnique())\n     */\n    @JsonIgnore\n    public boolean isRemovable() {\n        return isUnique();\n    }\n\n    /**\n     * Apply this event to a snapshot, yielding the new snapshot\n     */\n    protected abstract Snapshot doApply(Snapshot before);\n\n    public final Snapshot apply(Snapshot before) {\n        assert !removed;\n        Snapshot result = doApply(before);\n        if (result == before && before.getEventId().isPresent()) {\n            // We need to copy it anyway\n            result = Snapshot.builder(getTime(), before).build();\n        }\n        result.eventId = this.id;\n        return result;\n    }\n\n    // TODO: How to deal with deserialization problem?\n    public static List<Event> loadAll(Connection connection) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\", \\\"data\\\", \\\"removed\\\" FROM \\\"events\\\" ORDER BY \\\"time\\\" ASC, \\\"id\\\" ASC\";\n        List<Event> events = new ArrayList<>();\n        try (Statement stmt = connection.createStatement();\n             ResultSet result = stmt.executeQuery(statement)) {\n            while (result.next()) {\n                String evString = result.getString(\"data\");\n                Event event = Serialization.getJsonMapper().readValue(evString, Event.class);\n                event.id = result.getLong(\"id\");\n                event.removed = result.getBoolean(\"removed\");\n                events.add(event);\n            }\n        }\n        return events;\n    }\n\n    public static Optional<Event> loadUnique(Connection connection, Class<? extends Event> eventType) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\", \\\"data\\\" FROM \\\"events\\\" WHERE \\\"type\\\" = ? AND \\\"removed\\\" = false\";\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            stmt.setString(1, eventType.getSimpleName());\n            ResultSet result = stmt.executeQuery();\n            if (result.next()) {\n                String evString = result.getString(\"data\");\n                Event event = Serialization.getJsonMapper().readValue(evString, Event.class);\n                event.id = result.getLong(\"id\");\n                event.removed = false;\n                return Optional.of(event);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public static Optional<Event> load(Connection connection, long id) throws SQLException, IOException {\n        try (PreparedStatement statement =\n                connection.prepareStatement(\n                        \"SELECT \\\"data\\\",\\\"removed\\\" FROM \\\"events\\\" WHERE \\\"id\\\"=?\")) {\n            statement.setLong(1, id);\n            ResultSet result = statement.executeQuery();\n            if (result.next()) {\n                String evString = result.getString(\"data\");\n                Event event = Serialization.getJsonMapper().readValue(evString, Event.class);\n                event.id = id;\n                event.removed = result.getBoolean(\"removed\");\n                return Optional.of(event);\n            } else {\n                return Optional.empty();\n            }\n        }\n    }\n\n    public static List<Event> loadFrom(Connection connection, Instant time) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\",\\\"data\\\",\\\"removed\\\" FROM \\\"events\\\" \" +\n                \"WHERE \\\"time\\\" >= ? ORDER BY \\\"time\\\" ASC, \\\"id\\\" ASC\";\n        List<Event> events = new ArrayList<>();\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            stmt.setTimestamp(1, Timestamp.from(time));\n            ResultSet rs = stmt.executeQuery();\n            while (rs.next()) {\n                String evString = rs.getString(\"data\");\n                Event event = Serialization.getJsonMapper().readValue(evString, Event.class);\n                event.id = rs.getLong(\"id\");\n                event.removed = rs.getBoolean(\"removed\");\n                events.add(event);\n            }\n        }\n        return events;\n    }\n\n    public static List<Event> loadAfter(Connection connection, Instant time, long id) throws SQLException, IOException {\n        String statement = \"SELECT \\\"id\\\",\\\"data\\\",\\\"removed\\\" FROM \\\"events\\\" \" +\n                \"WHERE \\\"time\\\" > ? OR (\\\"time\\\" = ? AND \\\"id\\\" > ?) ORDER BY \\\"time\\\" ASC, \\\"id\\\" ASC\";\n        List<Event> events = new ArrayList<>();\n        try (PreparedStatement stmt = connection.prepareStatement(statement)) {\n            stmt.setTimestamp(1, Timestamp.from(time));\n            stmt.setTimestamp(2, Timestamp.from(time));\n            stmt.setLong(3, id);\n            LOG.debug(\"Executing query: {}\", stmt);\n            ResultSet rs = stmt.executeQuery();\n            while (rs.next()) {\n                String evString = rs.getString(\"data\");\n                Event event = Serialization.getJsonMapper().readValue(evString, Event.class);\n                event.id = rs.getLong(\"id\");\n                event.removed = rs.getBoolean(\"removed\");\n                events.add(event);\n            }\n        }\n        LOG.debug(\"Loaded {} events\", events.size());\n        return events;\n    }\n\n    public void save(Connection connection) throws SQLException {\n        if (id != -1) return;\n        try (PreparedStatement statement = connection.prepareStatement(\n                    \"INSERT INTO \\\"events\\\" (\\\"time\\\",\\\"type\\\",\\\"data\\\",\\\"removed\\\") \" +\n                            \"VALUES (?,?,?,?)\", Statement.RETURN_GENERATED_KEYS)) {\n            statement.setTimestamp(1, Timestamp.from(time));\n            String serialized;\n            try {\n                serialized = Serialization.getJsonMapper().writeValueAsString(this);\n            } catch (JsonProcessingException e) {\n                assert false;\n                throw new IllegalStateException(e); // TODO(Roel): is this appropriate?\n            }\n            statement.setString(2, this.getClass().getSimpleName());\n            statement.setString(3, serialized);\n            statement.setBoolean(4, removed);\n            statement.executeUpdate();\n            ResultSet keys = statement.getGeneratedKeys();\n            keys.next();\n            this.id = keys.getLong(1);\n        }\n    }\n\n    public void setRemoved(Connection connection, boolean removed) throws SQLException {\n        if (!isRemovable()) {\n            assert false; // This is a programming error\n            return;\n        }\n        PreparedStatement statement =\n                connection.prepareStatement(\n                        \"UPDATE \\\"events\\\" SET \\\"removed\\\"=? WHERE \\\"id\\\"=?\");\n        statement.setBoolean(1, removed);\n        statement.setLong(2, id);\n        boolean result = statement.execute();\n        assert(!result);\n        this.removed = true;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/UpdateFrequencyChangeEvent.java\n@JsonTypeName(\"UpdateFrequencyChange\")\npublic final class UpdateFrequencyChangeEvent extends Event {\n    private final int updateFrequency;\n\n    @JsonCreator\n    public UpdateFrequencyChangeEvent(Instant time, int updateFrequency) {\n        super(time);\n        this.updateFrequency = updateFrequency;\n    }\n\n    @Override\n    protected Snapshot doApply(Snapshot before) {\n        return Snapshot.builder(getTime(), before).withUpdateFrequency(updateFrequency).build();\n    }\n\n    public int getUpdateFrequency() {\n        return updateFrequency;\n    }\n\n    public static UpdateFrequencyChangeEvent fromCommand(Command command) {\n        assert(command instanceof SetUpdateFrequencyCommand);\n        SetUpdateFrequencyCommand cmd = (SetUpdateFrequencyCommand) command;\n        return new UpdateFrequencyChangeEvent(cmd.getTime(), cmd.getUpdateFrequency());\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/utils/Serialization.java\npublic final class Serialization {\n    private static final ObjectMapper jsonMapper;\n\n    static {\n        jsonMapper = new ObjectMapper();\n        jsonMapper.findAndRegisterModules();\n    }\n\n    // Static methods only! No instances!\n    private Serialization() {\n    }\n\n    /**\n     * Get a JSON mapper, with all modules registered.\n     *\n     * This is equivalent to:\n     *\n     * [source,java]\n     * --\n     * jsonMapper = new ObjectMapper();\n     * jsonMapper.findAndRegisterModules();\n     * --\n     *\n     * @return A JSON ObjectMapper\n     */\n    public static ObjectMapper getJsonMapper() {\n        return jsonMapper;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/config/Team.java\npublic final class Team {\n    private static final Logger LOG = LogManager.getLogger(Team.class);\n\n    private int teamNb;\n    private String name;\n    private ImmutableList<TagId> tags;\n\n    @SuppressWarnings(\"unused\")\n    private Team() {\n        this.teamNb = 0;\n        this.name = \"\";\n        tags = ImmutableList.of();\n    }\n\n    public Team(int teamNb, String name) {\n        this.teamNb = teamNb;\n        this.name = name;\n        this.tags = ImmutableList.of();\n    }\n\n    public Team(int teamNb, String name, ImmutableList<TagId> tags) {\n        this.teamNb = teamNb;\n        this.name = name;\n        this.tags = tags;\n    }\n\n    public int getTeamNb() {\n        return teamNb;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public ImmutableList<TagId> getTags() {\n        return tags;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/EndEvent.java\n@JsonTypeName(\"End\")\npublic final class EndEvent extends Event {\n    /**\n     * Constructor for Jackson\n     */\n    @SuppressWarnings(\"unused\")\n    private EndEvent() {\n        super(Instant.MIN);\n    }\n\n    public EndEvent(Instant time) {\n        super(time);\n    }\n\n    protected Snapshot doApply(Snapshot snapshot) {\n        return Snapshot.builder(getTime(), snapshot).withEndTime(getTime()).build();\n    }\n\n    public static EndEvent fromCommand(Command command) {\n        assert(command instanceof SetEndTimeCommand);\n        SetEndTimeCommand cmd = (SetEndTimeCommand) command;\n        return new EndEvent(cmd.getTime());\n    }\n\n    @Override\n    public boolean isUnique() {\n        return true;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/AddTagEvent.java\n@JsonTypeName(\"AddTag\")\npublic final class AddTagEvent extends TagEvent {\n    @JsonCreator\n    public AddTagEvent(\n            @JsonProperty(\"time\") Instant time,\n            @JsonProperty(\"tag\") TagId tag,\n            @JsonProperty(\"teamNb\") int teamNb) {\n        super(time, tag, teamNb);\n    }\n\n    protected Snapshot doApply(Snapshot snapshot) {\n        TeamTagMap newTeamTagMap = snapshot.getTeamTagMap().addTagToTeam(getTag(), getTeamNb());\n        return Snapshot.builder(getTime(), snapshot).withTeamTagMap(newTeamTagMap).build();\n    }\n\n    public static AddTagEvent fromCommand(Command command) {\n        assert(command instanceof AddTagCommand);\n        AddTagCommand addTagCommand = (AddTagCommand) command;\n        return new AddTagEvent(\n            addTagCommand.getTime(),\n            addTagCommand.getTag(),\n            addTagCommand.getTeamNb()\n        );\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/CommandProcessor.java\npublic final class CommandProcessor implements Runnable {\n    private static final Logger LOG = LogManager.getLogger(CommandProcessor.class);\n\n    private final Map<Class<? extends Command>, CommandHandler> commandHandlers = new HashMap<>();\n    private final Jedis jedis;\n    private final StatusReporter reporter;\n    private final String channel;\n\n    private BinaryJedisPubSub listener;\n\n    public CommandProcessor(URI redisUri, String commandChannel, String statusChannel) {\n        this(redisUri, JedisHelper.dbLocalChannel(commandChannel, redisUri),\n                new StatusReporter(redisUri, statusChannel));\n    }\n\n    public CommandProcessor(URI redisUri, String channel, StatusReporter statusReporter) {\n        this.jedis = JedisHelper.get(redisUri);\n        this.channel = JedisHelper.dbLocalChannel(channel, redisUri);\n        this.reporter = statusReporter;\n    }\n\n    public void run() {\n        jedis.subscribe(createCommandListener(), channel.getBytes());\n    }\n\n    private BinaryJedisPubSub createCommandListener() {\n        JedisHelper.BinaryCallBackPubSub pubSub = new JedisHelper.BinaryCallBackPubSub();\n        listener = pubSub;\n        pubSub.addOnMessageListener(this::onCommandMessage);\n        return pubSub;\n    }\n\n    private void onCommandMessage(byte[] channel, byte[] message) {\n        assert (Arrays.equals(channel, this.channel.getBytes()));\n        try {\n            Command command = Serialization.getJsonMapper().readValue(message, Command.class);\n            handleCommand(command);\n        } catch (IOException e) {\n            LOG.error(\"Couldn't parse command: {}\", new String(message), e);\n        }\n    }\n\n    public void addHandler(CommandHandler handler) {\n        commandHandlers.put(handler.getCommandClass(), handler);\n    }\n\n    private void handleCommand(Command command) {\n        LOG.debug(\"Handing command {}: {}\", command.getCommandId(), command.getClass().toString());\n        if (commandHandlers.containsKey(command.getClass())) {\n            commandHandlers.get(command.getClass()).handle(command, notifyCommandExecuted(command));\n        } else {\n            notifyCommandUnsupported(command);\n        }\n    }\n\n    private Consumer<Boolean> notifyCommandExecuted(Command command) {\n        return (result) -> {\n            if (result) {\n                notifySuccess(command);\n            } else {\n                notifyFailure(command);\n            }\n        };\n    }\n\n    private void notifySuccess(Command command) {\n        reporter.broadcast(new StatusMessage(StatusMessage.MessageType.COMMAND_COMPLETE, command.getCommandId()));\n    }\n\n    private void notifyFailure(Command command) {\n        reporter.broadcast(new StatusMessage(StatusMessage.MessageType.COMMAND_FAILED, command.getCommandId()));\n    }\n\n    private void notifyCommandUnsupported(Command command) {\n        reporter.broadcast(new StatusMessage(StatusMessage.MessageType.COMMAND_UNSUPPORTED, command.getCommandId()));\n    }\n\n    public void stop() {\n        try {\n            listener.unsubscribe();\n        } catch (JedisConnectionException ignored) {\n        }\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/status/StatusMessage.java\npublic final class StatusMessage {\n    private MessageType type;\n    private String details;\n\n    public enum MessageType {\n        /**\n         * The reader sends this message when no updates have been received for a while\n         */\n        NO_UPDATES,\n        /**\n         * Notifies that the system has started up\n         */\n        STARTED_UP,\n        /**\n         * Notifies that the startup has failed\n         */\n        STARTUP_FAILURE,\n        /**\n         * Notifies that the system is being shut down\n         */\n        SHUTDOWN,\n        /**\n         * Signals that the command given executed successfully.\n         *\n         * The details field will contain the command id.\n         *\n         * @see org.ulyssis.ipp.control\n         */\n        COMMAND_COMPLETE,\n        /**\n         * Signals that no command handler is installed for the given command\n         *\n         * The details field will contain the command id.\n         *\n         * @see org.ulyssis.ipp.control\n         */\n        COMMAND_UNSUPPORTED,\n        /**\n         * Signals that the command failed to execute\n         *\n         * The details field will contain the command id.\n         *\n         * @see org.ulyssis.ipp.control\n         */\n        COMMAND_FAILED,\n        /**\n         * Signals that the processor's snapshot has been updated\n         */\n        NEW_SNAPSHOT,\n        /**\n         * Signals a miscellaneous error. The details field will contain more information\n         * about the error.\n         */\n        MISC_ERROR\n    }\n\n    /**\n     * Create a new status message with the given type and details.\n     *\n     * This message is to be broadcast by a StatusReporter to the\n     * status channel.\n     *\n     * @param type\n     *        The type of the status\n     * @param details\n     *        The details. The form of this field depends\n     *        on the type of message.\n     * @see org.ulyssis.ipp.status.StatusReporter\n     */\n    @JsonCreator\n    public StatusMessage(@JsonProperty(\"type\") MessageType type,\n                         @JsonProperty(\"details\") String details) {\n        this.type = type;\n        this.details = details;\n    }\n\n    public MessageType getType() {\n        return type;\n    }\n\n    public String getDetails() {\n        return details;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/AddTagCommand.java\n@JsonTypeName(\"AddTag\")\npublic final class AddTagCommand extends TagCommand {\n\n    /**\n     * Create an AddTagCommand for the given tag and team number.\n     *\n     * The time is set to be the current time.\n     *\n     * @param tag\n     *        The tag to add.\n     * @param teamNb\n     *        The team number to add the tag for.\n     */\n    public AddTagCommand(TagId tag, int teamNb) {\n        super(tag, teamNb);\n    }\n\n    /**\n     * Create an AddTagCommand for the given tag and team number at the given time.\n     *\n     * @param time\n     *        The time when to add the tag, this can be in the future for\n     *        an anticipated adding of a tag, or in the past, to add a tag\n     *        afterwards (e.g. as a correction)\n     * @param tag\n     *        The tag to add.\n     * @param teamNb\n     *        The team number to add the tag for.\n     */\n    public AddTagCommand(Instant time, TagId tag, int teamNb) {\n        super(time, tag, teamNb);\n    }\n\n    /*\n     * Only for deserialization.\n     */\n    @JsonCreator\n    private AddTagCommand(@JsonProperty(\"commandId\") String commandId,\n                          @JsonProperty(\"time\") Instant time,\n                          @JsonProperty(\"tag\") TagId tag,\n                          @JsonProperty(\"teamNb\") int teamNb) {\n        super(commandId, time, tag, teamNb);\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/SetEndTimeCommand.java\n@JsonTypeName(\"SetEndTime\")\npublic final class SetEndTimeCommand extends Command {\n    public SetEndTimeCommand() {\n        super();\n    }\n\n    public SetEndTimeCommand(Instant endTime) {\n        super(endTime);\n    }\n\n    @JsonCreator\n    private SetEndTimeCommand(@JsonProperty(\"commandId\") String commandId,\n                              @JsonProperty(\"time\") Instant time) {\n        super(commandId, time);\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/RemoveTagEvent.java\n@JsonTypeName(\"RemoveTag\")\npublic final class RemoveTagEvent extends TagEvent {\n    @JsonCreator\n    public RemoveTagEvent(\n            @JsonProperty(\"time\") Instant time,\n            @JsonProperty(\"tag\") TagId tag,\n            @JsonProperty(\"teamNb\") int teamNb) {\n        super(time, tag, teamNb);\n    }\n\n    @Override\n    protected Snapshot doApply(Snapshot snapshot) {\n        TeamTagMap newTeamTagMap = snapshot.getTeamTagMap().removeTag(getTag());\n        return Snapshot.builder(getTime(), snapshot).withTeamTagMap(newTeamTagMap).build();\n    }\n\n    public static RemoveTagEvent fromCommand(Command command) {\n        assert(command instanceof RemoveTagCommand);\n        RemoveTagCommand cmd = (RemoveTagCommand) command;\n        return new RemoveTagEvent(cmd.getTime(), cmd.getTag(), cmd.getTeamNb());\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/control/handlers/EventCommandHandler.java\npublic final class EventCommandHandler<EventT extends Event> implements CommandHandler {\n    private final Class<? extends Command> clazz;\n    private final Function<Command, EventT> toEvent;\n    private final BiConsumer<Event, Consumer<Boolean>> processCallback;\n\n    public EventCommandHandler(Class<? extends Command> clazz,\n                               Function<Command, EventT> toEvent,\n                               BiConsumer<Event, Consumer<Boolean>> processCallback) {\n        this.clazz = clazz;\n        this.toEvent = toEvent;\n        this.processCallback = processCallback;\n    }\n\n    @Override\n    public void handle(Command command, Consumer<Boolean> callback) {\n        Event event = toEvent.apply(command);\n        processCallback.accept(event, callback);\n    }\n\n    @Override\n    public Class<? extends Command> getCommandClass() {\n        return clazz;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/CorrectionCommand.java\n@JsonTypeName(\"Correction\")\npublic class CorrectionCommand extends Command {\n    private final int teamNb;\n    private final int correction;\n\n    /**\n     * Create a CorrectionCommand\n     * @param teamNb\n     *        The team number to correct\n     * @param correction\n     *        The correction in nb. of laps. Positive adds laps,\n     *        negative removes laps.\n     */\n    public CorrectionCommand(int teamNb, int correction) {\n        super();\n        this.teamNb = teamNb;\n        this.correction = correction;\n    }\n\n    public CorrectionCommand(Instant time, int teamNb, int correction) {\n        super(time);\n        this.teamNb = teamNb;\n        this.correction = correction;\n    }\n\n    @JsonCreator\n    private CorrectionCommand(@JsonProperty(\"commandId\") String commandId,\n                              @JsonProperty(\"time\") Instant time,\n                              @JsonProperty(\"teamNb\") int teamNb,\n                              @JsonProperty(\"correction\") int correction) {\n        super(commandId, time);\n        this.teamNb = teamNb;\n        this.correction = correction;\n    }\n\n    public int getTeamNb() {\n        return teamNb;\n    }\n\n    public int getCorrection() {\n        return correction;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/TagId.java\n@JsonSerialize(using=TagId.Serializer.class)\n@JsonDeserialize(using=TagId.Deserializer.class)\npublic final class TagId {\n    private final String id;\n    private final String lowerCaseId;\n    private final int hashCode;\n\n    static class Serializer extends JsonSerializer<TagId> {\n        @Override\n        public void serialize(TagId value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n            jgen.writeString(value.toString());\n        }\n    }\n\n    static class Deserializer extends JsonDeserializer<TagId> {\n        @Override\n        public TagId deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n            return new TagId(jp.getValueAsString());\n        }\n    }\n\n    /**\n     * = Create a new TagId from the given byte array.\n     *\n     * @param id\n     *        The tag id in byte array form. It will be\n     *        converted to a lowercase hex form.\n     */\n    public TagId(byte[] id) {\n        this(BaseEncoding.base16().lowerCase().encode(id));\n    }\n\n    /**\n     * = Create a new TagId from the given byte list.\n     *\n     * @param id\n     *        The tag id in byte list form. It will be\n     *        converted to a lowercase hex form.\n     */\n    public TagId(List<Byte> id) {\n        this(BaseEncoding.base16().lowerCase().encode(Bytes.toArray(id)));\n    }\n\n    /**\n     * = Create a new TagId\n     *\n     * @param id\n     *        A string that uniquely identifies the tag\n     * @throws java.lang.NullPointerException\n     *         A NullPointerException will be thrown if the given id is null.\n     */\n    public TagId(String id) throws NullPointerException {\n        if (id == null) throw new NullPointerException(\"The tag id is not allowed to be null!\");\n        this.id = id;\n        this.lowerCaseId = id.toLowerCase();\n        this.hashCode = this.lowerCaseId.hashCode();\n    }\n\n    /**\n     * = Get the tag id as a string\n     *\n     * @return This tag id as a string\n     */\n    @Override\n    public String toString() {\n        return id;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) return true;\n        if (other == null) return false;\n        if (!(other instanceof TagId)) return false;\n        return this.lowerCaseId.equals(((TagId) other).lowerCaseId);\n    }\n\n    @Override\n    public int hashCode() {\n        return this.hashCode;\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/control/commands/SetStartTimeCommand.java\n@JsonTypeName(\"SetStartTime\")\npublic final class SetStartTimeCommand extends Command {\n    public SetStartTimeCommand() {\n        super();\n    }\n\n    public SetStartTimeCommand(Instant startTime) {\n        super(startTime);\n    }\n\n    @JsonCreator\n    private SetStartTimeCommand(@JsonProperty(\"commandId\") String commandId,\n                                @JsonProperty(\"time\") Instant time) {\n        super(commandId, time);\n    }\n}\nshared/src/main/java/org/ulyssis/ipp/config/Config.java\npublic class Config {\n    private static final Logger LOG = LogManager.getLogger(Config.class);\n\n    private double trackLength;\n    private ImmutableList<ReaderConfig> readers = ImmutableList.of();\n    private ImmutableList<URI> speedwayURIs = ImmutableList.of();\n    private ImmutableList<Team> teams = ImmutableList.of();\n    private long retryInterval = 5000L;\n    private long minUpdateInterval = 5000L;\n    private long maxUpdateInterval = 30000L;\n    private String statusChannel = \"status\";\n    private String updateChannel = \"update\";\n    private String updatesList = \"updates\";\n    private String updatesSet = \"updates\";\n    private String controlChannel = \"control\";\n\n    /**\n     * Private constructor used by Jackson\n     */\n    private Config() {\n    }\n    \n    /**\n     * Create a configuration from the given configuration file.\n     * \n     * Expects the configuration file to be UTF-8 formatted.\n     */\n    public static Optional<Config> fromConfigurationFile(Path configFile) {\n        try {\n            byte[] config = Files.readAllBytes(configFile);\n            Charset charset = Charset.forName(\"utf-8\");\n            String configString = charset.decode(ByteBuffer.wrap(config)).toString();\n            return fromConfigurationString(configString);\n        } catch (IOException e) {\n            LOG.error(\"Error reading configuration file: {}\", configFile, e);\n            return Optional.empty();\n        }\n    }\n    \n    /**\n     * Create a configuration from the given JSON configuration string.\n     */\n    public static Optional<Config> fromConfigurationString(String configuration) {\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.findAndRegisterModules();\n        try {\n            Config result = mapper.readValue(configuration, Config.class);\n            return Optional.of(result);\n        } catch (IOException e) {\n            LOG.error(\"Error reading configuration\", e);\n            return Optional.empty();\n        }\n    }\n\n    /**\n     * Get the track length in meters.\n     */\n    public double getTrackLength() {\n        return trackLength;\n    }\n\n    public ImmutableList<ReaderConfig> getReaders() {\n        return readers;\n    }\n    public ReaderConfig getReader(int readerId) {\n        return this.readers.get(readerId);\n    }\n    public int getNbReaders() {\n        return readers.size();\n    }\n\n    public ImmutableList<URI> getSpeedwayURIs() {\n        return speedwayURIs;\n    }\n    /**\n     * Get the URI of the Impinj Speedway corresponding\n     * to the reader with the given id. This id ranges from 0 to\n     * getSpeedwayURIs.size() - 1\n     */\n    public URI getSpeedwayURI(int readerId) {\n        return speedwayURIs.get(readerId);\n    }\n    public int getNbSpeedways() {\n        return speedwayURIs.size();\n    }\n\n    /**\n     * The retry interval for connections in ms.\n     */\n    public long getRetryInterval() {\n        return retryInterval;\n    }\n    \n    /**\n     * The minimum amount of time in ms between two updates, any\n     * update within this amount of time is ignored.\n     */\n    public long getMinUpdateInterval() {\n        return minUpdateInterval;\n    }\n    \n    /**\n     * The maximum time in ms to wait for an update before issuing a warning.\n     */\n    public long getMaxUpdateInterval() {\n        return maxUpdateInterval;\n    }\n    \n    /**\n     * Gets the Redis channel name on which status updates are posted.\n     *\n     * Defaults to \"status\".\n     *\n     * Generally, the db id will be added to the prefix, because\n     * pubsub channels are not database-specific in Redis.\n     */\n    public String getStatusChannel() {\n        return statusChannel;\n    }\n    \n    /**\n     * The prefix of the channel where the reader announces new updates.\n     *\n     * This prefix defaults to \"update\". Generally, the db id will be added\n     * to the prefix, because if multiple readers would use the same Redis\n     * instance (e.g. for testing purposes), these would collide, because\n     * pubsub channels are not database-specific.\n     */\n    public String getUpdateChannel() {\n        return updateChannel;\n    }\n\n    /**\n     * The prefix of the channel where an entity in the system receives control messages.\n     *\n     * This defaults to \"control\". Generally, the db id will be added to this prefix,\n     * because pubsub channels are not database-specific in Redis.\n     */\n    public String getControlChannel() {\n        return controlChannel;\n    }\n\n    /**\n     * The name of the list where readers push their updates on.\n     *\n     * Defaults to \"updates\".\n     */\n    public String getUpdatesList() {\n        return updatesList;\n    }\n\n    /**\n     * The name of the set in which updates are stored in the processor.\n     */\n    public String getUpdatesSet() {\n        return updatesSet;\n    }\n\n    /**\n     * The teams, with team number and name.\n     */\n    public ImmutableList<Team> getTeams() {\n        return teams;\n    }\n\n    // TODO: Maybe find some other solution?\n    private static Config currentConfig;\n\n    public static void setCurrentConfig(Config config) {\n        currentConfig = config;\n    }\n\n    public static Config getCurrentConfig() {\n        return currentConfig;\n    }\n}\nProcessor/src/main/java/org/ulyssis/ipp/snapshot/StatusChangeEvent.java\n@JsonTypeName(\"StatusChange\")\npublic final class StatusChangeEvent extends Event {\n    private final Status status;\n\n    @JsonCreator\n    public StatusChangeEvent(@JsonProperty(\"time\") Instant time,\n                             @JsonProperty(\"status\")Status status) {\n        super(time);\n        this.status = status;\n    }\n\n    public Status getStatus() {\n        return status;\n    }\n\n    public static StatusChangeEvent fromCommand(Command command) {\n        assert(command instanceof SetStatusCommand);\n        SetStatusCommand cmd = (SetStatusCommand) command;\n        return new StatusChangeEvent(cmd.getTime(), cmd.getStatus());\n    }\n\n    @Override\n    protected Snapshot doApply(Snapshot before) {\n        Snapshot.Builder builder = Snapshot.builder(getTime(), before).withStatus(status);\n        if (!before.getStatus().isPublic() && status.isPublic()) {\n            builder.withPublicTeamStates(before.getTeamStates());\n        }\n        return builder.build();\n    }\n\n    @Override\n    public boolean isRemovable() {\n        return true;\n    }\n}\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "length": 6872, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "2c164c959e45cbd40c80a8618dfe2fbe7d12a613e0ce71c4"}
{"input": "package uw.task.container;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport uw.task.TaskData;\nimport uw.task.TaskFactory;\nimport uw.task.TaskListenerManager;\nimport uw.task.TaskRunner;\nimport uw.task.api.TaskAPI;\nimport uw.task.conf.TaskMetaInfoManager;\nimport uw.task.conf.TaskProperties;\nimport uw.task.entity.TaskRunnerConfig;\nimport uw.task.entity.TaskRunnerLog;\nimport uw.task.exception.TaskDataException;\nimport uw.task.exception.TaskPartnerException;\nimport uw.task.listener.RunnerTaskListener;\nimport uw.task.util.GlobalRateLimiter;\nimport uw.task.util.LocalRateLimiter;\nimport uw.task.util.MiscUtils;\n\n\n\n\n/**\n * 在此处接受MQ信息，并进行处理。\n *\n * @author axeon\n */\npublic class TaskRunnerContainer {\n\n    private static final Logger log = LoggerFactory.getLogger(TaskRunnerContainer.class);\n\n    /**\n     * TaskFactory\n     */\n    private TaskFactory taskFactory;\n\n    /**\n     * 服务端任务API\n     */\n    private TaskAPI taskAPI;\n\n    /**\n     * 全局流量限制服务\n     */\n    private GlobalRateLimiter globalRateLimiter;\n\n    /**\n     * 本地流量限制服务\n     */", "context": "src/main/java/uw/task/util/LocalRateLimiter.java\npublic class LocalRateLimiter {\r\n\r\n    private ConcurrentHashMap<String, RateLimiter> map = new ConcurrentHashMap<>();\r\n\r\n    /**\r\n     * 尝试获得限制允许状态。\r\n     *\r\n     * @param name\r\n     * @return\r\n     */\r\n    public boolean tryAcquire(String name, int requests, int seconds, long waitTime, int permits) {\r\n        if (requests == 0 || seconds == 0) {\r\n            return true;\r\n        }\r\n        final double rate = (double) requests / (double) seconds;\r\n        RateLimiter limiter = map.computeIfAbsent(name, key -> RateLimiter.create(rate));\r\n        if (limiter != null) {\r\n            //检查并修改\r\n            if (limiter.getRate() != rate) {\r\n                limiter.setRate(rate);\r\n            }\r\n            return limiter.tryAcquire(permits, waitTime, TimeUnit.SECONDS);\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\nsrc/main/java/uw/task/TaskFactory.java\npublic class TaskFactory {\n\n    private static final Logger log = LoggerFactory.getLogger(TaskFactory.class);\n\n    /**\n     * rabbitTemplate模板.\n     */\n    private RabbitTemplate rabbitTemplate;\n\n    /**\n     * 全局sequence序列，主要用于taskLog日志。\n     */\n    private GlobalSequenceManager globalSequenceManager;\n\n    /**\n     * 用于本地执行任务的taskConsumer。\n     */\n    private TaskRunnerContainer taskRunnerContainer;\n\n    /**\n     * rpc异步调用线程池\n     */\n    private ExecutorService taskRpcService = null;\n\n    /**\n     * 最大重试次数。\n     */\n    private static final int MAX_RETRY_TIMES = 10;\n\n\n    public TaskFactory(TaskProperties taskProperties, RabbitTemplate rabbitTemplate,\n                       TaskRunnerContainer taskRunnerContainer, GlobalSequenceManager globalSequenceManager) {\n        this.rabbitTemplate = rabbitTemplate;\n        this.taskRunnerContainer = taskRunnerContainer;\n        this.globalSequenceManager = globalSequenceManager;\n        taskRpcService = new ThreadPoolExecutor(taskProperties.getTaskRpcMinThreadNum(),\n                taskProperties.getTaskRpcMaxThreadNum(), 20L, TimeUnit.SECONDS, new SynchronousQueue<>(),\n                new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"TaskRpc-%d\").build(), new ThreadPoolExecutor.CallerRunsPolicy());\n\n    }\n\n    /**\n     * 把任务发送到队列中\n     *\n     * @param taskData 任务数据\n     */\n    public void sendToQueue(final TaskData<?, ?> taskData) {\n        Message message = buildTaskQueueMessage(taskData);\n        String queue = message.getMessageProperties().getConsumerQueue();\n        //此处可能出现The channelMax limit is reached.报错，所以进行重试。\n        for (int i = 0; i < MAX_RETRY_TIMES; i++) {\n            try {\n                if (i > 0) {\n                    Thread.sleep(i * 500);\n                }\n                rabbitTemplate.send(queue, queue, message);\n                return;\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n        throw new TaskRuntimeException(\"The channelMax limit is reached!\");\n    }\n\n    /**\n     * 构造Task消息对象，此方法用于提前构造TaskData。\n     *\n     * @param taskData\n     * @return\n     */\n    private Message buildTaskQueueMessage(final TaskData taskData) {\n        taskData.setId(globalSequenceManager.nextId(\"task_runner_log\"));\n        taskData.setQueueDate(new Date());\n        taskData.setRunType(TaskData.RUN_TYPE_GLOBAL);\n        MessageProperties messageProperties = new MessageProperties();\n        messageProperties.setConsumerQueue(TaskMetaInfoManager.getFitQueue(taskData));\n        Message msg = rabbitTemplate.getMessageConverter().toMessage(taskData, messageProperties);\n        return msg;\n    }\n\n    /**\n     * 同步执行任务，可能会导致阻塞。\n     * 在调用的时候，尤其要注意，taskData对象不可改变！\n     *\n     * @param taskData 任务数据\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <TP, RD> TaskData<TP, RD> runTask(final TaskData<TP, RD> taskData) {\n        taskData.setId(globalSequenceManager.nextId(\"task_runner_log\"));\n        taskData.setQueueDate(new Date());\n        // 当自动RPC，并且本地有runner，而且target匹配的时候，运行在本地模式下。\n        if (taskData.getRunType() == TaskData.RUN_TYPE_AUTO_RPC && TaskMetaInfoManager.checkRunnerRunLocal(taskData)) {\n            // 启动本地运行模式。\n            taskData.setRunType(TaskData.RUN_TYPE_LOCAL);\n        }\n        if (taskData.getRunType() == TaskData.RUN_TYPE_LOCAL) {\n            taskRunnerContainer.process(taskData);\n            return taskData;\n        } else {\n            taskData.setRunType(TaskData.RUN_TYPE_GLOBAL_RPC);\n            //加入优先级信息。\n            MessageProperties messageProperties = new MessageProperties();\n            messageProperties.setPriority(10);\n            messageProperties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);\n            messageProperties.setExpiration(\"180000\");\n            Message message = rabbitTemplate.getMessageConverter().toMessage(taskData, messageProperties);\n            // 全局运行模式\n            String queue = TaskMetaInfoManager.getFitQueue(taskData);\n            //此处可能出现The channelMax limit is reached.报错，所以进行重试。\n            for (int i = 0; i < MAX_RETRY_TIMES; i++) {\n                try {\n                    if (i > 0) {\n                        Thread.sleep(i * 500);\n                    }\n                    Message retMessage = rabbitTemplate.sendAndReceive(queue, queue, message);\n                    return (TaskData<TP, RD>) rabbitTemplate.getMessageConverter().fromMessage(retMessage);\n                } catch (Exception e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n            throw new TaskRuntimeException(\"The channelMax limit is reached!\");\n        }\n    }\n\n    /**\n     * 同步执行任务，可能会导致阻塞。\n     * 在调用的时候，尤其要注意，taskData对象不可改变！\n     *\n     * @param taskData 任务数据\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <TP, RD> TaskData<TP, RD> runTaskLocal(final TaskData<TP, RD> taskData) {\n        taskData.setId(globalSequenceManager.nextId(\"task_runner_log\"));\n        taskData.setQueueDate(new Date());\n        // 当自动RPC，并且本地有runner，而且target匹配的时候，运行在本地模式下。\n        if (taskData.getRunType() == TaskData.RUN_TYPE_AUTO_RPC && TaskMetaInfoManager.checkRunnerRunLocal(taskData)) {\n            // 启动本地运行模式。\n            taskData.setRunType(TaskData.RUN_TYPE_LOCAL);\n        }\n        if (taskData.getRunType() == TaskData.RUN_TYPE_LOCAL) {\n            taskRunnerContainer.process(taskData);\n            return taskData;\n        } else {\n            throw new TaskRuntimeException(taskData.getClass().getName() + \" is not a local task! \");\n        }\n    }\n\n    /**\n     * 远程运行任务，并返回future<TaskData<?,?>>。 如果需要获得数据，可以使用futrue.get()来获得。\n     * 此方法要谨慎使用，因为task存在限速，大并发下可能会导致线程数超。\n     * 在调用的时候，尤其要注意，taskData对象不可改变！\n     *\n     * @param taskData 任务数据\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <TP, RD> Future<TaskData<TP, RD>> runTaskAsync(final TaskData<TP, RD> taskData) {\n        taskData.setId(globalSequenceManager.nextId(\"task_runner_log\"));\n        taskData.setQueueDate(new Date());\n\n        // 当自动RPC，并且本地有runner，而且target匹配的时候，运行在本地模式下。\n        if (taskData.getRunType() == TaskData.RUN_TYPE_AUTO_RPC && TaskMetaInfoManager.checkRunnerRunLocal(taskData)) {\n            // 启动本地运行模式。\n            taskData.setRunType(TaskData.RUN_TYPE_LOCAL);\n        }\n        if (taskData.getRunType() == TaskData.RUN_TYPE_LOCAL) {\n            // 启动本地运行模式。\n            return taskRpcService.submit(() -> {\n                taskRunnerContainer.process(taskData);\n                return taskData;\n            });\n        } else {\n            // 全局运行模式\n            taskData.setRunType(TaskData.RUN_TYPE_GLOBAL_RPC);\n            //加入优先级信息。\n            MessageProperties messageProperties = new MessageProperties();\n            messageProperties.setPriority(10);\n            messageProperties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);\n            messageProperties.setExpiration(\"180000\");\n            Message message = rabbitTemplate.getMessageConverter().toMessage(taskData, messageProperties);\n            String queue = TaskMetaInfoManager.getFitQueue(taskData);\n            return taskRpcService.submit(() -> {\n                //此处可能出现The channelMax limit is reached.报错，所以进行重试。\n                for (int i = 0; i < MAX_RETRY_TIMES; i++) {\n                    try {\n                        if (i > 0) {\n                            Thread.sleep(i * 500);\n                        }\n                        Message retMessage = rabbitTemplate.sendAndReceive(queue, queue, message);\n                        return (TaskData<TP, RD>) rabbitTemplate.getMessageConverter().fromMessage(retMessage);\n                    } catch (Exception e) {\n                        log.error(e.getMessage(), e);\n                    }\n                }\n                throw new TaskRuntimeException(\"The channelMax limit is reached!\");\n            });\n        }\n    }\n\n    /**\n     * 获得队列信息。\n     *\n     * @param queueName\n     * @return 0 是消息数量 1 是消费者数量\n     */\n    public int[] getQueueInfo(String queueName) {\n        AMQP.Queue.DeclareOk declareOk = this.rabbitTemplate.execute(new ChannelCallback<AMQP.Queue.DeclareOk>() {\n            public AMQP.Queue.DeclareOk doInRabbit(Channel channel) throws Exception {\n                return channel.queueDeclarePassive(queueName);\n            }\n        });\n        return new int[]{declareOk.getMessageCount(), declareOk.getConsumerCount()};\n    }\n\n    /**\n     * 清除队列。\n     *\n     * @param queueName\n     * @return 被清除的队列数\n     */\n    public int purgeQueue(String queueName) {\n        return this.rabbitTemplate.execute(channel -> {\n            AMQP.Queue.PurgeOk queuePurged = channel.queuePurge(queueName);\n            return queuePurged.getMessageCount();\n        });\n    }\n\n}\nsrc/main/java/uw/task/listener/RunnerTaskListener.java\npublic interface RunnerTaskListener {\r\n\r\n    /**\r\n     * 执行前的监听器。\r\n     *\r\n     * @param data\r\n     */\r\n    public void onPreExecute(TaskData data);\r\n\r\n    /**\r\n     * 执行后的监听器。\r\n     *\r\n     * @param data\r\n     */\r\n    public void onPostExecute(TaskData data);\r\n\r\n}\r\nsrc/main/java/uw/task/util/GlobalRateLimiter.java\npublic class GlobalRateLimiter {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(GlobalRateLimiter.class);\r\n\r\n    private static final String REDIS_PREFIX = \"TaskRateLimit:\";\r\n\r\n    private final RedisTemplate<String, Long> redisTemplate;\r\n\r\n    /**\r\n     * LUA脚本。\r\n     * 返回值为：可用请求数,等待毫秒数。\r\n     */\r\n    private static final RedisScript<Long> LUA_RATE_LIMIT = RedisScript.of(\r\n            \"local key = KEYS[1];\\n\" +\r\n                    \"local requests = tonumber(ARGV[1]);\\n\" +\r\n                    \"local millis = tonumber(ARGV[2])*1000;\\n\" +\r\n                    \"local permits = tonumber(ARGV[3]);\\n\" +\r\n                    \"local remainRequests=0;\\n\" +\r\n                    \"local waitMillis=0;\\n\" +\r\n                    \"local nowRate= redis.call('INCRBY', key,permits);\\n\" +\r\n                    \"if (nowRate==permits) then \\n\" +//如果是第一次执行，设置有效期保护。\r\n                    \"    redis.call('PEXPIRE',key,millis);\\n\" +\r\n                    \"end\\n\" +\r\n                    \"remainRequests = requests-nowRate;\\n\" +\r\n                    \"if (remainRequests<1) then \\n\" +//请求数超过限制\r\n                    \"    waitMillis = redis.call('PTTL',key);\\n\" +\r\n                    \"    if (waitMillis == -1) then \\n\" +\r\n                    \"        redis.call('PEXPIRE',key,millis);\\n\" +\r\n                    \"        waitMillis = millis;\\n\" +\r\n                    \"    end\\n\" +\r\n                    \"end \\n\" +\r\n                    \"return waitMillis\", Long.class);\r\n\r\n\r\n    public GlobalRateLimiter(final RedisConnectionFactory redisConnectionFactory) {\r\n        redisTemplate = new RedisTemplate<String, Long>();\r\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\r\n        redisTemplate.setValueSerializer(new GenericToStringSerializer<Long>(Long.class));\r\n        redisTemplate.setExposeConnection(true);\r\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\r\n        redisTemplate.afterPropertiesSet();\r\n    }\r\n\r\n    /**\r\n     * 尝试可否获得授权。\r\n     *\r\n     * @param permits       申请访问次数\r\n     * @return 如果未超限则返回0，-1为不确定时间，其他为需要等待的毫秒数\r\n     */\r\n    public long tryAcquire(String name, int requests, int seconds, int permits) {\r\n        if (requests == 0 || seconds == 0) {\r\n            return 0;\r\n        }\r\n        Long waitLimit = redisTemplate.execute(LUA_RATE_LIMIT, Collections.singletonList(REDIS_PREFIX + name), requests,seconds, permits);\r\n        if (waitLimit==null)\r\n            return 0;\r\n        else\r\n            return waitLimit;\r\n    }\r\n\r\n}\r\nsrc/main/java/uw/task/exception/TaskPartnerException.java\npublic class TaskPartnerException extends Exception {\r\n\r\n    /**\r\n     * <code>serialVersionUID</code> 的注释\r\n     */\r\n    private static final long serialVersionUID = 8713460933603499992L;\r\n\r\n    public TaskPartnerException() {\r\n        super();\r\n    }\r\n\r\n    public TaskPartnerException(String msg) {\r\n        super(msg);\r\n    }\r\n\r\n    public TaskPartnerException(Throwable nestedThrowable) {\r\n        super(nestedThrowable);\r\n    }\r\n\r\n    public TaskPartnerException(String msg, Throwable nestedThrowable) {\r\n        super(msg, nestedThrowable);\r\n    }\r\n\r\n}\nsrc/main/java/uw/task/TaskData.java\npublic class TaskData<TP, RD> implements Serializable {\n\n    /**\n     * serialVersionUID\n     */\n    private static final long serialVersionUID = 1333167065535557828L;\n\n    /**\n     * 任务状态:未设置\n     */\n    public static final int STATE_UNKNOWN = 0;\n\n    /**\n     * 任务状态:成功\n     */\n    public static final int STATE_SUCCESS = 1;\n\n    /**\n     * 任务状态:程序错误\n     */\n    public static final int STATE_FAIL_PROGRAM = 2;\n\n    /**\n     * 任务状态:配置错误，如超过流量限制\n     */\n    public static final int STATE_FAIL_CONFIG = 3;\n\n    /**\n     * 任务状态:第三方接口错误\n     */\n    public static final int STATE_FAIL_PARTNER = 4;\n\n    /**\n     * 任务状态:数据错误\n     */\n    public static final int STATE_FAIL_DATA = 5;\n\n    /**\n     * 运行模式：本地运行\n     */\n    public static final int RUN_TYPE_LOCAL = 1;\n\n    /**\n     * 运行模式：全局运行\n     */\n    public static final int RUN_TYPE_GLOBAL = 3;\n\n    /**\n     * 运行模式：全局运行RPC返回结果\n     */\n    public static final int RUN_TYPE_GLOBAL_RPC = 5;\n\n    /**\n     * 运行模式：自动运行RPC返回结果，使用此模式，会自动选择本地还远程运行模式。\n     */\n    public static final int RUN_TYPE_AUTO_RPC = 6;\n\n    /**\n     * 自动重试[为了兼容,默认开启重试]\n     */\n    public static final int RETRY_TYPE_AUTO = 0;\n\n    /**\n     * 用户手工重试\n     */\n    public static final int RETRY_TYPE_MANUAL = 1;\n\n    /**\n     * id，此序列值由框架自动生成，无需手工设置。\n     */\n    private long id;\n\n    /**\n     * 关联TAG，由调用方设定，用于第三方统计信息。\n     */\n    private String refTag;\n\n    /**\n     * 关联id，由调用方根据需要设置，用于第三方统计信息。\n     */\n    private long refId;\n\n    /**\n     * 关联子id，由调用方根据需要设置，用于第三方统计信息。\n     */\n    private long refSubId;\n\n    /**\n     * 关联对象，此对象不存入数据库，但可以通过Listener来访问。\n     */\n    @JsonIgnore\n    private Object refObject;\n\n    /**\n     * 流量限制TAG。\n     */\n    private String rateLimitTag;\n\n    /**\n     * 需要执行的类名，此数值必须由调用方设置。\n     */\n    private String taskClass = \"\";\n\n    /**\n     * 任务标签，用于细分任务队列，支持多实例运行。\n     */\n    private String taskTag = \"\";\n\n    /**\n     * 任务延迟毫秒数。一般这个时间不宜太长，大多数情况下不要超过60秒。\n     */\n    private long taskDelay;\n\n    /**\n     * 执行参数，此数值必须有调用方设置。\n     */\n    private TP taskParam;\n\n    /**\n     * 任务运行类型，默认为自动RPC，根据情况选择本地还是远程运行。\n     */\n    private int runType = RUN_TYPE_AUTO_RPC;\n\n    /**\n     * 重试类型\n     */\n    private int retryType;\n\n    /**\n     * 指定运行目标。\n     */\n    private String runTarget = \"\";\n\n    /**\n     * 任务运行时主机IP，此信息由框架自动设置。\n     */\n    private String hostIp;\n\n    /**\n     * 任务运行时主机ID（可能为docker的ContainerID），此信息由框架自动设置。\n     */\n    private String hostId;\n\n    /**\n     * 进入队列时间，此信息由框架自动设置。\n     */\n    private Date queueDate;\n\n    /**\n     * 开始消费时间，此信息由框架自动设置。\n     */\n    private Date consumeDate;\n\n    /**\n     * 开始运行时间，此信息由框架自动设置。\n     */\n    private Date runDate;\n\n    /**\n     * 运行结束日期，此信息由框架自动设置。\n     */\n    private Date finishDate;\n\n    /**\n     * 执行信息，用于存储框架自动设置。\n     */\n    private RD resultData;\n\n    /**\n     * 出错信息\n     */\n    private String errorInfo;\n\n    /**\n     * 已经执行的次数，此信息由框架自动设置。\n     */\n    private int ranTimes;\n\n    /**\n     * 执行状态，此信息由框架根据异常自动设置。\n     */\n    private int state;\n\n    /**\n     * @return the id\n     */\n    public long getId() {\n        return id;\n    }\n\n    /**\n     * @param id the id to set\n     */\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    /**\n     * @return the refId\n     */\n    public long getRefId() {\n        return refId;\n    }\n\n    /**\n     * @param refId the refId to set\n     */\n    public void setRefId(long refId) {\n        this.refId = refId;\n    }\n\n    /**\n\t * @return the refSubId\n\t */\n\tpublic long getRefSubId() {\n\t\treturn refSubId;\n\t}\n\n\t/**\n\t * @param refSubId the refSubId to set\n\t */\n\tpublic void setRefSubId(long refSubId) {\n\t\tthis.refSubId = refSubId;\n\t}\n\n\t/**\n\t * @return the refTag\n\t */\n\tpublic String getRefTag() {\n\t\treturn refTag;\n\t}\n\n\t/**\n\t * @param refTag the refTag to set\n\t */\n\tpublic void setRefTag(String refTag) {\n\t\tthis.refTag = refTag;\n\t}\n\n\t/**\n\t * @return the rateLimitTag\n\t */\n\tpublic String getRateLimitTag() {\n\t\treturn rateLimitTag;\n\t}\n\n\t/**\n\t * @param rateLimitTag the rateLimitTag to set\n\t */\n\tpublic void setRateLimitTag(String rateLimitTag) {\n\t\tthis.rateLimitTag = rateLimitTag;\n\t}\n\n\t/**\n\t * @return the refObject\n\t */\n\tpublic Object getRefObject() {\n\t\treturn refObject;\n\t}\n\n    /**\n     * @param refObject the refObject to set\n     */\n    public void setRefObject(Object refObject) {\n        this.refObject = refObject;\n    }\n\n    /**\n     * @return the taskClass\n     */\n    public String getTaskClass() {\n        return taskClass;\n    }\n\n    /**\n     * @param taskClass the taskClass to set\n     */\n    public void setTaskClass(String taskClass) {\n        this.taskClass = taskClass;\n    }\n\n    /**\n\t * @return the taskTag\n\t */\n\tpublic String getTaskTag() {\n\t\treturn taskTag;\n\t}\n\n\tpublic long getTaskDelay() {\n\t\treturn taskDelay;\n\t}\n\n\tpublic void setTaskDelay(long taskDelay) {\n\t\tthis.taskDelay = taskDelay;\n\t}\n\n\t/**\n\t * @param taskTag the taskTag to set\n\t */\n\tpublic void setTaskTag(String taskTag) {\n\t\tthis.taskTag = taskTag;\n\t}\n\n\t/**\n     * @return the taskParam\n     */\n    public TP getTaskParam() {\n        return taskParam;\n    }\n\n    /**\n     * @param taskParam the taskParam to set\n     */\n    public void setTaskParam(TP taskParam) {\n        this.taskParam = taskParam;\n    }\n\n    /**\n     * @return the runType\n     */\n    public int getRunType() {\n        return runType;\n    }\n\n    /**\n     * @param runType the runType to set\n     */\n    public void setRunType(int runType) {\n        this.runType = runType;\n    }\n\n    public int getRetryType() {\n        return retryType;\n    }\n\n    public void setRetryType(int retryType) {\n        this.retryType = retryType;\n    }\n\n    /**\n     * @return the runTarget\n     */\n    public String getRunTarget() {\n        return runTarget;\n    }\n\n    /**\n     * @param runTarget the runTarget to set\n     */\n    public void setRunTarget(String runTarget) {\n        this.runTarget = runTarget;\n    }\n\n    /**\n     * @return the hostIp\n     */\n    public String getHostIp() {\n        return hostIp;\n    }\n\n    /**\n     * @param hostIp the hostIp to set\n     */\n    public void setHostIp(String hostIp) {\n        this.hostIp = hostIp;\n    }\n\n    /**\n     * @return the hostId\n     */\n    public String getHostId() {\n        return hostId;\n    }\n\n    /**\n     * @param hostId the hostId to set\n     */\n    public void setHostId(String hostId) {\n        this.hostId = hostId;\n    }\n\n    /**\n     * @return the queueDate\n     */\n    public Date getQueueDate() {\n        return queueDate;\n    }\n\n    /**\n     * @param queueDate the queueDate to set\n     */\n    public void setQueueDate(Date queueDate) {\n        this.queueDate = queueDate;\n    }\n\n    /**\n     * @return the consumeDate\n     */\n    public Date getConsumeDate() {\n        return consumeDate;\n    }\n\n    /**\n     * @param consumeDate the consumeDate to set\n     */\n    public void setConsumeDate(Date consumeDate) {\n        this.consumeDate = consumeDate;\n    }\n\n    /**\n     * @return the runDate\n     */\n    public Date getRunDate() {\n        return runDate;\n    }\n\n    /**\n     * @param runDate the runDate to set\n     */\n    public void setRunDate(Date runDate) {\n        this.runDate = runDate;\n    }\n\n    /**\n     * @return the finishDate\n     */\n    public Date getFinishDate() {\n        return finishDate;\n    }\n\n    /**\n     * @param finishDate the finishDate to set\n     */\n    public void setFinishDate(Date finishDate) {\n        this.finishDate = finishDate;\n    }\n\n    /**\n     * @return the resultData\n     */\n    public RD getResultData() {\n        return resultData;\n    }\n\n    /**\n     * @param resultData the resultData to set\n     */\n    public void setResultData(RD resultData) {\n        this.resultData = resultData;\n    }\n\n    /**\n     * @return the errorInfo\n     */\n    public String getErrorInfo() {\n        return errorInfo;\n    }\n\n    /**\n     * @param errorInfo the errorInfo to set\n     */\n    public void setErrorInfo(String errorInfo) {\n        this.errorInfo = errorInfo;\n    }\n\n    /**\n     * @return the ranTimes\n     */\n    public int getRanTimes() {\n        return ranTimes;\n    }\n\n    /**\n     * @param ranTimes the ranTimes to set\n     */\n    public void setRanTimes(int ranTimes) {\n        this.ranTimes = ranTimes;\n    }\n\n    /**\n     * @return the status\n     */\n    public int getState() {\n        return state;\n    }\n\n    /**\n     * @param status the status to set\n     */\n    public void setState(int status) {\n        this.state = status;\n    }\n\n}\nsrc/main/java/uw/task/TaskRunner.java\npublic abstract class TaskRunner<TP, RD> {\r\n\r\n    /**\r\n     * 执行任务。\r\n     * 业务层面的异常请根据实际情况手动Throw TaskException:\r\n     * 目前支持的异常:\r\n     * 1. TaskDataException 任务数据异常\r\n     * 2. TaskPartnerException 任务合作方异常\r\n     *\r\n     * @param taskData 数据\r\n     * @throws Exception 异常\r\n     * @return 指定的返回对象\r\n     */\r\n    public abstract RD runTask(TaskData<TP, RD> taskData) throws Exception;\r\n\r\n    /**\r\n     * 初始化配置信息\r\n     *\r\n     * @return TaskRunnerConfig配置\r\n     */\r\n    public abstract TaskRunnerConfig initConfig();\r\n\r\n    /**\r\n     * 初始化联系人信息\r\n     *\r\n     * @return TaskContact联系人信息\r\n     */\r\n    public abstract TaskContact initContact();\r\n}\nsrc/main/java/uw/task/conf/TaskMetaInfoManager.java\npublic class TaskMetaInfoManager {\r\n\r\n\t/**\r\n\t * 运行主机配置\r\n\t */\r\n\tstatic List<String> targetConfig = null;\r\n\r\n\t/**\r\n\t * Runner任务实例缓存。\r\n\t */\r\n\t@SuppressWarnings(\"rawtypes\")\r\n\tstatic Map<String, TaskRunner> runnerMap = new HashMap<>();\r\n\r\n\t/**\r\n\t * Cron任务实例缓存。\r\n\t */\r\n\tstatic Map<String, TaskCroner> cronerMap = new HashMap<>();\r\n\r\n\t/**\r\n\t * Runner任务配置缓存\r\n\t */\r\n\tstatic ConcurrentHashMap<String, TaskRunnerConfig> runnerConfigMap = new ConcurrentHashMap<>();\r\n\r\n\t/**\r\n\t * Cron任务配置缓存。\r\n\t */\r\n\tstatic ConcurrentHashMap<String, TaskCronerConfig> cronerConfigMap = new ConcurrentHashMap<>();\r\n\r\n\t/**\r\n\t * 获得任务运行实例。\r\n\t *\r\n\t * @param taskClass\r\n\t * @return\r\n\t */\r\n\tpublic static TaskRunner<?, ?> getRunner(String taskClass) {\r\n\t\treturn runnerMap.get(taskClass);\r\n\t}\r\n\r\n\t/**\r\n\t * 检查一个runner是否可以在本地运行。\r\n\t * \r\n\t * @param taskData\r\n\t * @return\r\n\t */\r\n\tpublic static boolean checkRunnerRunLocal(TaskData<?, ?> taskData) {\r\n\t\treturn runnerMap.containsKey(taskData.getTaskClass());\r\n\t}\r\n\r\n\t/**\r\n\t * 根据服务器端Queue列表，返回合适的key。\r\n\t * \r\n\t * @return\r\n\t */\r\n\tpublic static String getFitQueue(TaskData<?, ?> data) {\r\n\t\tStringBuilder sb = new StringBuilder(100);\r\n\t\tsb.append(data.getTaskClass()).append(\"#\");\r\n\t\tif (data.getTaskTag() != null && data.getTaskTag().length() > 0) {\r\n\t\t\tsb.append(data.getTaskTag());\r\n\t\t}\r\n\t\tsb.append(\"$\");\r\n\t\tif (data.getRunTarget() != null && data.getRunTarget().length() > 0) {\r\n\t\t\tsb.append(data.getRunTarget());\r\n\t\t}\r\n\t\tString all = sb.toString();\r\n\t\tif (runnerConfigMap.containsKey(all)) {\r\n\t\t\treturn all;\r\n\t\t}\r\n        // 检测去除TAG的情况\r\n        if (!all.contains(\"#$\")) {\r\n            String test = all.substring(0, all.indexOf('#') + 1) + all.substring(all.lastIndexOf('$'), all.length());\r\n            if (runnerConfigMap.containsKey(test)) {\r\n                return test;\r\n            }\r\n        }\r\n\t\t// 检测去除目标的情况\r\n\t\tif (!all.endsWith(\"$\")) {\r\n\t\t\tString test = all.substring(0, all.lastIndexOf('$') + 1);\r\n\t\t\tif (runnerConfigMap.containsKey(test)) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 两个都去除的情况\r\n\t\tif (!all.endsWith(\"#$\")) {\r\n\t\t\tString test = data.getTaskClass() + \"#$\";\r\n\t\t\tif (runnerConfigMap.containsKey(test)) {\r\n\t\t\t\treturn test;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 最后都没匹配到，返回原始数据\r\n\t\treturn all;\r\n\t}\r\n\r\n\t/**\r\n\t * 获得任务配置\r\n\t *\r\n\t * @param data\r\n\t * @return\r\n\t */\r\n\tpublic static TaskRunnerConfig getRunnerConfig(TaskData<?, ?> data) {\r\n\t\tTaskRunnerConfig config = null;\r\n\t\tStringBuilder sb = new StringBuilder(100);\r\n\t\tsb.append(data.getTaskClass()).append(\"#\");\r\n\t\tif (data.getTaskTag() != null && data.getTaskTag().length() > 0) {\r\n\t\t\tsb.append(data.getTaskTag());\r\n\t\t}\r\n\t\tsb.append(\"$\");\r\n\t\tif (data.getRunTarget() != null && data.getRunTarget().length() > 0) {\r\n\t\t\tsb.append(data.getRunTarget());\r\n\t\t}\r\n\t\tString all = sb.toString();\r\n\t\tconfig = runnerConfigMap.get(all);\r\n\t\tif (config != null) {\r\n\t\t\treturn config;\r\n\t\t}\r\n        // 检测去除TAG的情况\r\n        if (!all.contains(\"#$\")) {\r\n            String test = all.substring(0, all.indexOf('#') + 1) + all.substring(all.lastIndexOf('$'), all.length());\r\n            config = runnerConfigMap.get(test);\r\n            if (config != null) {\r\n                return config;\r\n            }\r\n        }\r\n\t\t// 检测去除目标的情况\r\n\t\tif (!all.endsWith(\"$\")) {\r\n\t\t\tString test = all.substring(0, all.lastIndexOf('$') + 1);\r\n\t\t\tconfig = runnerConfigMap.get(test);\r\n\t\t\tif (config != null) {\r\n\t\t\t\treturn config;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// 两个都去除的情况\r\n\t\tif (!all.endsWith(\"#$\")) {\r\n\t\t\tString test = data.getTaskClass() + \"#$\";\r\n\t\t\tconfig = runnerConfigMap.get(test);\r\n\t\t\tif (config != null) {\r\n\t\t\t\treturn config;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new RuntimeException(\"找不到任务配置: taskClass = \" + data.getTaskClass());\r\n\t}\r\n\r\n\t/**\r\n\t * 更新系统队列表。\r\n\t * \r\n\t * @param config\r\n\t */\r\n\tstatic void updateSysQueue(final TaskRunnerConfig config) {\r\n\t\tString key = getRunnerConfigKey(config);\r\n\t\t// 检测是否老的TaskRunnerConfig是否是本地的完整配置，如果是，则不管。\r\n\t\tTaskRunnerConfig old = runnerConfigMap.get(key);\r\n\t\tif (old == null || (old != null && old.getCreateDate() == null)) {\r\n\t\t\tif (config.getState() < 1) {\r\n\t\t\t\trunnerConfigMap.remove(key);\r\n\t\t\t} else {\r\n\t\t\t\trunnerConfigMap.put(key, config);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * 获得croner配置键。 使用taskClass#Id$target来配置\r\n\t * \r\n\t * @return\r\n\t */\r\n\tpublic static String getCronerConfigKey(TaskCronerConfig config) {\r\n\t\tStringBuilder sb = new StringBuilder(100);\r\n\t\tsb.append(config.getTaskClass()).append(\"#\");\r\n\t\tif (config.getTaskParam() != null && config.getTaskParam().length() > 0) {\r\n\t\t\tsb.append(config.getId());\r\n\t\t}\r\n\t\tsb.append(\"$\");\r\n\t\tif (config.getRunTarget() != null && config.getRunTarget().length() > 0) {\r\n\t\t\tsb.append(config.getRunTarget());\r\n\t\t}\r\n\t\treturn sb.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * 获得Runner配置结合Host。\r\n\t * \r\n\t * @return\r\n\t */\r\n\tpublic static String getRunnerConfigKey(TaskRunnerConfig config) {\r\n\t\tStringBuilder sb = new StringBuilder(100);\r\n\t\tsb.append(config.getTaskClass()).append(\"#\");\r\n\t\tif (config.getTaskTag() != null && config.getTaskTag().length() > 0) {\r\n\t\t\tsb.append(config.getTaskTag());\r\n\t\t}\r\n\t\tsb.append(\"$\");\r\n\t\tif (config.getRunTarget() != null && config.getRunTarget().length() > 0) {\r\n\t\t\tsb.append(config.getRunTarget());\r\n\t\t}\r\n\t\treturn sb.toString();\r\n\t}\r\n\r\n    /**\r\n     * 获得RunnerLog配置KEY\r\n     *\r\n     * @return\r\n     */\r\n    public static String getRunnerLogKey(TaskData<?,?> log) {\r\n        StringBuilder sb = new StringBuilder(100);\r\n        sb.append(log.getTaskClass()).append(\"#\");\r\n        if (log.getTaskTag() != null && log.getTaskTag().length() > 0) {\r\n            sb.append(log.getTaskTag());\r\n        }\r\n        sb.append(\"$\");\r\n        if (log.getRunTarget() != null && log.getRunTarget().length() > 0) {\r\n            sb.append(log.getRunTarget());\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    /**\r\n     * 获得CronerLog配置KEY\r\n     *\r\n     * @return\r\n     */\r\n    public static String getCronerLogKey(TaskCronerLog log) {\r\n        StringBuilder sb = new StringBuilder(100);\r\n        sb.append(log.getTaskClass()).append(\"#\");\r\n        if (log.getTaskParam() != null && log.getTaskParam().length()>0){\r\n            sb.append(log.getTaskParam());\r\n        }\r\n        sb.append(\"$\");\r\n        if (log.getRunTarget() != null && log.getRunTarget().length() > 0) {\r\n            sb.append(log.getRunTarget());\r\n        }\r\n        return sb.toString();\r\n    }\r\n}\r\nsrc/main/java/uw/task/api/TaskAPI.java\npublic class TaskAPI {\n\n    private static final Logger log = LoggerFactory.getLogger(TaskAPI.class);\n\n    /**\n     * Task配置文件\n     */\n    private TaskProperties taskProperties;\n\n    /**\n     * Rest模板类\n     */\n    private RestTemplate restTemplate;\n\n    /**\n     * 日志客户端。\n     */\n    private LogClient logClient = null;\n\n    /**\n     * 本机的外网IP\n     */\n    private String hostIp = \"\";\n\n    public TaskAPI(final TaskProperties taskProperties, final RestTemplate restTemplate,\n                   final LogClient logClient) {\n        this.taskProperties = taskProperties;\n        this.restTemplate = restTemplate;\n        this.logClient = logClient;\n    }\n\n    /**\n     * @return the hostIp\n     */\n    public String getHostIp() {\n        return hostIp;\n    }\n\n    /**\n     * 更新当前主机目标配置。\n     *\n     * @return\n     */\n    public List<String> getServerTargetConfig() {\n        List<String> targetConfig = null;\n        // 判断是否是私有模式。\n        boolean privacyMode = taskProperties.isPrivacyMode();\n        try {\n            String[] data = restTemplate.getForObject(\n                    taskProperties.getTaskCenterHost() + \"/taskapi/target/config?targetType={targetType}\", String[].class,\n                    privacyMode ? 1 : 0);\n            targetConfig = Arrays.asList(data);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.getHostConfig()服务端Target配置拉取异常:{}\", e.getMessage());\n        }\n        if (targetConfig == null || targetConfig.size() == 0) {\n            if (log.isWarnEnabled()) {\n                log.warn(\"获得主机Target服务端配置失败，启用默认配置项!\");\n            }\n            targetConfig = new ArrayList<>();\n            if (!privacyMode) {\n                targetConfig.add(\"\");\n            }\n        }\n        return targetConfig;\n    }\n\n    /**\n     * 更新当前主机状态，返回主机IP地址。\n     *\n     * @return 主机IP地址\n     */\n    public String updateHostStatus() {\n        String ip = \"\";\n        TaskHostStatus taskHostStatus = new TaskHostStatus();\n        taskHostStatus.setHostId(taskProperties.getHostId());\n        taskHostStatus.setTaskProject(taskProperties.getProject());\n        try {\n            ip = restTemplate.postForObject(taskProperties.getTaskCenterHost() + \"/taskapi/host/status\", taskHostStatus,\n                    String.class);\n            hostIp = ip;\n        } catch (Exception e) {\n            log.error(\"TaskAPI.updateHostStatus()服务端主机状态更新异常:{}\", e.getMessage());\n        }\n        return ip;\n    }\n\n    /**\n     * 初始化CronerConfig。\n     *\n     * @param config\n     */\n    public TaskCronerConfig initTaskCronerConfig(TaskCronerConfig config) {\n        try {\n            config = restTemplate.postForObject(taskProperties.getTaskCenterHost() + \"/taskapi/croner/config\", config,\n                    TaskCronerConfig.class);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.initTaskCronerConfig上传Croner配置到服务端异常:{}\", e.getMessage());\n        }\n        return config;\n    }\n\n    /**\n     * 初始化RunnerConfig\n     *\n     * @param config\n     */\n    public TaskRunnerConfig initTaskRunnerConfig(TaskRunnerConfig config) {\n        try {\n            config = restTemplate.postForObject(taskProperties.getTaskCenterHost() + \"/taskapi/runner/config\", config,\n                    TaskRunnerConfig.class);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.initTaskRunnerConfig上传Runner配置到服务端异常:{}\", e.getMessage());\n        }\n        return config;\n\n    }\n\n    /**\n     * 初始化联系人信息。\n     *\n     * @param contact\n     */\n    public void initTaskContact(TaskContact contact) {\n        try {\n            restTemplate.postForLocation(taskProperties.getTaskCenterHost() + \"/taskapi/contact\", contact);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.initTaskContact上传联系人信息到服务端异常:{}\", e.getMessage());\n        }\n    }\n\n    /**\n     * 根据更新时间获得变化的TaskRunner队列列表。\n     *\n     * @param lastUpdateTime 最后更新时间\n     * @return\n     */\n    public List<TaskRunnerConfig> getTaskRunnerQueueList(long lastUpdateTime) {\n        List<TaskRunnerConfig> list = null;\n        try {\n            TaskRunnerConfig[] data = restTemplate.getForObject(\n                    taskProperties.getTaskCenterHost() + \"/taskapi/runner/queue?lastUpdateTime={lastUpdateTime}\",\n                    TaskRunnerConfig[].class, lastUpdateTime);\n            list = Arrays.asList(data);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.getTaskRunnerQueueList()服务端主机状态更新异常:{}\", e.getMessage());\n        }\n\n        return list;\n    }\n\n    /**\n     * 根据包名前缀获得TaskRunner配置列表。\n     *\n     * @param taskPackage\n     * @param lastUpdateTime 最后更新时间\n     * @return\n     */\n    public List<TaskRunnerConfig> getTaskRunnerConfigList(String taskPackage, long lastUpdateTime) {\n        List<TaskRunnerConfig> list = null;\n        try {\n            TaskRunnerConfig[] data = restTemplate.getForObject(\n                    taskProperties.getTaskCenterHost()\n                            + \"/taskapi/runner/config?taskPackage={taskPackage}&lastUpdateTime={lastUpdateTime}\",\n                    TaskRunnerConfig[].class, taskPackage, lastUpdateTime);\n            list = Arrays.asList(data);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.getTaskRunnerConfigList()服务端主机状态更新异常:{}\", e.getMessage());\n        }\n\n        return list;\n    }\n\n    /**\n     * 根据包名前缀获得TaskCroner配置列表。\n     *\n     * @param taskPackage\n     * @param lastUpdateTime 最后更新时间\n     * @return\n     */\n    public List<TaskCronerConfig> getTaskCronerConfigList(String taskPackage, long lastUpdateTime) {\n        List<TaskCronerConfig> list = null;\n        try {\n            TaskCronerConfig[] data = restTemplate.getForObject(\n                    taskProperties.getTaskCenterHost()\n                            + \"/taskapi/croner/config?taskPackage={taskPackage}&lastUpdateTime={lastUpdateTime}\",\n                    TaskCronerConfig[].class, taskPackage, lastUpdateTime);\n            list = Arrays.asList(data);\n        } catch (Exception e) {\n            log.error(\"TaskAPI.getTaskCronerConfigList()服务端主机状态更新异常:{}\", e.getMessage());\n        }\n\n        return list;\n    }\n\n    /**\n     * 发送Runner任务日志。\n     *\n     * @param log\n     */\n    public void sendTaskRunnerLog(TaskRunnerLog log) {\n        logClient.log(log);\n    }\n\n    /**\n     * 发送CronLog日志\n     *\n     * @param configId      配置Id,方便更新下一次执行时间\n     * @param taskCronerLog 日志对象\n     */\n    public void sendTaskCronerLog(long configId, TaskCronerLog taskCronerLog) {\n        try {\n            restTemplate.getForObject(\n                    taskProperties.getTaskCenterHost()\n                            + \"/taskapi/croner/tick?id={id}&nextDate={nextDate}\",\n                    Integer.class, configId, taskCronerLog.getNextDate().getTime());\n        } catch (Exception e) {\n            log.error(\"TaskAPI.cornerTick()服务端主机状态更新异常: \" + e.getMessage(), e);\n        }\n\n        int logLevel = taskCronerLog.getLogLevel();\n        int logLimitSize = taskCronerLog.getLogLimitSize();\n        if (logLevel > TaskCronerConfig.TASK_LOG_TYPE_NONE) {\n            switch (logLevel) {\n                case TaskCronerConfig.TASK_LOG_TYPE_RECORD: {\n                    taskCronerLog.setTaskParam(null);\n                    taskCronerLog.setResultData(null);\n                }\n                break;\n                case TaskCronerConfig.TASK_LOG_TYPE_RECORD_TASK_PARAM: {\n                    String taskParam = taskCronerLog.getTaskParam();\n                    if (logLimitSize > 0 && StringUtils.isNotBlank(taskParam) && taskParam.length() > logLimitSize) {\n                        taskCronerLog.setTaskParam(taskParam.substring(0, logLimitSize));\n                    }\n                    taskCronerLog.setResultData(null);\n                }\n                break;\n                case TaskCronerConfig.TASK_LOG_TYPE_RECORD_RESULT_DATA: {\n                    String resultData = taskCronerLog.getResultData();\n                    if (logLimitSize > 0 && StringUtils.isNotBlank(resultData) && resultData.length() > logLimitSize) {\n                        taskCronerLog.setResultData(resultData.substring(0, logLimitSize));\n                    }\n                    taskCronerLog.setTaskParam(null);\n                }\n                break;\n                case TaskCronerConfig.TASK_LOG_TYPE_RECORD_ALL: {\n                    if (logLimitSize > 0) {\n                        String taskParam = taskCronerLog.getTaskParam();\n                        String resultData = taskCronerLog.getResultData();\n                        if (StringUtils.isNotBlank(taskParam) && taskParam.length() > logLimitSize) {\n                            taskCronerLog.setTaskParam(taskParam.substring(0, logLimitSize));\n                        }\n                        if (StringUtils.isNotBlank(resultData) && resultData.length() > logLimitSize) {\n                            taskCronerLog.setResultData(resultData.substring(0, logLimitSize));\n                        }\n                    }\n                }\n                break;\n            }\n            logClient.log(taskCronerLog);\n        }\n    }\n}\nsrc/main/java/uw/task/exception/TaskDataException.java\npublic class TaskDataException extends Exception {\r\n\r\n    /**\r\n     * <code>serialVersionUID</code> 的注释\r\n     */\r\n    private static final long serialVersionUID = 8713460933603499992L;\r\n\r\n    public TaskDataException() {\r\n        super();\r\n    }\r\n\r\n    public TaskDataException(String msg) {\r\n        super(msg);\r\n    }\r\n\r\n    public TaskDataException(Throwable nestedThrowable) {\r\n        super(nestedThrowable);\r\n    }\r\n\r\n    public TaskDataException(String msg, Throwable nestedThrowable) {\r\n        super(msg, nestedThrowable);\r\n    }\r\n\r\n}\nsrc/main/java/uw/task/entity/TaskRunnerConfig.java\npublic class TaskRunnerConfig implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 限速类型：不限速\n     */\n    public static final int RATE_LIMIT_NONE = 0;\n\n    /**\n     * 限速类型：本地进程限速\n     */\n    public static final int RATE_LIMIT_LOCAL = 1;\n\n    /**\n     * 限速类型：本地TASK限速\n     */\n    public static final int RATE_LIMIT_LOCAL_TASK = 2;\n\n    /**\n     * 限速类型：本地TASK+TAG限速\n     */\n    public static final int RATE_LIMIT_LOCAL_TASK_TAG = 3;\n\n    /**\n     * 限速类型：全局主机HOST限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_HOST = 4;\n\n    /**\n     * 限速类型：全局TAG限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TAG = 5;\n\n    /**\n     * 限速类型：全局TASK限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TASK = 6;\n\n    /**\n     * 限速类型：全局TAG+HOST限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TAG_HOST = 7;\n\n    /**\n     * 限速类型：全局TASK+IP限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TASK_HOST = 8;\n\n    /**\n     * 限速类型：全局TASK+TAG限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TASK_TAG = 9;\n\n    /**\n     * 限速类型：全局TASK+TAG+IP限速\n     */\n    public static final int RATE_LIMIT_GLOBAL_TASK_TAG_HOST = 10;\n\n    /**\n     * 什么都不记录\n     */\n    public static final int TASK_LOG_TYPE_NONE = -1;\n\n    /**\n     * 记录日志\n     */\n    public static final int TASK_LOG_TYPE_RECORD = 0;\n\n    /**\n     * 记录日志,含请求参数\n     */\n    public static final int TASK_LOG_TYPE_RECORD_TASK_PARAM = 1;\n\n    /**\n     * 记录日志,含返回参数\n     */\n    public static final int TASK_LOG_TYPE_RECORD_RESULT_DATA = 2;\n\n    /**\n     * 记录全部日志\n     */\n    public static final int TASK_LOG_TYPE_RECORD_ALL = 3;\n\n    private long id;\n\n    /**\n     * 任务名称\n     */\n    private String taskName;\n\n    /**\n     * 任务描述\n     */\n    private String taskDesc;\n\n    /**\n     * 执行类信息\n     */\n    private String taskClass;\n\n    /**\n     * 执行类TAG，可能用于区分子任务\n     */\n    private String taskTag;\n\n    /**\n     * 消费者的数量\n     */\n    private int consumerNum = 1;\n\n    /**\n     * 预取任务数。\n     */\n    private int prefetchNum = 1;\n\n    /**\n     * 详见流量限制类型说明。\n     */\n    private int rateLimitType = RATE_LIMIT_NONE;\n\n    /**\n     * 流量限定数值，默认为10次\n     */\n    private int rateLimitValue = 10;\n\n    /**\n     * 流量限定时间(S)，默认为1秒\n     */\n    private int rateLimitTime = 1;\n\n    /**\n     * 当发生流量限制时，等待的秒数，默认300秒\n     */\n    private int rateLimitWait = 30;\n\n    /**\n     * 超过流量限制重试次数，默认不在重试，放弃任务。\n     */\n    private int retryTimesByOverrated = 0;\n\n    /**\n     * 对方接口错误重试次数，默认不再重试，放弃任务。\n     */\n    private int retryTimesByPartner = 0;\n\n    /**\n     * 运行目标，默认不指定\n     */\n    private String runTarget = \"\";\n\n    /**\n     * 失败率\n     */\n    private int failRate;\n\n    /**\n     * 接口失败率\n     */\n    private int failPartnerRate;\n\n    /**\n     * 程序失败率\n     */\n    private int failProgramRate;\n\n    /**\n     * 配置失败率\n     */\n    private int failConfigRate;\n\n    /**\n     * 数据失败率\n     */\n    private int failDataRate;\n\n    /**\n     * 队列等待超时\n     */\n    private int queueTimeout;\n\n    /**\n     * 等待超时\n     */\n    private int waitTimeout;\n\n    /**\n     * 运行超时\n     */\n    private int runTimeout;\n\n    /**\n     * 创建日期。\n     */\n    private Date createDate;\n\n    /**\n     * 修改日期。\n     */\n    private Date modifyDate;\n\n    /**\n     * 状态值\n     */\n    private int state = 1;\n\n    /**\n     * 详见日志类型说明\n     */\n    private int logLevel = TASK_LOG_TYPE_RECORD;\n\n    /**\n     * 日志字符串字段大小限制: 0 表示无限制\n     */\n    private int logLimitSize = 0;\n\n    public TaskRunnerConfig() {\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getTaskName() {\n        return taskName;\n    }\n\n    public void setTaskName(String taskName) {\n        this.taskName = taskName;\n    }\n\n    public String getTaskDesc() {\n        return taskDesc;\n    }\n\n    public void setTaskDesc(String taskDesc) {\n        this.taskDesc = taskDesc;\n    }\n\n    public String getTaskClass() {\n        return taskClass;\n    }\n\n    public void setTaskClass(String taskClass) {\n        this.taskClass = taskClass;\n    }\n\n    public String getTaskTag() {\n        return taskTag;\n    }\n\n    public void setTaskTag(String taskTag) {\n        this.taskTag = taskTag;\n    }\n\n    public int getConsumerNum() {\n        return consumerNum;\n    }\n\n    public void setConsumerNum(int consumerNum) {\n        this.consumerNum = consumerNum;\n    }\n\n    public int getPrefetchNum() {\n        return prefetchNum;\n    }\n\n    public void setPrefetchNum(int prefetchNum) {\n        this.prefetchNum = prefetchNum;\n    }\n\n    public int getRateLimitType() {\n        return rateLimitType;\n    }\n\n    public void setRateLimitType(int rateLimitType) {\n        this.rateLimitType = rateLimitType;\n    }\n\n    public int getRateLimitValue() {\n        return rateLimitValue;\n    }\n\n    public void setRateLimitValue(int rateLimitValue) {\n        this.rateLimitValue = rateLimitValue;\n    }\n\n    public int getRateLimitTime() {\n        return rateLimitTime;\n    }\n\n    public void setRateLimitTime(int rateLimitTime) {\n        this.rateLimitTime = rateLimitTime;\n    }\n\n    public int getRateLimitWait() {\n        return rateLimitWait;\n    }\n\n    public void setRateLimitWait(int rateLimitWait) {\n        this.rateLimitWait = rateLimitWait;\n    }\n\n    public int getRetryTimesByOverrated() {\n        return retryTimesByOverrated;\n    }\n\n    public void setRetryTimesByOverrated(int retryTimesByOverrated) {\n        this.retryTimesByOverrated = retryTimesByOverrated;\n    }\n\n    public int getRetryTimesByPartner() {\n        return retryTimesByPartner;\n    }\n\n    public void setRetryTimesByPartner(int retryTimesByPartner) {\n        this.retryTimesByPartner = retryTimesByPartner;\n    }\n\n    public String getRunTarget() {\n        return runTarget;\n    }\n\n    public void setRunTarget(String runTarget) {\n        this.runTarget = runTarget;\n    }\n\n    public int getFailRate() {\n        return failRate;\n    }\n\n    public void setFailRate(int failRate) {\n        this.failRate = failRate;\n    }\n\n    public int getFailPartnerRate() {\n        return failPartnerRate;\n    }\n\n    public void setFailPartnerRate(int failPartnerRate) {\n        this.failPartnerRate = failPartnerRate;\n    }\n\n    public int getFailProgramRate() {\n        return failProgramRate;\n    }\n\n    public void setFailProgramRate(int failProgramRate) {\n        this.failProgramRate = failProgramRate;\n    }\n\n    public int getFailConfigRate() {\n        return failConfigRate;\n    }\n\n    public void setFailConfigRate(int failConfigRate) {\n        this.failConfigRate = failConfigRate;\n    }\n\n    public int getFailDataRate() {\n        return failDataRate;\n    }\n\n    public void setFailDataRate(int failDataRate) {\n        this.failDataRate = failDataRate;\n    }\n\n    public int getQueueTimeout() {\n        return queueTimeout;\n    }\n\n    public void setQueueTimeout(int queueTimeout) {\n        this.queueTimeout = queueTimeout;\n    }\n\n    public int getWaitTimeout() {\n        return waitTimeout;\n    }\n\n    public void setWaitTimeout(int waitTimeout) {\n        this.waitTimeout = waitTimeout;\n    }\n\n    public int getRunTimeout() {\n        return runTimeout;\n    }\n\n    public void setRunTimeout(int runTimeout) {\n        this.runTimeout = runTimeout;\n    }\n\n    public Date getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Date createDate) {\n        this.createDate = createDate;\n    }\n\n    public Date getModifyDate() {\n        return modifyDate;\n    }\n\n    public void setModifyDate(Date modifyDate) {\n        this.modifyDate = modifyDate;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n    }\n\n    public int getLogLevel() {\n        return logLevel;\n    }\n\n    public void setLogLevel(int logLevel) {\n        this.logLevel = logLevel;\n    }\n\n    public int getLogLimitSize() {\n        return logLimitSize;\n    }\n\n    public void setLogLimitSize(int logLimitSize) {\n        this.logLimitSize = logLimitSize;\n    }\n}\nsrc/main/java/uw/task/util/MiscUtils.java\npublic class MiscUtils {\r\n\r\n    /**\r\n     * taskData的copy器。\r\n     */\r\n    private static BeanCopier beanCopier = BeanCopier.create(TaskData.class, TaskData.class, false);\r\n\r\n    /**\r\n     * copy taskData对象。\r\n     *\r\n     * @param srcData\r\n     * @param dstData\r\n     */\r\n    public static void copyTaskData(TaskData srcData, TaskData dstData) {\r\n        beanCopier.copy(srcData, dstData, null);\r\n    }\r\n\r\n    /**\r\n     * 打印异常信息，屏蔽掉spring自己的堆栈输出。\r\n     *\r\n     * @param e 需要打印的异常信息\r\n     * @return\r\n     */\r\n    public static String exceptionToString(Throwable e) {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(e.toString()).append(\"\\n\");\r\n\r\n        StackTraceElement[] trace = e.getStackTrace();\r\n        for (StackTraceElement traceElement : trace) {\r\n            if (traceElement.getClassName().startsWith(\"org.spring\")) {\r\n                continue;\r\n            }\r\n            if (traceElement.getClassName().startsWith(\"sun.\")) {\r\n                continue;\r\n            }\r\n            sb.append(\"\\tat \").append(traceElement).append(\"\\n\");\r\n        }\r\n        Throwable ourCause = e.getCause();\r\n        if (ourCause != null) {\r\n            sb.append(\"CAUSE BY\").append(ourCause.toString()).append(\"\\n\");\r\n            trace = ourCause.getStackTrace();\r\n            for (StackTraceElement traceElement : trace) {\r\n                if (traceElement.getClassName().startsWith(\"org.spring\")) {\r\n                    continue;\r\n                }\r\n                if (traceElement.getClassName().startsWith(\"sun.\")) {\r\n                    continue;\r\n                }\r\n                sb.append(\"\\tat \").append(traceElement).append(\"\\n\");\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n}\r\nsrc/main/java/uw/task/TaskListenerManager.java\npublic class TaskListenerManager {\r\n\r\n\t/**\r\n\t * runner监听器列表。\r\n\t */\r\n    private ArrayList<RunnerTaskListener> runnerListenerList = new ArrayList<>();\r\n\r\n    /**\r\n     * croner监听器列表。\r\n     */\r\n    private ArrayList<CronerTaskListener> cronerListenerList = new ArrayList<>();\r\n\r\n    /**\r\n     * 加入一个RunnerListener。\r\n     *\r\n     * @param listener\r\n     */\r\n    public void addRunnerListener(RunnerTaskListener listener) {\r\n        runnerListenerList.add(listener);\r\n    }\r\n\r\n    /**\r\n     * 加入一个RunnerListener.\r\n     *\r\n     * @param listener\r\n     */\r\n    public void addCronerListener(CronerTaskListener listener) {\r\n        cronerListenerList.add(listener);\r\n    }\r\n\r\n    /**\r\n     * 清除RunnerListener列表\r\n     */\r\n    public void clearRunnerListener() {\r\n        runnerListenerList.clear();\r\n    }\r\n\r\n    /**\r\n     * 清除RunnerListener列表\r\n     */\r\n    public void clearCronerListener() {\r\n        cronerListenerList.clear();\r\n    }\r\n\r\n    /**\r\n     * 获得Runner Listener列表。\r\n     *\r\n     * @return\r\n     */\r\n    public ArrayList<RunnerTaskListener> getRunnerListenerList() {\r\n        return runnerListenerList;\r\n    }\r\n\r\n    /**\r\n     * 获得Croner Listener列表。\r\n     *\r\n     * @return\r\n     */\r\n    public ArrayList<CronerTaskListener> getCronerListenerList() {\r\n        return cronerListenerList;\r\n    }\r\n\r\n}\r\nsrc/main/java/uw/task/entity/TaskRunnerLog.java\n@JsonIgnoreProperties({\"taskData\"})\npublic class TaskRunnerLog extends LogBaseVo {\n\n    private static final Logger logger = LoggerFactory.getLogger(TaskRunnerLog.class);\n\n    private TaskData taskData;\n\n    /**\n     * logLimitSize。\n     */\n    private int logLimitSize;\n\n    public TaskRunnerLog(TaskData taskData) {\n        this.taskData = taskData;\n    }\n\n    public TaskData getTaskData() {\n        return taskData;\n    }\n\n    /**\n     * @return the id\n     */\n    public long getId() {\n        return taskData.getId();\n    }\n\n    /**\n     * @return the refId\n     */\n    public long getRefId() {\n        return taskData.getRefId();\n    }\n\n    /**\n     * @return the refSubId\n     */\n    public long getRefSubId() {\n        return taskData.getRefSubId();\n    }\n\n    /**\n     * @return the refTag\n     */\n    public String getRefTag() {\n        return taskData.getRefTag();\n    }\n\n    /**\n     * @return the rateLimitTag\n     */\n    public String getRateLimitTag() {\n        return taskData.getRateLimitTag();\n    }\n\n    /**\n     * @return the taskClass\n     */\n    public String getTaskClass() {\n        return taskData.getTaskClass();\n    }\n\n    /**\n     * @return the taskTag\n     */\n    public String getTaskTag() {\n        return taskData.getTaskTag();\n    }\n\n    public long getTaskDelay() {\n        return taskData.getTaskDelay();\n    }\n\n    /**\n     * @return the taskParam\n     */\n    public String getTaskParam() {\n        Object value = taskData.getTaskParam();\n        if (value != null) {\n            // 报错了\n            if (taskData.getState() != TaskData.STATE_SUCCESS || logLevel == TaskRunnerConfig.TASK_LOG_TYPE_RECORD_ALL ||\n                    logLevel == TaskRunnerConfig.TASK_LOG_TYPE_RECORD_TASK_PARAM) {\n                String data = null;\n                try {\n                    data = JsonMapper.MAPPER.writeValueAsString(value);\n                } catch (Exception e) {\n                    data = e.getMessage();\n                    logger.error(e.getMessage(), e);\n                }\n                if (data != null) {\n                    if (logLimitSize > 0 && data.length() > logLimitSize) {\n                        data = data.substring(0, logLimitSize);\n                    }\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @return the runType\n     */\n    public int getRunType() {\n        return taskData.getRunType();\n    }\n\n    /**\n     * @return the retryType\n     */\n    public int getRetryType() {\n        return taskData.getRetryType();\n    }\n\n    /**\n     * @return the runTarget\n     */\n    public String getRunTarget() {\n        return taskData.getRunTarget();\n    }\n\n    /**\n     * @return the hostIp\n     */\n    public String getHostIp() {\n        return taskData.getHostIp();\n    }\n\n    /**\n     * @return the hostId\n     */\n    public String getHostId() {\n        return taskData.getHostId();\n    }\n\n    /**\n     * @return the queueDate\n     */\n    public Date getQueueDate() {\n        return taskData.getQueueDate();\n    }\n\n    /**\n     * @return the consumeDate\n     */\n    public Date getConsumeDate() {\n        return taskData.getConsumeDate();\n    }\n\n    /**\n     * @return the runDate\n     */\n    public Date getRunDate() {\n        return taskData.getRunDate();\n    }\n\n    /**\n     * @return the finishDate\n     */\n    public Date getFinishDate() {\n        return taskData.getFinishDate();\n    }\n\n    /**\n     * @return the resultData\n     */\n    public String getResultData() {\n        Object value = taskData.getResultData();\n        if (value != null) {\n            // 报错了\n            if (taskData.getState() != TaskData.STATE_SUCCESS || logLevel == TaskRunnerConfig.TASK_LOG_TYPE_RECORD_ALL ||\n                    logLevel == TaskRunnerConfig.TASK_LOG_TYPE_RECORD_RESULT_DATA) {\n                String data = null;\n                try {\n                    data = JsonMapper.MAPPER.writeValueAsString(value);\n                } catch (Exception e) {\n                    data = e.getMessage();\n                    logger.error(e.getMessage(), e);\n                }\n                if (data != null) {\n                    if (logLimitSize > 0 && data.length() > logLimitSize) {\n                        data = data.substring(0, logLimitSize);\n                    }\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * @return the errorInfo\n     */\n    public String getErrorInfo() {\n        return taskData.getErrorInfo();\n    }\n\n    /**\n     * @return the ranTimes\n     */\n    public int getRanTimes() {\n        return taskData.getRanTimes();\n    }\n\n    /**\n     * @return the status\n     */\n    public int getState() {\n        return taskData.getState();\n    }\n\n    public int getLogLimitSize() {\n        return logLimitSize;\n    }\n\n    public void setLogLimitSize(int logLimitSize) {\n        this.logLimitSize = logLimitSize;\n    }\n}\nsrc/main/java/uw/task/conf/TaskProperties.java\n@ConfigurationProperties(prefix = \"uw.task\")\npublic class TaskProperties {\n\n    /**\n     * 是否启用uw-task服务注册和主机注册，默认不启用。\n     *\n     */\n    private boolean enableTaskRegistry = false;\n    /**\n     * 任务名，必须设置为基础包名。\n     */\n    private String project;\n\n    /**\n     * 私有模式。不运行全局target任务。\n     */\n    private boolean privacyMode = false;\n\n    /**\n     * croner线程数，默认在3个，建议按照实际croner任务数量*70%。\n     */\n    private int cronerThreadNum = 5;\n\n    /**\n     * RPC最小线程数,用于执行RPC调用，如不使用rpc，建议设置为1，否则按照最大并发量*10%设置。\n     */\n    private int taskRpcMinThreadNum = 1;\n\n    /**\n     * RPC最大线程数,用于执行RPC调用，超过此线程数，将会导致阻塞。\n     */\n    private int taskRpcMaxThreadNum = 100;\n\n    /**\n     * 队列任务重试延时毫秒数，默认2秒\n     */\n    private long taskQueueRetryDelay = 2000;\n\n    /**\n     *  rpc任务重试延时毫秒数，默认100毫秒\n     */\n    private long taskRpcRetryDelay = 100;\n\n    /**\n     * 运行主机ID\n     */\n    private String hostId = ManagementFactory.getRuntimeMXBean().getName();\n\n    /**\n     * 任务服务器\n     */\n    private String taskCenterHost = \"127.0.0.1\";\n\n    /**\n     * Redis配置\n     */\n    private RedisProperties redis = new RedisProperties();\n\n    /**\n     * Rabbit MQ配置\n     */\n    private RabbitProperties rabbitmq = new RabbitProperties();\n\n    public static class RedisProperties extends org.springframework.boot.autoconfigure.data.redis.RedisProperties {\n\n    }\n\n    public static class RabbitProperties extends org.springframework.boot.autoconfigure.amqp.RabbitProperties {\n\n    }\n\n    public boolean isEnableTaskRegistry() {\n        return enableTaskRegistry;\n    }\n\n    public void setEnableTaskRegistry(boolean enableTaskRegistry) {\n        this.enableTaskRegistry = enableTaskRegistry;\n    }\n\n    /**\n\t * @return the privacyMode\n\t */\n\tpublic boolean isPrivacyMode() {\n\t\treturn privacyMode;\n\t}\n\n\t/**\n\t * @param privacyMode the privacyMode to set\n\t */\n\tpublic void setPrivacyMode(boolean privacyMode) {\n\t\tthis.privacyMode = privacyMode;\n\t}\n\n\tpublic int getTaskRpcMinThreadNum() {\n\t\treturn taskRpcMinThreadNum;\n\t}\n\n\tpublic void setTaskRpcMinThreadNum(int taskRpcMinThreadNum) {\n\t\tthis.taskRpcMinThreadNum = taskRpcMinThreadNum;\n\t}\n\n\tpublic int getTaskRpcMaxThreadNum() {\n\t\treturn taskRpcMaxThreadNum;\n\t}\n\n\tpublic void setTaskRpcMaxThreadNum(int taskRpcMaxThreadNum) {\n\t\tthis.taskRpcMaxThreadNum = taskRpcMaxThreadNum;\n\t}\n\n\t/**\n     * @return the project\n     */\n    public String getProject() {\n        return project;\n    }\n\n    /**\n     * @param project the project to set\n     */\n    public void setProject(String project) {\n        this.project = project;\n    }\n\n    /**\n     * @return the hostId\n     */\n    public String getHostId() {\n        return hostId;\n    }\n\n    /**\n     * @param hostId the hostId to set\n     */\n    public void setHostId(String hostId) {\n        this.hostId = hostId;\n    }\n\n    /**\n\t * @return the cronerThreadNum\n\t */\n\tpublic int getCronerThreadNum() {\n\t\treturn cronerThreadNum;\n\t}\n\n\t/**\n\t * @param cronerThreadNum the cronerThreadNum to set\n\t */\n\tpublic void setCronerThreadNum(int cronerThreadNum) {\n\t\tthis.cronerThreadNum = cronerThreadNum;\n\t}\n\n\t/**\n     * @return the taskCenterHost\n     */\n    public String getTaskCenterHost() {\n        return taskCenterHost;\n    }\n\n    /**\n     * @param taskCenterHost the taskCenterHost to set\n     */\n    public void setTaskCenterHost(String taskCenterHost) {\n        this.taskCenterHost = taskCenterHost;\n    }\n\n    public RedisProperties getRedis() {\n        return redis;\n    }\n\n    public void setRedis(RedisProperties redis) {\n        this.redis = redis;\n    }\n\n    public RabbitProperties getRabbitmq() {\n        return rabbitmq;\n    }\n\n    public void setRabbitmq(RabbitProperties rabbitmq) {\n        this.rabbitmq = rabbitmq;\n    }\n\n    public long getTaskQueueRetryDelay() {\n        return taskQueueRetryDelay;\n    }\n\n    public void setTaskQueueRetryDelay(long taskQueueRetryDelay) {\n        this.taskQueueRetryDelay = taskQueueRetryDelay;\n    }\n\n    public long getTaskRpcRetryDelay() {\n        return taskRpcRetryDelay;\n    }\n\n    public void setTaskRpcRetryDelay(long taskRpcRetryDelay) {\n        this.taskRpcRetryDelay = taskRpcRetryDelay;\n    }\n}\n", "answers": ["    private LocalRateLimiter localRateLimiter;"], "length": 5298, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "fbea06f3c6f93b8aaf69f52783041ff4c6ce262cc8922060"}
{"input": "package org.cryptomator.sanitizer.commands;\nimport static java.lang.String.format;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static java.nio.file.Files.isDirectory;\nimport static java.nio.file.Files.isRegularFile;\nimport static java.nio.file.Files.newBufferedWriter;\nimport static java.nio.file.Files.size;\nimport static java.nio.file.Files.walk;\nimport static java.nio.file.StandardOpenOption.CREATE_NEW;\nimport static java.nio.file.StandardOpenOption.WRITE;\nimport static java.util.Collections.sort;\nimport static java.util.stream.Collectors.toList;\nimport static org.cryptomator.sanitizer.Sanitizer.print;\nimport static org.cryptomator.sanitizer.Sanitizer.printNoNewline;\nimport static org.cryptomator.sanitizer.integrity.problems.Severity.INFO;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\nimport org.cryptomator.sanitizer.CryptorHolder;\nimport org.cryptomator.sanitizer.Passphrase;\nimport org.cryptomator.sanitizer.integrity.AbortCheckException;\nimport org.cryptomator.sanitizer.integrity.IntegrityCheck;\nimport org.cryptomator.sanitizer.integrity.problems.Problem;\nimport org.cryptomator.sanitizer.integrity.problems.Severity;\nimport org.cryptomator.sanitizer.integrity.problems.SolutionContext;\nimport org.cryptomator.sanitizer.utils.Counter;\n\n\n\n\nclass CheckRunner implements Runnable {\n\n\tprivate static final long KIBI = 1024;\n\tprivate static final String[] KIBI_POWERS = {\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"};\n\n\tprivate final CheckCommand args;\n\n\tpublic CheckRunner(CheckCommand args) {\n\t\tthis.args = args;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\ttry (CryptorHolder cryptorHolder = new CryptorHolder(); //\n\t\t\t\tPassphrase passphrase = args.passphrase()) {\n\t\t\tIntegrityCheck integrityCheck = new IntegrityCheck(cryptorHolder);", "context": "src/main/java/org/cryptomator/sanitizer/Passphrase.java\npublic class Passphrase implements CharSequence, AutoCloseable {\n\n\tprivate final char[] chars;\n\n\tpublic Passphrase(char[] chars) {\n\t\tthis.chars = chars;\n\t}\n\n\tpublic Passphrase(CharBuffer chars) {\n\t\tthis.chars = new char[chars.remaining()];\n\t\tchars.get(this.chars);\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tArrays.fill(chars, ' ');\n\t}\n\n\t@Override\n\tpublic int length() {\n\t\treturn chars.length;\n\t}\n\n\t@Override\n\tpublic char charAt(int index) {\n\t\treturn chars[index];\n\t}\n\n\t@Override\n\tpublic Passphrase subSequence(int start, int end) {\n\t\tint len = end - start;\n\t\tchar[] result = new char[len];\n\t\tSystem.arraycopy(chars, start, result, 0, len);\n\t\treturn new Passphrase(result);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn new String(chars);\n\t}\n\n}\nsrc/main/java/org/cryptomator/sanitizer/integrity/IntegrityCheck.java\npublic class IntegrityCheck {\n\n\tprivate final CryptorHolder cryptorHolder;\n\n\tpublic IntegrityCheck(CryptorHolder cryptorHolder) {\n\t\tthis.cryptorHolder = cryptorHolder;\n\t}\n\n\tpublic Set<Problem> check(Path path, CharSequence passphrase, boolean checkFileIntegrity) throws AbortCheckException {\n\t\tProblems problems = new Problems(path);\n\t\ttry {\n\t\t\tcryptorHolder.createCryptor(problems, path, passphrase).ifPresent(cryptor -> {\n\t\t\t\ttry {\n\t\t\t\t\tvaultFormatChecks(cryptor, path, checkFileIntegrity).check(problems, path);\n\t\t\t\t} finally {\n\t\t\t\t\tcryptor.destroy();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (AbortCheckException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\tproblems.reportException(e);\n\t\t}\n\t\treturn problems.asSet();\n\t}\n\n\tprivate Check vaultFormatChecks(Cryptor cryptor, Path pathToVault, boolean checkContentIntegrity) {\n\t\tCheck referencedDirectoryExists = referencedDirectoryExists(cryptor, pathToVault);\n\t\tHasCorrespondingDirectoryFileCheck hasCorrespondingDirectoryFileCheck = hasCorrespondingDirectoryFile(cryptor, pathToVault);\n\t\tCheck decryptedNameCheckForRegularFiles = decryptedNameCheck(cryptor, hasCorrespondingDirectoryFileCheck);\n\t\tHasCorrespondingDFileCheck hasCorrespondingDFile = hasCorrespondingDFileIn(pathToVault);\n\t\tCheck decryptedNameCheckForLongFiles = Checks.decryptedNameCheck(cryptor, hasCorrespondingDirectoryFileCheck, hasCorrespondingDFile);\n\t\tCheck emptyEncryptedFileIfEmpty = emptyEncryptedFileIfEmpty();\n\t\treturn dir().containing( //\n\t\t\t\tdir().that(hasName(\"d\")).validate(nameDoesNotContainUppercaseChars()).containing( //\n\t\t\t\t\t\tdir().that(hasName(\"[A-Z2-7]{2}\")).validate(nameDoesNotContainLowercaseChars()).containing( //\n\t\t\t\t\t\t\t\tdir().that(hasName(\"[A-Z2-7]{30}\")) //\n\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()).validate(hasCorrespondingDirectoryFileCheck) //\n\t\t\t\t\t\t\t\t\t\t.reportAs(rootDirectoryIfMachting(cryptor)) //\n\t\t\t\t\t\t\t\t\t\t.containing( //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"0([A-Z2-7]{8})*[A-Z2-7=]{8}\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasSize(36).and(containsUuid()).and(referencedDirectoryExists)) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForRegularFiles), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"([A-Z2-7]{8})*[A-Z2-7=]{8}\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(emptyEncryptedFileIfEmpty) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasMinSize(88).and(isAuthentic(cryptor, checkContentIntegrity))) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForRegularFiles), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}\\\\.lng\").and(hasCorrespondingMFileIn(pathToVault).that(containsValidFileName()))) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(emptyEncryptedFileIfEmpty) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasMinSize(88).and(isAuthentic(cryptor, checkContentIntegrity))), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}\\\\.lng\").and(hasCorrespondingMFileIn(pathToVault).that(containsValidDirectoryFileName()))) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasSize(36).and(containsUuid()).and(referencedDirectoryExists)), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}\\\\.lng\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasCorrespondingMFileIn(pathToVault)), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"0?([A-Z2-7]{8})*[A-Z2-7=]{1,7}\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasSize(36).and(containsUuid()).and(referencedDirectoryExists)) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForRegularFiles) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(aFileWithMissingEqualsSign()), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"0([A-Z2-7]{8})*[A-Z2-7=]{8}.+\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasSize(36).and(containsUuid()).and(referencedDirectoryExists)) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForRegularFiles) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(aConflict()), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"([A-Z2-7]{8})*[A-Z2-7=]{8}.+\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(emptyEncryptedFileIfEmpty) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasMinSize(88).and(isAuthentic(cryptor, checkContentIntegrity))) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForRegularFiles) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(aConflict()), //\n\t\t\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}.+\\\\.lng\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasCorrespondingMFileIn(pathToVault)) //\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(aConflict())))), //\n\t\t\t\tdir().that(hasName(\"m\")).validate(nameDoesNotContainUppercaseChars()).containing( //\n\t\t\t\t\t\tdir().that(hasName(\"[A-Z2-7]{2}\")).validate(nameDoesNotContainLowercaseChars()).containing( //\n\t\t\t\t\t\t\t\tdir().that(hasName(\"[A-Z2-7]{2}\")).validate(nameDoesNotContainLowercaseChars()).containing( //\n\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}\\\\.lng\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasCorrespondingDFile.and(containsValidName()))\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForLongFiles), //\n\t\t\t\t\t\t\t\t\t\tfile().that(hasName(\"[A-Z2-7]{32}.+\\\\.lng\")) //\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(nameDoesNotContainLowercaseChars()) //\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(hasCorrespondingDFile.and(containsValidName())) //\n\t\t\t\t\t\t\t\t\t\t\t\t.validate(decryptedNameCheckForLongFiles)\n\t\t\t\t\t\t\t\t\t\t\t\t.reportAs(aConflict())))), //\n\t\t\t\tfile().that(hasName(\"masterkey.cryptomator\")).validate(nameDoesNotContainUppercaseChars()), // do not validate contents because this already happened when creating the Cryptor\n\t\t\t\tfile().that(hasName(\"masterkey.cryptomator.bkup\")).validate(isMasterkeyBackupFile()));\n\t}\n\n}\nsrc/main/java/org/cryptomator/sanitizer/integrity/problems/SolutionContext.java\npublic interface SolutionContext {\n\n\tpublic static SolutionContext simulatePrintingTo(Path vaultLocation, Cryptor cryptor, PrintStream out) {\n\t\treturn new PrintStreamSolutionContext(vaultLocation, cryptor, out, true);\n\t}\n\n\tpublic static SolutionContext executePrintingTo(Path vaultLocation, Cryptor cryptor, PrintStream out) {\n\t\treturn new PrintStreamSolutionContext(vaultLocation, cryptor, out, false);\n\t}\n\n\tvoid start(String format, Object... args);\n\n\tvoid finish();\n\n\tvoid fail(String format, Object... args);\n\n\tvoid fail(Throwable reason);\n\n\tboolean dryRun();\n\n\tPath vaultLocation();\n\n\tCryptor cryptor();\n\n}\nsrc/main/java/org/cryptomator/sanitizer/Sanitizer.java\npublic static void printNoNewline(String line) {\n\tprintNoNewline(line, System.out);\n}\nsrc/main/java/org/cryptomator/sanitizer/integrity/problems/Severity.java\npublic enum Severity {\n\n\t/**\n\t * Issues which prevent the integrity check from operating correctly.\n\t */\n\tFATAL,\n\n\t/**\n\t * Issues which are guaranteed to cause problems while using the vault.\n\t */\n\tERROR,\n\n\t/**\n\t * Issues which are not guaranteed to cause problems while using the vault.\n\t */\n\tWARN,\n\n\t/**\n\t * Issues which occur during normal operation of the vault.\n\t */\n\tINFO\n\n}\nsrc/main/java/org/cryptomator/sanitizer/integrity/problems/Problem.java\npublic interface Problem {\n\n\tSeverity severity();\n\n\tdefault Optional<Solution> solution() {\n\t\treturn Optional.empty();\n\t}\n\n\tdefault String name() {\n\t\treturn \"notSolvable\";\n\t}\n\n}\nsrc/main/java/org/cryptomator/sanitizer/CryptorHolder.java\npublic class CryptorHolder implements AutoCloseable {\n\n\tprivate static final int VAULT_VERSION = 6;\n\n\tprivate static final int VAULT_VERSION_INTRODUCING_PASSWORD_NORMALIZATION = 6;\n\n\tprivate Optional<Cryptor> cryptor = Optional.empty();\n\n\tpublic Optional<Cryptor> optionalCryptor() {\n\t\treturn cryptor;\n\t}\n\n\tpublic Optional<Cryptor> createCryptor(Problems problems, Path path, CharSequence passphrase) throws IOException, AbortCheckException {\n\t\tdestroyCryptor();\n\t\tPath masterkeyFile = path.resolve(\"masterkey.cryptomator\");\n\t\ttry {\n\t\t\tif (!isRegularFile(masterkeyFile)) {\n\t\t\t\tproblems.reportMissingMasterkeyFile(masterkeyFile);\n\t\t\t\treturn Optional.empty();\n\t\t\t}\n\t\t\tKeyFile keyFile = KeyFile.parse(readAllBytes(masterkeyFile));\n\t\t\tif (keyFile.getVersion() != VAULT_VERSION) {\n\t\t\t\tthrow new AbortCheckException(format(\"Vault version mismatch. Expected: %d Actual: %d\", VAULT_VERSION, keyFile.getVersion()));\n\t\t\t}\n\t\t\tcryptor = Optional.of(bestGuessCryptorProvider(keyFile).createFromKeyFile(keyFile, normalizePassphrase(keyFile, passphrase), keyFile.getVersion()));\n\t\t\treturn cryptor;\n\t\t} catch (InvalidPassphraseException e) {\n\t\t\tthrow new AbortCheckException(\"Invalid passphrase\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tif (e.getCause() instanceof InvalidKeyException) {\n\t\t\t\tthrow new AbortCheckException(\"JCE files seem to be missing. Download from \\n\" //\n\t\t\t\t\t\t+ \"http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html.\\n\" //\n\t\t\t\t\t\t+ \"and install according to instructions in README.txt\");\n\t\t\t} else {\n\t\t\t\tproblems.reportInvalidMasterkeyFile(masterkeyFile);\n\t\t\t}\n\t\t}\n\t\tcryptor = Optional.empty();\n\t\treturn cryptor;\n\t}\n\n\tpublic void destroyCryptor() {\n\t\tcryptor.ifPresent(Cryptor::destroy);\n\t}\n\n\t@Override\n\tpublic void close() {\n\t\tdestroyCryptor();\n\t}\n\n\tpublic static CharSequence normalizePassphrase(KeyFile keyFile, CharSequence passphrase) {\n\t\tif (keyFile.getVersion() < VAULT_VERSION_INTRODUCING_PASSWORD_NORMALIZATION) {\n\t\t\treturn passphrase;\n\t\t}\n\t\treturn Normalizer.normalize(passphrase, Form.NFC);\n\t}\n\n\tpublic static CryptorProvider bestGuessCryptorProvider(KeyFile keyFile) {\n\t\tswitch (keyFile.getVersion()) {\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 5:\n\t\tcase 6:\n\t\t\treturn Cryptors.version1(strongSecureRandom());\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Unsupported vault version \" + keyFile.getVersion());\n\t\t}\n\t}\n\n\tprivate static SecureRandom strongSecureRandom() {\n\t\ttry {\n\t\t\treturn SecureRandom.getInstanceStrong();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tthrow new IllegalStateException(\"Java platform is required to support a strong SecureRandom.\", e);\n\t\t}\n\t}\n\n}\nsrc/main/java/org/cryptomator/sanitizer/integrity/AbortCheckException.java\npublic class AbortCheckException extends Exception {\n\n\tpublic AbortCheckException(String message) {\n\t\tsuper(message);\n\t}\n\n}\nsrc/main/java/org/cryptomator/sanitizer/Sanitizer.java\npublic static void print() {\n\tprint(System.out);\n}\nsrc/main/java/org/cryptomator/sanitizer/utils/Counter.java\npublic class Counter {\n\n\tprivate long count = 0;\n\n\tpublic void increment() {\n\t\tcount++;\n\t}\n\n\tpublic long get() {\n\t\treturn count;\n\t}\n\n}\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "length": 924, "dataset": "repobench-p", "language": "java", "all_classes": null, "_id": "47573702c5f1ad33b86b8645ddc49617af39e584b4303008"}
{"input": "package de.fau.cs.mad.yasme.android.asyncTasks.server;\nimport android.app.Activity;\nimport android.os.AsyncTask;\nimport de.fau.cs.mad.yasme.android.connection.DeviceTask;\nimport de.fau.cs.mad.yasme.android.contacts.QR;\nimport de.fau.cs.mad.yasme.android.controller.Log;\nimport de.fau.cs.mad.yasme.android.controller.ObservableRegistry;\nimport de.fau.cs.mad.yasme.android.controller.SpinnerObservable;\nimport de.fau.cs.mad.yasme.android.encryption.KeyEncryption;\nimport de.fau.cs.mad.yasme.android.entities.OwnDevice;\nimport de.fau.cs.mad.yasme.android.entities.User;\nimport de.fau.cs.mad.yasme.android.exception.RestServiceException;\nimport de.fau.cs.mad.yasme.android.gcm.CloudMessaging;\nimport de.fau.cs.mad.yasme.android.storage.DebugManager;\nimport de.fau.cs.mad.yasme.android.ui.AbstractYasmeActivity;\nimport de.fau.cs.mad.yasme.android.ui.fragments.LoginFragment;\n\n\n\n/**\n * Created by Cuong Bui <cuong.bui@fau.de> on 21/06/14.\n */\npublic class DeviceRegistrationTask extends AsyncTask<String, Void, Boolean> {\n\n    private long deviceId;\n    private Activity activity;\n    private String regId;\n    private Class classToNotify;\n\n    public DeviceRegistrationTask(Activity activity, Class classToNotify) {\n        this.activity = activity;\n        this.classToNotify = classToNotify;\n    }\n\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        SpinnerObservable.getInstance().registerBackgroundTask(this);\n    }\n\n    /**\n     * @params params[0] is userId\n     * @params params[1] is product\n     */\n    @Override\n    protected Boolean doInBackground(String... params) {\n        long userId = Long.parseLong(params[0]);\n\n        // the product : e.g Google Nexus\n        String product = params[1];\n\n        // Register for Google Cloud Messaging at Google Server\n        if (!registerGCM()) {\n            return false;\n        }\n\n        // Register at YASME server\n        return registerDeviceAtYASME(userId, product, regId);\n    }\n\n\n    private boolean registerGCM() {\n        CloudMessaging cloudMessaging = CloudMessaging.getInstance(this.activity);\n\n        if (cloudMessaging.checkPlayServices()) {\n            String regid = cloudMessaging.getRegistrationId();\n            Log.d(this.getClass().getSimpleName(), \"Google reg id is empty? \" + regid.isEmpty());\n            if (regid.isEmpty()) {\n                regId = cloudMessaging.registerInBackground();\n                if (null == regId || regId.isEmpty()) {\n                    Log.e(this.getClass().getSimpleName(), \"reg id for GCM is empty\");\n                    return false;\n                }\n            }\n        } else {\n            Log.i(AbstractYasmeActivity.TAG, \"No valid Google Play Services APK found.\");\n        }\n\n        return true;\n    }\n\n\n    private boolean registerDeviceAtYASME(long userId, String product, String regId) {\n        long deviceIdFromServer;\n\n        //register device through REST-Call\n        // create a new device to be registered\n\n        // user which want to register the device\n        // ignore the name user, the server will set the right values according to the userId\n        User user = new User(\"user\", userId);\n\n        // indicates if its a smartphone or a tablet\n        // currently unused\n        String type = \"device\";\n\n        // phone number, currently unused\n        String number = null;\n\n        KeyEncryption rsa = new KeyEncryption();\n        //generate private and public Key\n        rsa.generateRSAKeys();\n        String pubKeyInBase64 = rsa.getGeneratedPubKeyInBase64();\n\n        OwnDevice deviceToBeRegistered = new OwnDevice(user, OwnDevice.Platform.ANDROID, pubKeyInBase64, type, number, product, regId);\n\n        // make the REST-Call\n        try {\n            deviceIdFromServer = DeviceTask.getInstance().registerDevice(deviceToBeRegistered);\n            deviceId = deviceIdFromServer;\n            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);", "context": "yasme/src/main/java/de/fau/cs/mad/yasme/android/encryption/KeyEncryption.java\npublic class KeyEncryption {\r\n\r\n    public static final String RSAKEY_STORAGE = \"rsaKeyStorage\"; //Storage for Private and Public Keys from user\r\n    public static final String PRIVATEKEY = \"privateKey\";\r\n    public static final String PUBLICKEY = \"publicKey\";\r\n    private final byte CREATOR = 0;\r\n    private final byte RECIPIENT = 1;\r\n    private RSAEncryption rsa;\r\n    private DatabaseManager db = DatabaseManager.INSTANCE;\r\n\r\n    public KeyEncryption() {\r\n        this.rsa = new RSAEncryption();\r\n    }\r\n\r\n    /**\r\n     * generate a random RSA-KeyPair (Private and Public Key)\r\n     */\r\n    public void generateRSAKeys(){\r\n        rsa.generateKeyPair();\r\n    }\r\n\r\n    /**\r\n     * encode generated RSA-KeyPair to base64 and store it to local storage (SharedPreferences)\r\n     * there is a own SharedPreference for every user on the device\r\n     *\r\n     * @param deviceId deviceId from the user logged in currently\r\n     * @return true/false\r\n     */\r\n    public boolean saveRSAKeys(long deviceId){\r\n\r\n        String RSAKEY_STORAGE_USER = RSAKEY_STORAGE + \"_\" + deviceId;\r\n\r\n        try {\r\n\r\n            Context context = DatabaseManager.INSTANCE.getContext();\r\n            SharedPreferences privKeyStorage = context.getSharedPreferences(RSAKEY_STORAGE_USER, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor keyeditor = privKeyStorage.edit();\r\n\r\n            //delete existing keys\r\n            if (privKeyStorage.getString(PRIVATEKEY, \"\") != \"\"){\r\n                keyeditor.remove(PRIVATEKEY);\r\n            }\r\n            if (privKeyStorage.getString(PUBLICKEY, \"\") != \"\"){\r\n                keyeditor.remove(PUBLICKEY);\r\n            }\r\n\r\n            keyeditor.putString(PRIVATEKEY, rsa.getPrivKeyinBase64());\r\n            keyeditor.putString(PUBLICKEY, rsa.getPubKeyinBase64());\r\n\r\n            keyeditor.commit();\r\n\r\n            // For Developer-Devices only\r\n            if (DebugManager.INSTANCE.isDebugMode()) {\r\n                Log.d(getClass().getSimpleName(), \"Store keys to external storage\");\r\n                DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getPrivKeyinBase64(),rsa.getPubKeyinBase64());\r\n            }\r\n\r\n            Log.d(this.getClass().getSimpleName(), \"RSA Keys generated and saved\");\r\n\r\n\r\n            return true;\r\n        } catch (Exception e){\r\n            Log.e(this.getClass().getSimpleName(), \"saving rsa keys failed\");\r\n            Log.e(this.getClass().getSimpleName(),e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get the generated RSA Public Key in Base64\r\n     * method is needed in registration when the Public Key needs to be sent to the server\r\n     *\r\n     * @return base64 encoded string\r\n     */\r\n    public String getGeneratedPubKeyInBase64(){\r\n        return rsa.getPubKeyinBase64();\r\n    }\r\n\r\n    /**\r\n     * encrypt the given messageKey using the RSA PublicKey from the recipient\r\n     *\r\n     * @param messageKey messageKey containing the AES-Key that should be encrypted\r\n     * @return messageKey containing the RSA-encrypted AES-Key\r\n     */\r\n    public MessageKey encrypt(MessageKey messageKey){\r\n\r\n        PublicKey pubKey = getPubKeyFromUser(messageKey, RECIPIENT);\r\n\r\n        if (pubKey != null){\r\n            String keyEncrypted = rsa.encrypt(messageKey.getMessageKey(), pubKey);\r\n            messageKey.setKey(keyEncrypted);\r\n            return messageKey;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * encrypt the given messageKey using the own RSA Private Key\r\n     *\r\n     * @param messageKey messageKey containing the encrypted AES-Key that should be decrypted\r\n     * @return messageKey containing the decrypted AES-Key\r\n     */\r\n    public MessageKey decrypt(MessageKey messageKey){\r\n\r\n        long selfDeviceId = messageKey.getRecipientDevice().getId();\r\n        PrivateKey privKey = getPrivateRSAKeyFromStorage(selfDeviceId);\r\n\r\n        if (privKey != null) {\r\n            String key = rsa.decrypt(messageKey.getMessageKey(), privKey);\r\n            if (key == null) {\r\n                return null;\r\n            }\r\n            messageKey.setKey(key);\r\n            return messageKey;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * sign an AES-Key using the own RSA Private Key\r\n     *\r\n     * @param messageKey messageKey containing the AES-Key that should be signed\r\n     * @return  messageKey containing the signature\r\n     */\r\n    public MessageKey sign(MessageKey messageKey){\r\n\r\n        long selfDeviceId = messageKey.getCreatorDevice().getId();\r\n        PrivateKey privKey = getPrivateRSAKeyFromStorage(selfDeviceId);\r\n\r\n        if (privKey != null) {\r\n            String keySigned = rsa.sign(messageKey.getMessageKey(), privKey);\r\n            messageKey.setSign(keySigned);\r\n            return messageKey;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * verify the signature from given messageKey using the RSA Public Key from the creatorDevice\r\n     *\r\n     * @param messageKey messageKey containing the signature\r\n     * @return true/false\r\n     */\r\n    public boolean verify(MessageKey messageKey){\r\n\r\n        PublicKey pubKey = getPubKeyFromUser(messageKey, CREATOR);\r\n\r\n        if (pubKey != null) {\r\n            Log.d(getClass().getSimpleName(), \"Verify key\");\r\n            return rsa.verify(messageKey.getSign(), messageKey.getMessageKey(), pubKey);\r\n        }\r\n        Log.d(getClass().getSimpleName(), \"PubKey is null\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * load own RSA Private Key from local storage\r\n     *\r\n     * @param selfDeviceId deviceId from the user logged in currently\r\n     * @return PrivateKey\r\n     */\r\n    public PrivateKey getPrivateRSAKeyFromStorage(long selfDeviceId){\r\n\r\n        String RSAKEY_STORAGE_USER = RSAKEY_STORAGE + \"_\" + selfDeviceId;\r\n\r\n        Context context = DatabaseManager.INSTANCE.getContext();\r\n        SharedPreferences privKeyStorage = context.getSharedPreferences(RSAKEY_STORAGE_USER, Context.MODE_PRIVATE);\r\n        String privKeyInBase64 = privKeyStorage.getString(PRIVATEKEY, \"\");\r\n\r\n        Log.d(this.getClass().getSimpleName(),\"Load private Key from storage: \" + RSAKEY_STORAGE_USER);\r\n\r\n        //if Key is available\r\n        if (privKeyInBase64 != \"\") {\r\n\r\n            PrivateKey privKey = rsa.convertBase64toPrivKey(privKeyInBase64);\r\n\r\n            if (privKey != null){\r\n                Log.d(this.getClass().getSimpleName(),\"Private Key was successfully loaded from storage\");\r\n                return privKey;\r\n            }\r\n\r\n            Log.d(this.getClass().getSimpleName(), \"Getting private key from storage failed\");\r\n            return null;\r\n        }\r\n\r\n            Log.d(this.getClass().getSimpleName(), \"Private Key could not be found.\");\r\n            return null;\r\n\r\n    }\r\n\r\n    /**\r\n     * load the needed RSA Public Key from local storage/Device-Object\r\n     *\r\n     * @param messageKey messageKey containing the information about creatorDevice and recipientDevice\r\n     * @param type define, the RSA Public Key from the recipient or the creator is needed\r\n     * @return PublicKey\r\n     */\r\n    public PublicKey getPubKeyFromUser(MessageKey messageKey, byte type) {\r\n\r\n        String pubKeyInBase64 = null;\r\n\r\n        //try to extract Public Key from MessageKey\r\n        if (type == CREATOR){\r\n                pubKeyInBase64 = messageKey.getCreatorDevice().getPublicKey();\r\n        }\r\n        else if (type == RECIPIENT){\r\n                pubKeyInBase64 = messageKey.getRecipientDevice().getPublicKey();\r\n        }\r\n        else{\r\n            Log.d(this.getClass().getSimpleName(), \"Wrong use of function: getPubKeyFromUser()\");\r\n            return null;\r\n        }\r\n\r\n        //convert Base64toPublicKey\r\n        if (pubKeyInBase64 != null) {\r\n            PublicKey pubKey = rsa.convertBase64toPubKey(pubKeyInBase64);\r\n            if (pubKey != null) return pubKey;\r\n        }\r\n\r\n        Log.d(this.getClass().getSimpleName(), \"Getting public key from storage failed\");\r\n        return null;\r\n    }\r\n\r\n    /*\r\n    //get own PublicKey in Base64\r\n    public String getPublicRSAKeyInBase64FromStorage(long selfDeviceId){\r\n\r\n        String RSAKEY_STORAGE_USER = RSAKEY_STORAGE + \"_\" + selfDeviceId;\r\n\r\n        Context context = DatabaseManager.INSTANCE.getContext();\r\n        SharedPreferences privKeyStorage = context.getSharedPreferences(RSAKEY_STORAGE_USER, Context.MODE_PRIVATE);\r\n        String pubKeyInBase64 = privKeyStorage.getString(PUBLICKEY, \"\");\r\n\r\n        return pubKeyInBase64;\r\n    }\r\n    */\r\n\r\n}\r\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/LoginFragment.java\npublic class LoginFragment extends Fragment implements NotifiableFragment<LoginFragment.LoginParam> {\n\n    //Keep track of the login task to ensure we can cancel it if requested.\n    private UserLoginTask authTask = null;\n\n    // UI references.\n    private EditText emailView;\n    private EditText passwordView;\n    private TextView loginStatusMessageView;\n    private View mProgressView;\n    private View mLoginFormView;\n    // values for devices yasme server\n    private String deviceProduct;\n    // Values for name, email and password at the time of the login attempt.\n    private String emailTmp;\n    private String passwordTmp;\n    // focusView for validate()\n    private View focusView = null;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        // In debug app, show @yasme.net\n        String defaultEmail = (BuildConfig.DEBUG) ? \"@yasme.net\" : \"\";\n\n        // Restore preferences\n        emailTmp = DatabaseManager.INSTANCE.getSharedPreferences().getString(AbstractYasmeActivity.USER_MAIL, defaultEmail);\n    }\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View rootView = inflater.inflate(R.layout.fragment_login, container,\n                false);\n\n        // Set up the login form.\n        emailView = (EditText) rootView.findViewById(R.id.email);\n        emailView.setText(emailTmp);\n\n        passwordView = (EditText) rootView.findViewById(R.id.password);\n        if (BuildConfig.DEBUG) {\n            passwordView.setText(R.string.default_password);\n        }\n        passwordView\n                .setOnEditorActionListener(new TextView.OnEditorActionListener() {\n                    @Override\n                    public boolean onEditorAction(TextView textView, int id,\n                                                  KeyEvent keyEvent) {\n                        if (id == R.id.login || id == EditorInfo.IME_NULL) {\n                            attemptLogin();\n                            return true;\n                        }\n                        return false;\n                    }\n                });\n\n        loginStatusMessageView = (TextView) rootView.findViewById(R.id.login_status_message);\n\n        rootView.findViewById(R.id.sign_in_button).setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                        Log.d(this.getClass().getSimpleName(), \"SignIn-Button pushed\");\n                        attemptLogin();\n                    }\n                }\n        );\n\n        rootView.findViewById(R.id.register_button).setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                        Log.d(this.getClass().getSimpleName(), \"Register-Button pushed\");\n                        registerDialog();\n                    }\n                }\n        );\n\n        TextView tv = (TextView) rootView.findViewById(R.id.forgot_password);\n\n        Pattern pattern = Pattern.compile(getString(R.string.forgot_password));\n        /*\n        Linkify.addLinks(tv, pattern, \"\", null, new Linkify.TransformFilter() {\n            @Override\n            public String transformUrl(Matcher matcher, String s) {\n                return \"\";\n            }\n        });\n        */\n        tv.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                        Log.d(this.getClass().getSimpleName(), \"Forgot Password-Button pushed\");\n                        requestMail();\n                    }\n                }\n        );\n\n        return rootView;\n    }\n\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        Log.d(this.getClass().getSimpleName(), \"Try to get LoginObservableInstance\");\n        FragmentObservable<LoginFragment, LoginParam> obs = ObservableRegistry.getObservable(LoginFragment.class);\n        Log.d(this.getClass().getSimpleName(), \"... successful\");\n\n        obs.register(this);\n        mProgressView = getActivity().findViewById(R.id.login_status);\n        mLoginFormView = getActivity().findViewById(R.id.login);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<LoginFragment, LoginParam> obs =\n                ObservableRegistry.getObservable(LoginFragment.class);\n        Log.d(this.getClass().getSimpleName(), \"Remove from observer\");\n        obs.remove(this);\n    }\n\n    private void registerDialog() {\n        getFragmentManager().beginTransaction()\n                .add(R.id.singleFragmentContainer, new RegisterFragment()).commit();\n    }\n\n    /**\n     * Attempts to sign in or register the account specified by the login form.\n     * If there are form errors (missing fields, etc.), the errors are presented\n     * and no actual login attempt is made.\n     */\n    public void attemptLogin() {\n        if (authTask == null) {\n            authTask = new UserLoginTask(true, this.getClass());\n            Log.d(this.getClass().getSimpleName(), \"AuthTask is null\");\n        }\n\n        // Reset errors.\n        emailView.setError(null);\n        passwordView.setError(null);\n\n        // Store values at the time of the login attempt.\n        emailTmp = emailView.getText().toString();\n        passwordTmp = passwordView.getText().toString();\n\n        boolean cancel = false;\n\n        // Check for a valid password.\n        if (TextUtils.isEmpty(passwordTmp)) {\n            passwordView.setError(getString(R.string.error_field_required));\n            focusView = passwordView;\n            cancel = true;\n        } else if (passwordTmp.length() < 8) {\n            passwordView.setError(getString(R.string.error_invalid_password));\n            focusView = passwordView;\n            cancel = true;\n        }\n\n        // Check for a valid mail.\n        if (TextUtils.isEmpty(emailTmp)) {\n            emailView.setError(getString(R.string.error_field_required));\n            focusView = emailView;\n            cancel = true;\n        }\n\n        if (cancel) {\n            // There was an error; don't attempt login and focus the first\n            // form field with an error.\n            focusView.requestFocus();\n        } else {\n            // Show a progress spinner, and kick off a background task to\n            // perform the user login attempt.\n            loginStatusMessageView.setText(R.string.login_progress_signing_in);\n            showProgress(true);\n\n            // Hide the virtual keyboard\n            AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n            View focus = activity.getCurrentFocus();\n            if (null == focus) {\n                focus = focusView;\n            }\n            if (null == focus) {\n                focus = passwordView;\n            }\n            if (null == focus) {\n                focus = emailView;\n            }\n            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\n            if (null != imm && null != focus)\n                imm.hideSoftInputFromWindow(focus.getWindowToken(), 0);\n\n            // Start the asynctask\n            authTask.execute(emailTmp, passwordTmp);\n            authTask = null;\n        }\n    }\n\n    public void onPostLoginExecute(Boolean success, long userId) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n        activity.getSelfUser().setId(userId);\n\n        if (success) {\n            //Initialize database (once in application)\n            if (!DatabaseManager.INSTANCE.isInitialized()) {\n                Log.e(getClass().getSimpleName(), \"DB-Manger hasn't been initialized\");\n            }\n            DatabaseManager.INSTANCE.setUserId(userId);\n\n            // check if there is a device in the Database\n            if (yasmeDeviceCheck()) {\n                Log.d(this.getClass().getSimpleName(), \"Device exists in Database\");\n\n                long deviceId = DatabaseManager.INSTANCE.getSharedPreferences().getLong(AbstractYasmeActivity.DEVICE_ID, -1);\n                if (deviceId < 0) {\n                    // Error ocurred\n                    Log.e(this.getClass().getSimpleName(), \"Could not load registered device's id from shared prefs\");\n                    showProgress(false);\n                    return;\n                }\n\n                DatabaseManager.INSTANCE.setDeviceId(deviceId);\n\n                showProgress(false);\n                Intent intent = new Intent(activity, ChatListActivity.class);\n                startActivity(intent);\n                getActivity().finish();\n            } else {\n                // register device\n                Log.d(this.getClass().getSimpleName(), \"Device does not exist in Database\");\n                Log.d(this.getClass().getSimpleName(), \"Starting task to register device at yasme server\");\n\n                new DeviceRegistrationTask(activity, this.getClass())\n                        .execute(Long.toString(userId), this.deviceProduct, this.getClass().getName());\n\n            }\n        } else {\n            Log.d(getClass().getSimpleName(), \"Login failed\");\n            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();\n            if (serverInfo != null && !serverInfo.getLoginAllowed() && serverInfo.hasMessage()) {\n                passwordView.setError(DatabaseManager.INSTANCE.getServerInfo().getMessage());\n            } else {\n                passwordView.setError(getString(R.string.error_incorrect_user_or_password));\n            }\n            passwordView.requestFocus();\n            showProgress(false);\n        }\n    }\n\n    public void onPostYasmeDeviceRegExecute(Boolean success, long deviceId) {\n        if (!success) {\n            Toaster.getInstance().toast(getResources().getString(R.string.device_registration_failed), Toast.LENGTH_LONG);\n        } else {\n            AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n            // Initialize the session a second time because the deviceId was missing\n            /*SharedPreferences devicePrefs = activity.getSharedPreferences(\n                    AbstractYasmeActivity.DEVICE_PREFS,\n                    AbstractYasmeActivity.MODE_PRIVATE);\n            long userId = devicePrefs.getLong(AbstractYasmeActivity.USER_ID, -1);\n            if (userId < 0) {\n                // Error ocurred\n                Log.e(this.getClass().getSimpleName(), \"Did not find user id in shared prefs\");\n                Toaster.getInstance().toast(getResources().getString(R.string.device_registration_failed), Toast.LENGTH_LONG);\n                showProgress(false);\n                return;\n            }*/\n\n            DatabaseManager.INSTANCE.setDeviceId(deviceId);\n\n            Log.d(this.getClass().getSimpleName(), \"Login after device registration at yasme server\");\n            showProgress(false);\n            Intent intent = new Intent(activity, ChatListActivity.class);\n            startActivity(intent);\n            getActivity().finish();\n        }\n    }\n\n    /**\n     * This method checks if there is a device in the DB\n     */\n    public boolean yasmeDeviceCheck() {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n        //set the deviceProduct\n        this.deviceProduct = Build.MANUFACTURER + \" \" + Build.MODEL;\n        Log.d(this.getClass().getSimpleName(), \"MODEL is \" + Build.MODEL);\n        Log.d(this.getClass().getSimpleName(), \"DEVICE is \" + Build.DEVICE);\n        Log.d(this.getClass().getSimpleName(), \"PRODUCT is \" + Build.PRODUCT);\n        Log.d(this.getClass().getSimpleName(), \"MANUFACTURER is \" + Build.MANUFACTURER);\n        Log.d(this.getClass().getSimpleName(), \"BRAND is \" + Build.BRAND);\n        Log.d(this.getClass().getSimpleName(), \"NOW is \" + this.deviceProduct);\n        //try to load device from shared preferences\n        SharedPreferences devicePrefs = activity.getSharedPreferences(\n                AbstractYasmeActivity.DEVICE_PREFS,\n                AbstractYasmeActivity.MODE_PRIVATE);\n        long deviceId = devicePrefs.getLong(AbstractYasmeActivity.DEVICE_ID, -1);\n\n        // load regId\n        SharedPreferences pushPrefs = activity.\n                getSharedPreferences(AbstractYasmeActivity.PUSH_PREFS,\n                        AbstractYasmeActivity.MODE_PRIVATE);\n\n        String googleRegId = pushPrefs.getString(AbstractYasmeActivity.PROPERTY_REG_ID, null);\n        // TODO proper check\n\n        if (deviceId == -1) {\n            if (DebugManager.INSTANCE.isDebugMode()) {\n                return DebugManager.INSTANCE.restoreData();\n            }\n            return false;\n        }\n        // TODO devices from server\n        // TODO use case : plain app + old user + old device\n\n        Log.d(this.getClass().getSimpleName(), \"deviceId is \" + deviceId);\n        return true;\n    }\n\n    public void requestMail() {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n        AlertDialog.Builder alert = new AlertDialog.Builder(activity);\n        alert.setTitle(getString(R.string.request_email_title));\n\n        LinearLayout list = new LinearLayout(activity);\n        list.setOrientation(LinearLayout.VERTICAL);\n        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.MATCH_PARENT,\n                LinearLayout.LayoutParams.MATCH_PARENT);\n\n        final TextView requestEmailText = new TextView(activity);\n        requestEmailText.setText(R.string.request_email_body);\n\n        final EditText mail = new EditTextWithX(activity).getEditText();\n        mail.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);\n        mail.setHint(R.string.registration_email);\n        mail.setText(emailTmp);\n\n        list.addView(mail);\n        list.addView(requestEmailText, layoutParams);\n\n        alert.setView(list);\n\n        // \"OK\" button to save the values\n        alert.setPositiveButton(R.string.OK,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        // Grab the EditText's input\n                        emailTmp = mail.getText().toString();\n                        Log.d(this.getClass().getSimpleName(), \"Mail to send token at: \" + emailTmp);\n                        User user = new User();\n                        user.setEmail(emailTmp);\n                        new ChangePasswordTask(user).execute(\"1\");\n                        forgotPasswordDialog(emailTmp);\n                    }\n                }\n        );\n\n        // Skip, email was already sent\n        alert.setNeutralButton(R.string.skip,\n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n                        forgotPasswordDialog(null);\n                    }\n                }\n        );\n\n        // \"Cancel\" button\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        dialog.cancel();\n                    }\n                }\n        );\n        alert.show();\n    }\n\n    public void forgotPasswordDialog(final String inputMail) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n        AlertDialog.Builder alert = new AlertDialog.Builder(activity);\n        alert.setTitle(getString(R.string.password_title));\n\n        LinearLayout list = new LinearLayout(activity);\n        list.setOrientation(LinearLayout.VERTICAL);\n        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.MATCH_PARENT,\n                LinearLayout.LayoutParams.MATCH_PARENT);\n\n        final EditText token = new EditText(activity);\n        token.setInputType(InputType.TYPE_CLASS_TEXT);\n        token.setHint(R.string.hint_mail_token);\n\n        final TextView tokenExplanation = new TextView(activity);\n        tokenExplanation.setText(R.string.explanation_mail_token);\n\n        final EditText password = new EditText(activity);\n        password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n        password.setHint(R.string.hint_new_password);\n\n        final EditText passwordCheck = new EditText(activity);\n        passwordCheck.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);\n        passwordCheck.setHint(R.string.hint_repeat_new_password);\n\n        final EditText mail = new EditText(activity);\n        mail.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);\n        mail.setHint(R.string.registration_email);\n\n        if (inputMail == null || inputMail.isEmpty()) {\n            list.addView(mail);\n        }\n        list.addView(token, layoutParams);\n        list.addView(tokenExplanation, layoutParams);\n        list.addView(password, layoutParams);\n        list.addView(passwordCheck, layoutParams);\n\n        alert.setView(list);\n\n        // \"OK\" button to save the values\n        alert.setPositiveButton(R.string.OK,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n\n                        // Grab the EditText's input\n                        String email;\n                        if (inputMail == null || inputMail.isEmpty()) {\n                            email = mail.getText().toString();\n                        } else {\n                            email = inputMail;\n                        }\n                        String mailToken = token.getText().toString();\n                        String inputPassword = password.getText().toString();\n                        String inputPasswordCheck = passwordCheck.getText()\n                                .toString();\n\n                        if (password.getText().length() < 8) {\n                            Toaster.getInstance().toast(R.string.password_too_short,\n                                    Toast.LENGTH_LONG);\n                            return;\n                        }\n                        if (!inputPassword.equals(inputPasswordCheck)) {\n                            Toaster.getInstance().toast(R.string.passwords_do_not_match,\n                                    Toast.LENGTH_LONG);\n                            return;\n                        }\n                        User user = new User(email, inputPassword);\n                        PasswordEncryption pwEnc = new PasswordEncryption(user);\n                        User secured = pwEnc.securePassword();\n                        new ChangePasswordTask(secured).execute(\"0\", mailToken);\n                    }\n                }\n        );\n\n        // \"Cancel\" button\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        dialog.cancel();\n                    }\n                }\n        );\n        alert.show();\n    }\n\n    /**\n     * Shows the progress UI and hides the login form.\n     */\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n    public void showProgress(final boolean show) {\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\n        // for very easy animations. If available, use these APIs to fade-in\n        // the progress spinner.\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\n\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n                }\n            });\n\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n                }\n            });\n        } else {\n            // The ViewPropertyAnimator APIs are not available, so simply show\n            // and hide the relevant UI components.\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n        }\n    }\n\n    @Override\n    public void notifyFragment(LoginParam param) {\n        Log.d(super.getClass().getSimpleName(), \"I have been notified. Yeeha!\");\n        if (param instanceof LoginProcessParam) {\n            notifyFragment((LoginProcessParam) param);\n        } else if (param instanceof DeviceRegistrationParam) {\n            notifyFragment((DeviceRegistrationParam) param);\n        }\n    }\n\n    public void notifyFragment(LoginProcessParam loginParam) {\n        Log.d(super.getClass().getSimpleName(), \"I have been notified with loginParam\");\n\n        onPostLoginExecute(loginParam.getSuccess(), loginParam.getUserId());\n        Log.d(super.getClass().getSimpleName(), \"Login-Status: \" + loginParam.getSuccess());\n    }\n\n    public void notifyFragment(DeviceRegistrationParam deviceRegistrationParam) {\n        Log.d(super.getClass().getSimpleName(), \"I have been notified with deviceRegistrationParam\");\n\n        onPostYasmeDeviceRegExecute(deviceRegistrationParam.getSuccess(),\n                deviceRegistrationParam.getDeviceId());\n\n    }\n\n    public static class LoginParam {\n        protected Boolean success;\n\n        public Boolean getSuccess() {\n            return success;\n        }\n    }\n\n    public static class LoginProcessParam extends LoginParam {\n        private Long userId;\n\n        public LoginProcessParam(Boolean success) {\n            this.success = success;\n            this.userId = DatabaseManager.INSTANCE.getUserId();\n        }\n\n        public Long getUserId() {\n            return userId;\n        }\n    }\n\n    public static class DeviceRegistrationParam extends LoginParam {\n        private Long deviceId;\n\n        public DeviceRegistrationParam(Boolean success) {\n            this.success = success;\n            this.deviceId = DatabaseManager.INSTANCE.getDeviceId();\n        }\n\n        public Long getDeviceId() {\n            return deviceId;\n        }\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/AbstractYasmeActivity.java\npublic abstract class AbstractYasmeActivity extends Activity implements Toastable {\n    public final static String USER_ID = \"de.fau.cs.mad.yasme.android.USER_ID\";\n    public final static String USER_NAME = \"de.fau.cs.mad.yasme.android.USER_NAME\";\n    public final static String USER_MAIL = \"de.fau.cs.mad.yasme.android.USER_MAIL\";\n    public final static String USER_PW = \"de.fau.cs.mad.yasme.android.USER_PW\";\n    public final static String DEVICE_ID = \"de.fau.cs.mad.yasme.android.DEVICE_ID\";\n    public final static String PROFILE_PICTURE = \"de.fau.cs.mad.yasme.android.PROFILE_PICTURE\";\n\n    public final static String CHAT_ID = \"de.fau.cs.mad.yasme.android.CHAT_ID\";\n    public final static String LAST_MESSAGE_ID = \"de.fau.cs.mad.yasme.android.LAST_MESSAGE_ID\";\n\n    public final static String ACCESSTOKEN = \"de.fau.cs.mad.yasme.android.ACCESSTOKEN\";\n    public final static String SIGN_IN = \"de.fau.cs.mad.yasme.android.SIGN_IN\";\n\n    public final static String SERVERINFOUPDATETIME = \"de.fau.cs.mad.yasme.android.SERVERINFOUPDATETIME\";\n    public final static String SERVERMESSAGE = \"de.fau.cs.mad.yasme.android.SERVERMESSAGE\";\n\n    public final static String STORAGE_PREFS = \"de.fau.cs.mad.yasme.android.STORAGE_PREFS\";\n    public final static String SETTINGS_PREFS = \"de.fau.cs.mad.yasme.android.SETTINGS_PREFS\";\n    public final static String DEVICE_PREFS = \"de.fau.cs.mad.yasme.android.DEVICE_PREFS\";\n    public final static String PUSH_PREFS = \"de.fau.cs.mad.yasme.android.PUSH_PREFS\";\n\n    public final static String NOTIFICATION_VIBRATE = \"de.fau.cs.mad.yasme.android.NOTIFICATION_VIBRATE\";\n    public final static String NOTIFICATION_SOUND = \"de.fau.cs.mad.yasme.android.NOTIFICATION_SOUND\";\n\n\n    //GCM Properties\n    public static final String PROPERTY_REG_ID = \"registration_id\";\n    public static final String PROPERTY_APP_VERSION = \"appVersion\";\n    public static final String SENDER_ID = \"688782154540\"; //\"104759172131\";\n    public static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;\n    public static final String TAG = \"YasmeGCM\";\n\n    protected User selfUser;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (!ConnectionTask.isInitialized()) {\n            String server = getResources().getString(R.string.server_host);\n            if (BuildConfig.DEBUG) {\n                server = getResources().getString(R.string.server_host_debug);\n            }\n            Log.d(getClass().getSimpleName(), \"YASME-Server: \" + server);\n            ConnectionTask.initParams(getResources().getString(R.string.server_scheme),\n                    server,\n                    getResources().getString(R.string.server_port), getResources().getString(R.string.language), getVersion());\n        }\n\n        SharedPreferences storage = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE);\n        SharedPreferences settings = getSharedPreferences(SETTINGS_PREFS, MODE_PRIVATE);\n        Long userId = storage.getLong(USER_ID, 0);\n        String userName = storage.getString(USER_NAME, \"\");\n        String userMail = storage.getString(USER_MAIL, \"\");\n        String userPw = storage.getString(USER_PW, \"password\");\n\n        if(selfUser==null) {\n            selfUser = new User();\n        }\n        selfUser.setId(userId);\n        selfUser.setName(userName);\n        selfUser.setEmail(userMail);\n        selfUser.setPw(userPw);\n\n\n        //Initialize databaseManager (once in application)\n        if (!DatabaseManager.INSTANCE.isInitialized()) {\n            DatabaseManager.INSTANCE.init(this, storage, settings, userId);\n        }\n        //Init QR-Code\n        QR.init(false);\n\n        String accessToken = DatabaseManager.INSTANCE.getAccessToken();\n        if ((accessToken == null || accessToken.length() <= 0) && !this.getClass().equals(LoginActivity.class)) {\n            Log.i(this.getClass().getSimpleName(), \"Not logged in, starting login activity\");\n            Intent intent = new Intent(this, LoginActivity.class);\n            startActivity(intent);\n            finish();\n            return;\n        }\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        Toaster.getInstance().register(this);\n        stopSpinning();\n        SpinnerObservable.getInstance().registerActivity(this);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        String accessToken = DatabaseManager.INSTANCE.getAccessToken();\n        if ((accessToken == null || accessToken.length() <= 0) && !this.getClass().equals(LoginActivity.class)) {\n            Log.i(this.getClass().getSimpleName(), \"Not logged in, starting login activity\");\n            Intent intent = new Intent(this, LoginActivity.class);\n            startActivity(intent);\n            finish();\n            return;\n        }\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Toaster.getInstance().remove(this);\n        SpinnerObservable.getInstance().removeActivity(this);\n    }\n\n    public void setActionBarTitle(String title) {\n        getActionBar().setTitle(title);\n    }\n\n    public void setActionBarTitle(String title, String subtitle) {\n        getActionBar().setTitle(title);\n        getActionBar().setSubtitle(subtitle);\n    }\n\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        Intent intent;\n        int itemId = item.getItemId();\n        switch (itemId) {\n            case android.R.id.home:\n                if (NavUtils.getParentActivityName(this) != null) {\n                    NavUtils.navigateUpFromSameTask(this);\n                }\n                return true;\n            case R.id.action_settings:\n                intent = new Intent(this, SettingsActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n                startActivity(intent);\n                return true;\n            case R.id.action_chats:\n                intent = new Intent(this, ChatListActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n                startActivity(intent);\n                return true;\n            case R.id.action_add_chat:\n                intent = new Intent(this, InviteToChatActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n                startActivity(intent);\n                return true;\n            case R.id.action_contacts:\n                intent = new Intent(this, ContactActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n\n        }\n    }\n\n    public String getSelfName() {\n\n        if(selfUser==null) {\n            SharedPreferences storage = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE);\n            Long userId = storage.getLong(USER_ID, 0);\n            String userName = storage.getString(USER_NAME, \"\");\n            String userMail = storage.getString(USER_MAIL, \"\");\n            String userPw = storage.getString(USER_PW, \"password\");\n\n            selfUser = new User();\n            selfUser.setId(userId);\n            selfUser.setName(userName);\n            selfUser.setEmail(userMail);\n            selfUser.setPw(userPw);\n        }\n        if (selfUser.getName().isEmpty()) {\n            String name = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE).getString(USER_NAME, \"\");\n            selfUser.setName(name);\n        }\n        return selfUser.getName();\n    }\n\n    public User getSelfUser() {\n        return selfUser;\n    }\n\n    public String getUserMail() {\n        if (selfUser == null || selfUser.getEmail().isEmpty()) {\n            String mail = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE).getString(USER_MAIL, \"\");\n            selfUser.setEmail(mail);\n        }\n        return selfUser.getEmail();\n    }\n\n    public long getUserId() {\n        return selfUser.getId();\n    }\n\n    public String getOwnProfilePicture() {\n        String path = selfUser.getProfilePicture();\n        if (path == null || path.isEmpty()) {\n            path = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE).getString(PROFILE_PICTURE, null);\n        }\n        return path;\n    }\n\n    public void setOwnProfilePicture(String ownProfilePicture) {\n        selfUser.setProfilePicture(ownProfilePicture);\n        SharedPreferences.Editor editor = getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE).edit();\n        editor.putString(AbstractYasmeActivity.PROFILE_PICTURE, ownProfilePicture);\n        editor.commit();\n    }\n\n    public String getAccessToken() {\n        return DatabaseManager.INSTANCE.getAccessToken();\n    }\n\n    public void toast(final int messageId, final int duration) {\n        String text = getApplicationContext().getResources().getString(messageId);\n        toast(text, duration, -1);\n    }\n\n    public void toast(final String text, final int duration) {\n        toast(text, duration, -1);\n    }\n\n    public void toast(final String text, final int duration, final int gravity) {\n        runOnUiThread(new Runnable() {\n            public void run() {\n                Toast toast = Toast.makeText(getApplicationContext(), text, duration);\n                if (-1 != gravity) {\n                    toast.setGravity(gravity, 0, 0);\n                }\n                // otherwise use default position\n                Log.d(getClass().getSimpleName(), \"Toast: \" + text);\n                toast.show();\n            }\n        });\n    }\n\n    public void startSpinning() {\n        runOnUiThread(new Runnable() {\n            public void run() {\n                setProgressBarIndeterminateVisibility(true);\n            }\n        });\n    }\n\n    public void stopSpinning() {\n        runOnUiThread(new Runnable() {\n            public void run() {\n                setProgressBarIndeterminateVisibility(false);\n            }\n        });\n    }\n\n    public int getVersion() {\n        try {\n            return getPackageManager().getPackageInfo(getPackageName(), 0).versionCode;\n        } catch (Exception e) {\n            Log.e(this.getClass().getSimpleName(), e.getMessage());\n            return 0;\n        }\n    }\n\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/gcm/CloudMessaging.java\npublic class CloudMessaging {\n\n    private static CloudMessaging instance;\n\n    private Activity activity;\n    private GoogleCloudMessaging gcm;\n    private Context context;\n    private String regid;\n\n\n    public static CloudMessaging getInstance(Activity activity) {\n        if (instance == null) {\n            instance = new CloudMessaging(activity);\n        }\n        return instance;\n    }\n\n    private CloudMessaging(Activity activity) {\n        this.activity = activity;\n        this.context = activity.getApplicationContext();\n        this.gcm = GoogleCloudMessaging.getInstance(activity);\n    }\n\n    public boolean checkPlayServices() {\n        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(activity);\n        if (resultCode != ConnectionResult.SUCCESS) {\n            if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {\n                GooglePlayServicesUtil.getErrorDialog(resultCode, activity,\n                        AbstractYasmeActivity.PLAY_SERVICES_RESOLUTION_REQUEST).show();\n            } else {\n                Log.i(AbstractYasmeActivity.TAG, \"This device is not supported.\");\n                activity.finish();\n            }\n            return false;\n        }\n        return true;\n    }\n\n    public String getRegistrationId() {\n        final SharedPreferences prefs = getGCMPreferences(context);\n        String registrationId = prefs.getString(AbstractYasmeActivity.PROPERTY_REG_ID, \"\");\n        Log.i(AbstractYasmeActivity.TAG + \"WOOOOOLOOOLOOOO\", \"this is my id: [\" + AbstractYasmeActivity.PROPERTY_REG_ID + \"]\");\n        if (registrationId.isEmpty()) {\n            Log.i(AbstractYasmeActivity.TAG, \"Registration not found.\");\n            return \"\";\n        }\n        // Check if app was updated; if so, it must clear the registration ID\n        // since the existing regID is not guaranteed to work with the new\n        // app version.\n        int registeredVersion = prefs.getInt(AbstractYasmeActivity.PROPERTY_APP_VERSION, Integer.MIN_VALUE);\n        int currentVersion = getAppVersion(context);\n        if (registeredVersion != currentVersion) {\n            Log.i(AbstractYasmeActivity.TAG, \"App version changed.\");\n            return \"\";\n        }\n        return registrationId;\n    }\n\n    public SharedPreferences getGCMPreferences(Context context) {\n        return context.getSharedPreferences(LoginActivity.class.getSimpleName(),\n                Context.MODE_PRIVATE);\n    }\n\n    public int getAppVersion(Context context) {\n        try {\n            PackageInfo packageInfo = context.getPackageManager()\n                    .getPackageInfo(context.getPackageName(), 0);\n            return packageInfo.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n            throw new RuntimeException(\"Could not get package name: \" + e);\n        }\n    }\n\n    public String registerInBackground() {\n        try {\n            if (gcm == null) {\n                gcm = GoogleCloudMessaging.getInstance(context);\n            }\n            regid = gcm.register(AbstractYasmeActivity.SENDER_ID);\n\n            Log.d(this.getClass().getSimpleName(), \"Device registered, registration ID=\" + regid);\n\n            // Persist the regID - no need to register again.\n            storeRegistrationId(context, regid);\n            return regid;\n        } catch (IOException e) {\n            // If there is an error, don't just keep trying to register.\n            // Require the user to click a button again, or perform\n            // exponential back-off.\n            Log.e(this.getClass().getSimpleName(), e.getMessage());\n            return null;\n        }\n    }\n\n    private void storeRegistrationId(Context context, String regId) {\n        final SharedPreferences prefs = getGCMPreferences(context);\n        int appVersion = getAppVersion(context);\n        Log.i(AbstractYasmeActivity.TAG, \"Saving regId on app version \" + appVersion);\n        SharedPreferences.Editor editor = prefs.edit();\n        editor.putString(AbstractYasmeActivity.PROPERTY_REG_ID, regId);\n        editor.putInt(AbstractYasmeActivity.PROPERTY_APP_VERSION, appVersion);\n        editor.commit();\n\n        // For Developer-Devices only\n        if (DebugManager.INSTANCE.isDebugMode()) {\n            Log.d(getClass().getSimpleName(), \"Store gcmId to external storage\");\n            DebugManager.INSTANCE.storePushId(regId);\n        }\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/storage/DebugManager.java\npublic enum DebugManager {\r\n    INSTANCE;\r\n\r\n    private final String OWNDEVICE = \"owndevice\";\r\n    private final String MESSAGEKEYS = \"messagekeys\";\r\n\r\n    private boolean debugMode = false;\r\n    private OwnDevice ownDevice = new OwnDevice();\r\n\r\n    public boolean isDebugMode() {\r\n        return debugMode;\r\n    }\r\n\r\n    public boolean storeDeviceId(long deviceId) {\r\n        ownDevice.setId(deviceId);\r\n        return storeOwnDeviceToExternalStorage();\r\n    }\r\n\r\n\r\n    public boolean storePrivatePublicKeyToExternalStorage(String privateKey, String publicKey) {\r\n        ownDevice.setPrivateKey(privateKey);\r\n        ownDevice.setPublicKey(publicKey);\r\n        return storeOwnDeviceToExternalStorage();\r\n    }\r\n\r\n    public boolean storePushId(String pushId) {\r\n        ownDevice.setPushId(pushId);\r\n        return storeOwnDeviceToExternalStorage();\r\n    }\r\n\r\n    private boolean storeOwnDeviceToExternalStorage() {\r\n        return storeToExternalStorage(OWNDEVICE, ownDevice, false);\r\n    }\r\n\r\n    public boolean storeMessageKeyToExternalStorage(MessageKey data) {\r\n        return storeToExternalStorage(MESSAGEKEYS, data, true);\r\n    }\r\n\r\n    private boolean storeToExternalStorage(String name, Object data, boolean append) {\r\n        try {\r\n            String state = Environment.getExternalStorageState();\r\n            Log.d(getClass().getSimpleName(), \"Check state\");\r\n            if (!Environment.MEDIA_MOUNTED.equals(state)) {\r\n                return false;\r\n            }\r\n            Log.d(getClass().getSimpleName(), \"Open dir\");\r\n            File dir = getDir();\r\n            Log.d(getClass().getSimpleName(), \"Mkdir\");\r\n            if (!dir.exists() && !dir.mkdirs()) {\r\n                Log.d(getClass().getSimpleName(), \"... failed\");\r\n               return false;\r\n            }\r\n            Log.d(getClass().getSimpleName(), \"Open file\");\r\n            File file = new File(dir,name + \".txt\");\r\n            Log.d(getClass().getSimpleName(), \"Write file\");\r\n\r\n            ObjectWriter objectWriter = new ObjectMapper().writer();\r\n            String json = objectWriter.writeValueAsString(data);\r\n            Log.d(getClass().getSimpleName(),\"Generated JSON: \" + json);\r\n\r\n            FileOutputStream f = new FileOutputStream(file,append);\r\n            PrintWriter pw = new PrintWriter(f);\r\n            if (append) {\r\n                pw.println(json + \",\");\r\n            } else {\r\n                pw.println(json);\r\n            }\r\n            pw.flush();\r\n            pw.close();\r\n            f.close();\r\n        } catch (Exception e) {\r\n            Log.e(this.getClass().getSimpleName(),e.getMessage());\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public boolean restoreData() {\r\n        Log.d(getClass().getSimpleName(),\"Restoring data\");\r\n        if (!restoreOwnDeviceFromExternalStorage()) {\r\n            Log.d(getClass().getSimpleName(), \"Restoring OwnDevice failed\");\r\n            return false;\r\n        }\r\n        if (!restoreMessageKeysFromExternalStorage()) {\r\n            Log.d(getClass().getSimpleName(), \"Restoring MessageKeys failed\");\r\n            return false;\r\n        }\r\n        Log.d(getClass().getSimpleName(), \"Restoring successful\");\r\n        Toaster.getInstance().toast(\"Restoring Debug-Data successful\", Toast.LENGTH_LONG);\r\n        return true;\r\n    }\r\n\r\n\r\n    private boolean restoreOwnDeviceFromExternalStorage() {\r\n         final String RSAKEY_STORAGE = \"rsaKeyStorage\"; //Storage for Private and Public Keys from user\r\n         final String PRIVATEKEY = \"privateKey\";\r\n         final String PUBLICKEY = \"publicKey\";\r\n\r\n        try {\r\n            OwnDevice device = getOwnDeviceFromExternalStorage();\r\n            if (device == null) {\r\n                Log.d(getClass().getSimpleName(), \"Device is null\");\r\n                return false;\r\n            }\r\n\r\n            // Restore devId\r\n            Log.d(getClass().getSimpleName(), \"Restore devId\");\r\n            SharedPreferences.Editor editor1 = DatabaseManager.INSTANCE.getSharedPreferences().edit();\r\n            editor1.putLong(AbstractYasmeActivity.DEVICE_ID, ownDevice.getId());\r\n            editor1.commit();\r\n\r\n            // Restore pushId and app version\r\n            Log.d(getClass().getSimpleName(), \"Restore pushId\");\r\n            SharedPreferences prefs = DatabaseManager.INSTANCE.getContext().getSharedPreferences(LoginActivity.class.getSimpleName(), Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor2 = prefs.edit();\r\n            editor2.putString(AbstractYasmeActivity.PROPERTY_REG_ID, ownDevice.getPushId());\r\n            editor2.commit();\r\n\r\n            // Restore PrivatePublicKey\r\n            Log.d(getClass().getSimpleName(), \"Restore PrivPubKeys\");\r\n            String RSAKEY_STORAGE_USER = RSAKEY_STORAGE + \"_\" + ownDevice.getId();\r\n            Context context = DatabaseManager.INSTANCE.getContext();\r\n            SharedPreferences privKeyStorage = context.getSharedPreferences(RSAKEY_STORAGE_USER, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor keyeditor = privKeyStorage.edit();\r\n\r\n            keyeditor.putString(PRIVATEKEY, device.getPrivateKey());\r\n            keyeditor.putString(PUBLICKEY,device.getPublicKey());\r\n            keyeditor.commit();\r\n        } catch (Exception e) {\r\n            Log.e(this.getClass().getSimpleName(),e.getMessage());\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private OwnDevice getOwnDeviceFromExternalStorage() {\r\n        String text = readText(OWNDEVICE);\r\n        if (text == null || text == \"\") {\r\n            return null;\r\n        }\r\n        Log.d(getClass().getSimpleName(), \"Device-Text: \" + text);\r\n        try {\r\n            OwnDevice device = new ObjectMapper().readValue(text, OwnDevice.class);\r\n            Log.d(getClass().getSimpleName(), \"PubKey: \" + device.getPublicKey());\r\n            return device;\r\n        } catch (Exception e) {\r\n            Log.e(this.getClass().getSimpleName(),e.getMessage());\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private boolean restoreMessageKeysFromExternalStorage() {\r\n        String text = readText(MESSAGEKEYS);\r\n        if (text == null) {\r\n            retu